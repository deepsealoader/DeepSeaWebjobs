// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package deepsea.update_one_month_sales_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: UPDATE_ONE_MONTH_SALES Purpose: Update One Month Sales<br>
 * Description:  <br>
 * @author 
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class UPDATE_ONE_MONTH_SALES implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (COUNTRY != null) {

				this.setProperty("COUNTRY", COUNTRY.toString());

			}

			if (BATCH_DATE != null) {

				this.setProperty("BATCH_DATE", BATCH_DATE.toString());

			}

			if (COLLECTION1 != null) {

				this.setProperty("COLLECTION1", COLLECTION1.toString());

			}

			if (COLLECTION2 != null) {

				this.setProperty("COLLECTION2", COLLECTION2.toString());

			}

			if (FILE_PREFIX != null) {

				this.setProperty("FILE_PREFIX", FILE_PREFIX.toString());

			}

			if (MONGODB_HOSTNAME != null) {

				this.setProperty("MONGODB_HOSTNAME",
						MONGODB_HOSTNAME.toString());

			}

		}

		public String COUNTRY;

		public String getCOUNTRY() {
			return this.COUNTRY;
		}

		public String BATCH_DATE;

		public String getBATCH_DATE() {
			return this.BATCH_DATE;
		}

		public String COLLECTION1;

		public String getCOLLECTION1() {
			return this.COLLECTION1;
		}

		public String COLLECTION2;

		public String getCOLLECTION2() {
			return this.COLLECTION2;
		}

		public String FILE_PREFIX;

		public String getFILE_PREFIX() {
			return this.FILE_PREFIX;
		}

		public String MONGODB_HOSTNAME;

		public String getMONGODB_HOSTNAME() {
			return this.MONGODB_HOSTNAME;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "UPDATE_ONE_MONTH_SALES";
	private final String projectName = "DEEPSEA";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					UPDATE_ONE_MONTH_SALES.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(UPDATE_ONE_MONTH_SALES.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tChronometerStop_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tChronometerStop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileFetch_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileFetch_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnite_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputExcel_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMongoDBClose_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSetGlobalVar_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBInput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSetGlobalVar_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractFields_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBInput_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractFields_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tChronometerStop_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileFetch_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBClose_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tChronometerStop_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tChronometerStop_1 begin ] start
				 */

				ok_Hash.put("tChronometerStop_1", false);
				start_Hash
						.put("tChronometerStop_1", System.currentTimeMillis());

				currentComponent = "tChronometerStop_1";

				int tos_count_tChronometerStop_1 = 0;

				class BytesLimit65535_tChronometerStop_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tChronometerStop_1().limitLog4jByte();

				long timetChronometerStop_1;

				timetChronometerStop_1 = System.currentTimeMillis() - startTime;

				System.out.print("[ tChronometerStop_1 ]  ");

				System.out.println("" + "  " + timetChronometerStop_1
						+ " milliseconds");

				Long currentTimetChronometerStop_1 = System.currentTimeMillis();
				globalMap.put("tChronometerStop_1",
						currentTimetChronometerStop_1);

				globalMap.put("tChronometerStop_1_STOPTIME",
						currentTimetChronometerStop_1);
				globalMap.put("tChronometerStop_1_DURATION",
						timetChronometerStop_1);

				/**
				 * [tChronometerStop_1 begin ] stop
				 */

				/**
				 * [tChronometerStop_1 main ] start
				 */

				currentComponent = "tChronometerStop_1";

				tos_count_tChronometerStop_1++;

				/**
				 * [tChronometerStop_1 main ] stop
				 */

				/**
				 * [tChronometerStop_1 process_data_begin ] start
				 */

				currentComponent = "tChronometerStop_1";

				/**
				 * [tChronometerStop_1 process_data_begin ] stop
				 */

				/**
				 * [tChronometerStop_1 process_data_end ] start
				 */

				currentComponent = "tChronometerStop_1";

				/**
				 * [tChronometerStop_1 process_data_end ] stop
				 */

				/**
				 * [tChronometerStop_1 end ] start
				 */

				currentComponent = "tChronometerStop_1";

				ok_Hash.put("tChronometerStop_1", true);
				end_Hash.put("tChronometerStop_1", System.currentTimeMillis());

				/**
				 * [tChronometerStop_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tChronometerStop_1 finally ] start
				 */

				currentComponent = "tChronometerStop_1";

				/**
				 * [tChronometerStop_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_1 begin ] start
				 */

				ok_Hash.put("tFileDelete_1", false);
				start_Hash.put("tFileDelete_1", System.currentTimeMillis());

				currentComponent = "tFileDelete_1";

				int tos_count_tFileDelete_1 = 0;

				class BytesLimit65535_tFileDelete_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileDelete_1().limitLog4jByte();

				/**
				 * [tFileDelete_1 begin ] stop
				 */

				/**
				 * [tFileDelete_1 main ] start
				 */

				currentComponent = "tFileDelete_1";

				class DeleteFoldertFileDelete_1 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_1 = new java.io.File(globalMap
						.get("FILE_PATH1").toString());
				if (file_tFileDelete_1.exists() && file_tFileDelete_1.isFile()) {
					if (file_tFileDelete_1.delete()) {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"File deleted.");
					} else {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_1_CURRENT_STATUS",
							"File does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_1_DELETE_PATH",
						globalMap.get("FILE_PATH1").toString());

				tos_count_tFileDelete_1++;

				/**
				 * [tFileDelete_1 main ] stop
				 */

				/**
				 * [tFileDelete_1 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_1 process_data_end ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_1 end ] start
				 */

				currentComponent = "tFileDelete_1";

				ok_Hash.put("tFileDelete_1", true);
				end_Hash.put("tFileDelete_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tFileDelete_3Process(globalMap);

				/**
				 * [tFileDelete_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_1 finally ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileDelete_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_3 begin ] start
				 */

				ok_Hash.put("tFileDelete_3", false);
				start_Hash.put("tFileDelete_3", System.currentTimeMillis());

				currentComponent = "tFileDelete_3";

				int tos_count_tFileDelete_3 = 0;

				class BytesLimit65535_tFileDelete_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileDelete_3().limitLog4jByte();

				/**
				 * [tFileDelete_3 begin ] stop
				 */

				/**
				 * [tFileDelete_3 main ] start
				 */

				currentComponent = "tFileDelete_3";

				class DeleteFoldertFileDelete_3 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_3 = new java.io.File(globalMap
						.get("FILE_PATH").toString());
				if (file_tFileDelete_3.exists() && file_tFileDelete_3.isFile()) {
					if (file_tFileDelete_3.delete()) {
						globalMap.put("tFileDelete_3_CURRENT_STATUS",
								"File deleted.");
					} else {
						globalMap.put("tFileDelete_3_CURRENT_STATUS",
								"No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_3_CURRENT_STATUS",
							"File does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_3_DELETE_PATH",
						globalMap.get("FILE_PATH").toString());

				tos_count_tFileDelete_3++;

				/**
				 * [tFileDelete_3 main ] stop
				 */

				/**
				 * [tFileDelete_3 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_3";

				/**
				 * [tFileDelete_3 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_3 process_data_end ] start
				 */

				currentComponent = "tFileDelete_3";

				/**
				 * [tFileDelete_3 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_3 end ] start
				 */

				currentComponent = "tFileDelete_3";

				ok_Hash.put("tFileDelete_3", true);
				end_Hash.put("tFileDelete_3", System.currentTimeMillis());

				/**
				 * [tFileDelete_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_3 finally ] start
				 */

				currentComponent = "tFileDelete_3";

				/**
				 * [tFileDelete_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_3_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_2 begin ] start
				 */

				ok_Hash.put("tFileDelete_2", false);
				start_Hash.put("tFileDelete_2", System.currentTimeMillis());

				currentComponent = "tFileDelete_2";

				int tos_count_tFileDelete_2 = 0;

				class BytesLimit65535_tFileDelete_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileDelete_2().limitLog4jByte();

				/**
				 * [tFileDelete_2 begin ] stop
				 */

				/**
				 * [tFileDelete_2 main ] start
				 */

				currentComponent = "tFileDelete_2";

				class DeleteFoldertFileDelete_2 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_2 = new java.io.File(globalMap
						.get("FILE_PATH2").toString());
				if (file_tFileDelete_2.exists() && file_tFileDelete_2.isFile()) {
					if (file_tFileDelete_2.delete()) {
						globalMap.put("tFileDelete_2_CURRENT_STATUS",
								"File deleted.");
					} else {
						globalMap.put("tFileDelete_2_CURRENT_STATUS",
								"No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_2_CURRENT_STATUS",
							"File does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_2_DELETE_PATH",
						globalMap.get("FILE_PATH2").toString());

				tos_count_tFileDelete_2++;

				/**
				 * [tFileDelete_2 main ] stop
				 */

				/**
				 * [tFileDelete_2 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_2";

				/**
				 * [tFileDelete_2 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_2 process_data_end ] start
				 */

				currentComponent = "tFileDelete_2";

				/**
				 * [tFileDelete_2 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_2 end ] start
				 */

				currentComponent = "tFileDelete_2";

				ok_Hash.put("tFileDelete_2", true);
				end_Hash.put("tFileDelete_2", System.currentTimeMillis());

				/**
				 * [tFileDelete_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_2 finally ] start
				 */

				currentComponent = "tFileDelete_2";

				/**
				 * [tFileDelete_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 1);
	}

	public void tFileFetch_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileFetch_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileFetch_1 begin ] start
				 */

				ok_Hash.put("tFileFetch_1", false);
				start_Hash.put("tFileFetch_1", System.currentTimeMillis());

				currentComponent = "tFileFetch_1";

				int tos_count_tFileFetch_1 = 0;

				class BytesLimit65535_tFileFetch_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileFetch_1().limitLog4jByte();

				/**
				 * [tFileFetch_1 begin ] stop
				 */

				/**
				 * [tFileFetch_1 main ] start
				 */

				currentComponent = "tFileFetch_1";

				java.io.InputStream retIS_tFileFetch_1 = null;

				java.net.URI uriToFetch_tFileFetch_1 = null;
				try {
					uriToFetch_tFileFetch_1 = new java.net.URI(
							"http://localhost/api/v1/lakefs/"
									+ globalMap.get("COLLECTION2_ID")
											.toString() + "/files");
				} catch (Exception e) {
					System.err
							.println("URI is not correct or not encoded, please input a valid one or use 'Encode URI' option");
				}

				org.apache.commons.httpclient.HttpClient client_tFileFetch_1 = new org.apache.commons.httpclient.HttpClient();

				client_tFileFetch_1.getHttpConnectionManager().getParams()
						.setConnectionTimeout(30000);

				client_tFileFetch_1
						.getParams()
						.setCookiePolicy(
								org.apache.commons.httpclient.cookie.CookiePolicy.DEFAULT);

				org.apache.commons.httpclient.HttpMethod method_tFileFetch_1 = new org.apache.commons.httpclient.methods.PostMethod(
						uriToFetch_tFileFetch_1.toString());

				org.apache.commons.httpclient.methods.multipart.StringPart common_1_tFileFetch_1 = new org.apache.commons.httpclient.methods.multipart.StringPart(
						"data", "{ \"batchDate\": \"" + context.getBATCH_DATE()
								+ "\" }");

				org.apache.commons.httpclient.methods.multipart.FilePart file_1_tFileFetch_1 = new org.apache.commons.httpclient.methods.multipart.FilePart(
						"file", new java.io.File(globalMap.get("FILE_PATH")
								.toString()), "application/vnd.ms-excel",
						"UTF-8");

				org.apache.commons.httpclient.methods.multipart.Part[] parts_tFileFetch_1 = new org.apache.commons.httpclient.methods.multipart.Part[] {
						common_1_tFileFetch_1, file_1_tFileFetch_1, };
				((org.apache.commons.httpclient.methods.PostMethod) method_tFileFetch_1)
						.setRequestEntity(new org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity(
								parts_tFileFetch_1, method_tFileFetch_1
										.getParams()));

				method_tFileFetch_1.addRequestHeader("Authorization",
						"Basic Ym9iLm1vcmFuZUBzZXJ2aWVyLmNvbTptb3JhbmU=");

				boolean isContinue_tFileFetch_1 = true;
				int status_tFileFetch_1;
				String finalURL_tFileFetch_1 = uriToFetch_tFileFetch_1
						.toString();

				try { // B_01

					status_tFileFetch_1 = client_tFileFetch_1
							.executeMethod(method_tFileFetch_1);

					if (!(status_tFileFetch_1 == org.apache.commons.httpclient.HttpStatus.SC_OK || status_tFileFetch_1 == org.apache.commons.httpclient.HttpStatus.SC_ACCEPTED)) {
						throw new java.lang.Exception("Method failed: "
								+ method_tFileFetch_1.getStatusLine());
					}

				} catch (java.lang.Exception e) {

					throw (e);

				}

				if (isContinue_tFileFetch_1) {

					retIS_tFileFetch_1 = method_tFileFetch_1
							.getResponseBodyAsStream();

				} // B_01
				java.io.InputStream streamtFileFetch_1 = (java.io.InputStream) globalMap
						.get("tFileFetch_1_INPUT_STREAM");
				if (streamtFileFetch_1 != null) {
					streamtFileFetch_1.close();
				}
				globalMap.put("tFileFetch_1_INPUT_STREAM", retIS_tFileFetch_1);

				tos_count_tFileFetch_1++;

				/**
				 * [tFileFetch_1 main ] stop
				 */

				/**
				 * [tFileFetch_1 process_data_begin ] start
				 */

				currentComponent = "tFileFetch_1";

				/**
				 * [tFileFetch_1 process_data_begin ] stop
				 */

				/**
				 * [tFileFetch_1 process_data_end ] start
				 */

				currentComponent = "tFileFetch_1";

				/**
				 * [tFileFetch_1 process_data_end ] stop
				 */

				/**
				 * [tFileFetch_1 end ] start
				 */

				currentComponent = "tFileFetch_1";

				ok_Hash.put("tFileFetch_1", true);
				end_Hash.put("tFileFetch_1", System.currentTimeMillis());

				/**
				 * [tFileFetch_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileFetch_1 finally ] start
				 */

				currentComponent = "tFileFetch_1";

				/**
				 * [tFileFetch_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileFetch_1_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[0];
		static byte[] commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[0];

		public String hash;

		public String getHash() {
			return this.hash;
		}

		public String location;

		public String getLocation() {
			return this.location;
		}

		public String province;

		public String getProvince() {
			return this.province;
		}

		public String customerCode;

		public String getCustomerCode() {
			return this.customerCode;
		}

		public String customerName;

		public String getCustomerName() {
			return this.customerName;
		}

		public String customerType;

		public String getCustomerType() {
			return this.customerType;
		}

		public String productCode;

		public String getProductCode() {
			return this.productCode;
		}

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String amount;

		public String getAmount() {
			return this.amount;
		}

		public String quantity;

		public String getQuantity() {
			return this.quantity;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES.length == 0) {
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_UPDATE_ONE_MONTH_SALES) {

				try {

					int length = 0;

					this.hash = readString(dis);

					this.location = readString(dis);

					this.province = readString(dis);

					this.customerCode = readString(dis);

					this.customerName = readString(dis);

					this.customerType = readString(dis);

					this.productCode = readString(dis);

					this.productName = readString(dis);

					this.amount = readString(dis);

					this.quantity = readString(dis);

					this.date = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.hash, dos);

				// String

				writeString(this.location, dos);

				// String

				writeString(this.province, dos);

				// String

				writeString(this.customerCode, dos);

				// String

				writeString(this.customerName, dos);

				// String

				writeString(this.customerType, dos);

				// String

				writeString(this.productCode, dos);

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.amount, dos);

				// String

				writeString(this.quantity, dos);

				// String

				writeString(this.date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("hash=" + hash);
			sb.append(",location=" + location);
			sb.append(",province=" + province);
			sb.append(",customerCode=" + customerCode);
			sb.append(",customerName=" + customerName);
			sb.append(",customerType=" + customerType);
			sb.append(",productCode=" + productCode);
			sb.append(",productName=" + productName);
			sb.append(",amount=" + amount);
			sb.append(",quantity=" + quantity);
			sb.append(",date=" + date);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[0];
		static byte[] commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[0];

		public String hash;

		public String getHash() {
			return this.hash;
		}

		public String location;

		public String getLocation() {
			return this.location;
		}

		public String province;

		public String getProvince() {
			return this.province;
		}

		public String customerCode;

		public String getCustomerCode() {
			return this.customerCode;
		}

		public String customerName;

		public String getCustomerName() {
			return this.customerName;
		}

		public String customerType;

		public String getCustomerType() {
			return this.customerType;
		}

		public String productCode;

		public String getProductCode() {
			return this.productCode;
		}

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String amount;

		public String getAmount() {
			return this.amount;
		}

		public String quantity;

		public String getQuantity() {
			return this.quantity;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES.length == 0) {
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_UPDATE_ONE_MONTH_SALES) {

				try {

					int length = 0;

					this.hash = readString(dis);

					this.location = readString(dis);

					this.province = readString(dis);

					this.customerCode = readString(dis);

					this.customerName = readString(dis);

					this.customerType = readString(dis);

					this.productCode = readString(dis);

					this.productName = readString(dis);

					this.amount = readString(dis);

					this.quantity = readString(dis);

					this.date = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.hash, dos);

				// String

				writeString(this.location, dos);

				// String

				writeString(this.province, dos);

				// String

				writeString(this.customerCode, dos);

				// String

				writeString(this.customerName, dos);

				// String

				writeString(this.customerType, dos);

				// String

				writeString(this.productCode, dos);

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.amount, dos);

				// String

				writeString(this.quantity, dos);

				// String

				writeString(this.date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("hash=" + hash);
			sb.append(",location=" + location);
			sb.append(",province=" + province);
			sb.append(",customerCode=" + customerCode);
			sb.append(",customerName=" + customerName);
			sb.append(",customerType=" + customerType);
			sb.append(",productCode=" + productCode);
			sb.append(",productName=" + productName);
			sb.append(",amount=" + amount);
			sb.append(",quantity=" + quantity);
			sb.append(",date=" + date);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[0];
		static byte[] commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[0];

		public String hash;

		public String getHash() {
			return this.hash;
		}

		public String location;

		public String getLocation() {
			return this.location;
		}

		public String province;

		public String getProvince() {
			return this.province;
		}

		public String customerCode;

		public String getCustomerCode() {
			return this.customerCode;
		}

		public String customerName;

		public String getCustomerName() {
			return this.customerName;
		}

		public String customerType;

		public String getCustomerType() {
			return this.customerType;
		}

		public String productCode;

		public String getProductCode() {
			return this.productCode;
		}

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String amount;

		public String getAmount() {
			return this.amount;
		}

		public String quantity;

		public String getQuantity() {
			return this.quantity;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES.length == 0) {
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_UPDATE_ONE_MONTH_SALES) {

				try {

					int length = 0;

					this.hash = readString(dis);

					this.location = readString(dis);

					this.province = readString(dis);

					this.customerCode = readString(dis);

					this.customerName = readString(dis);

					this.customerType = readString(dis);

					this.productCode = readString(dis);

					this.productName = readString(dis);

					this.amount = readString(dis);

					this.quantity = readString(dis);

					this.date = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.hash, dos);

				// String

				writeString(this.location, dos);

				// String

				writeString(this.province, dos);

				// String

				writeString(this.customerCode, dos);

				// String

				writeString(this.customerName, dos);

				// String

				writeString(this.customerType, dos);

				// String

				writeString(this.productCode, dos);

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.amount, dos);

				// String

				writeString(this.quantity, dos);

				// String

				writeString(this.date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("hash=" + hash);
			sb.append(",location=" + location);
			sb.append(",province=" + province);
			sb.append(",customerCode=" + customerCode);
			sb.append(",customerName=" + customerName);
			sb.append(",customerType=" + customerType);
			sb.append(",productCode=" + productCode);
			sb.append(",productName=" + productName);
			sb.append(",amount=" + amount);
			sb.append(",quantity=" + quantity);
			sb.append(",date=" + date);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				row8Struct row8 = new row8Struct();

				row9Struct row9 = new row9Struct();

				/**
				 * [tFileOutputExcel_3 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_3", false);
				start_Hash
						.put("tFileOutputExcel_3", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputExcel_3 = 0;

				class BytesLimit65535_tFileOutputExcel_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputExcel_3().limitLog4jByte();

				int columnIndex_tFileOutputExcel_3 = 0;

				String fileName_tFileOutputExcel_3 = globalMap.get("FILE_PATH")
						.toString();
				int nb_line_tFileOutputExcel_3 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_3 = new org.talend.ExcelTool();
				xlsxTool_tFileOutputExcel_3.setSheet("Sheet1");
				xlsxTool_tFileOutputExcel_3.setAppend(false, true);
				xlsxTool_tFileOutputExcel_3.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_3.setXY(false, 0, 0, false);

				xlsxTool_tFileOutputExcel_3
						.prepareXlsxFile(fileName_tFileOutputExcel_3);

				xlsxTool_tFileOutputExcel_3.setFont("");

				if (xlsxTool_tFileOutputExcel_3.getStartRow() == 0) {

					xlsxTool_tFileOutputExcel_3.addRow();

					xlsxTool_tFileOutputExcel_3.addCellValue("hash");

					xlsxTool_tFileOutputExcel_3.addCellValue("location");

					xlsxTool_tFileOutputExcel_3.addCellValue("province");

					xlsxTool_tFileOutputExcel_3.addCellValue("customerCode");

					xlsxTool_tFileOutputExcel_3.addCellValue("customerName");

					xlsxTool_tFileOutputExcel_3.addCellValue("customerType");

					xlsxTool_tFileOutputExcel_3.addCellValue("productCode");

					xlsxTool_tFileOutputExcel_3.addCellValue("productName");

					xlsxTool_tFileOutputExcel_3.addCellValue("amount");

					xlsxTool_tFileOutputExcel_3.addCellValue("quantity");

					xlsxTool_tFileOutputExcel_3.addCellValue("date");

					nb_line_tFileOutputExcel_3++;

				}

				/**
				 * [tFileOutputExcel_3 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());

				currentComponent = "tUnite_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);

					}
				}

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tUnite_1 = 0;

				class BytesLimit65535_tUnite_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tUnite_1().limitLog4jByte();

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				class BytesLimit65535_tFileInputDelimited_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /**
				 * Start field
				 * tFileInputDelimited_1:FILENAME
				 */
				globalMap.get("FILE_PATH1").toString()/**
				 * End field
				 * tFileInputDelimited_1:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_1)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1
								.setEscapeChar(csvReadertFileInputDelimited_1
										.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 0; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_1.readNext()) {

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
										.getValues();
								if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_1[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_1++;

								}

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
									: totalLinetFileInputDelimited_1
											- footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1
									.setEscapeChar(csvReadertFileInputDelimited_1
											.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 0; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_1 != 0
							&& csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {
						rowstate_tFileInputDelimited_1.reset();

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
								.getValues();

						if (rowtFileInputDelimited_1.length == 1
								&& ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row7 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row7 = new row7Struct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) ";").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) ";")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row7.hash = null;

								row7.location = null;

								row7.province = null;

								row7.customerCode = null;

								row7.customerName = null;

								row7.customerType = null;

								row7.productCode = null;

								row7.productName = null;

								row7.amount = null;

								row7.quantity = null;

								row7.date = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row7.hash = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row7.hash = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row7.location = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row7.location = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row7.province = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row7.province = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row7.customerCode = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row7.customerCode = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row7.customerName = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row7.customerName = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row7.customerType = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row7.customerType = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 6;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row7.productCode = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row7.productCode = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 7;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row7.productName = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row7.productName = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 8;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row7.amount = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row7.amount = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 9;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row7.quantity = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row7.quantity = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 10;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row7.date = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row7.date = null;

								}

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row7 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
						// Start of branch "row7"
						if (row7 != null) {

							/**
							 * [tUnite_1 main ] start
							 */

							currentComponent = "tUnite_1";

							// row8
							// row7

							// row7
							// row7

							if (execStat) {
								runStat.updateStatOnConnection("row7"
										+ iterateId, 1, 1);
							}

							// ////////

							// for output
							row9 = new row9Struct();

							row9.hash = row7.hash;
							row9.location = row7.location;
							row9.province = row7.province;
							row9.customerCode = row7.customerCode;
							row9.customerName = row7.customerName;
							row9.customerType = row7.customerType;
							row9.productCode = row7.productCode;
							row9.productName = row7.productName;
							row9.amount = row7.amount;
							row9.quantity = row7.quantity;
							row9.date = row7.date;

							nb_line_tUnite_1++;

							// ////////

							tos_count_tUnite_1++;

							/**
							 * [tUnite_1 main ] stop
							 */

							/**
							 * [tUnite_1 process_data_begin ] start
							 */

							currentComponent = "tUnite_1";

							/**
							 * [tUnite_1 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputExcel_3 main ] start
							 */

							currentComponent = "tFileOutputExcel_3";

							// row9
							// row9

							if (execStat) {
								runStat.updateStatOnConnection("row9"
										+ iterateId, 1, 1);
							}

							xlsxTool_tFileOutputExcel_3.addRow();

							if (row9.hash != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row9.hash));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row9.location != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row9.location));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row9.province != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row9.province));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row9.customerCode != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row9.customerCode));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row9.customerName != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row9.customerName));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row9.customerType != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row9.customerType));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row9.productCode != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row9.productCode));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row9.productName != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row9.productName));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row9.amount != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row9.amount));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row9.quantity != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row9.quantity));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row9.date != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row9.date));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							nb_line_tFileOutputExcel_3++;

							tos_count_tFileOutputExcel_3++;

							/**
							 * [tFileOutputExcel_3 main ] stop
							 */

							/**
							 * [tFileOutputExcel_3 process_data_begin ] start
							 */

							currentComponent = "tFileOutputExcel_3";

							/**
							 * [tFileOutputExcel_3 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputExcel_3 process_data_end ] start
							 */

							currentComponent = "tFileOutputExcel_3";

							/**
							 * [tFileOutputExcel_3 process_data_end ] stop
							 */

							/**
							 * [tUnite_1 process_data_end ] start
							 */

							currentComponent = "tUnite_1";

							/**
							 * [tUnite_1 process_data_end ] stop
							 */

						} // End of branch "row7"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				class BytesLimit65535_tFileInputDelimited_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputDelimited_2().limitLog4jByte();

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;

				char fieldSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_2 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_2 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_2 = /**
				 * Start field
				 * tFileInputDelimited_2:FILENAME
				 */
				globalMap.get("FILE_PATH2").toString()/**
				 * End field
				 * tFileInputDelimited_2:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

				try {

					String[] rowtFileInputDelimited_2 = null;
					int currentLinetFileInputDelimited_2 = 0;
					int outputLinetFileInputDelimited_2 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0;
							if (footer_value_tFileInputDelimited_2 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_2,
									fieldSeparator_tFileInputDelimited_2[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_2)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_2[0]);
						}

						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
							csvReadertFileInputDelimited_2.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_2[0]);

						csvReadertFileInputDelimited_2.setQuoteChar('"');

						csvReadertFileInputDelimited_2
								.setEscapeChar(csvReadertFileInputDelimited_2
										.getQuoteChar());

						if (footer_tFileInputDelimited_2 > 0) {
							for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 0; totalLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
							csvReadertFileInputDelimited_2
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_2.readNext()) {

								rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
										.getValues();
								if (!(rowtFileInputDelimited_2.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_2[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_2++;

								}

							}
							int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
									- footer_tFileInputDelimited_2 < 0 ? 0
									: totalLinetFileInputDelimited_2
											- footer_tFileInputDelimited_2;
							if (lastLinetFileInputDelimited_2 > 0) {
								lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2
										: lastLineTemptFileInputDelimited_2;
							} else {
								lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
							}

							csvReadertFileInputDelimited_2.close();
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_2)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_2[0]);
							}
							csvReadertFileInputDelimited_2
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2.setQuoteChar('"');

							csvReadertFileInputDelimited_2
									.setEscapeChar(csvReadertFileInputDelimited_2
											.getQuoteChar());

						}

						if (limittFileInputDelimited_2 != 0) {
							for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 0; currentLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
						}
						csvReadertFileInputDelimited_2
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_2 != 0
							&& csvReadertFileInputDelimited_2 != null
							&& csvReadertFileInputDelimited_2.readNext()) {
						rowstate_tFileInputDelimited_2.reset();

						rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
								.getValues();

						if (rowtFileInputDelimited_2.length == 1
								&& ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_2++;

						if (lastLinetFileInputDelimited_2 > -1
								&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
							break;
						}
						outputLinetFileInputDelimited_2++;
						if (limittFileInputDelimited_2 > 0
								&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
							break;
						}

						row8 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row8 = new row8Struct();
						try {

							char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) ";").length() > 0) {
								fieldSeparator_tFileInputDelimited_2_ListType = ((String) ";")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_2.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row8.hash = null;

								row8.location = null;

								row8.province = null;

								row8.customerCode = null;

								row8.customerName = null;

								row8.customerType = null;

								row8.productCode = null;

								row8.productName = null;

								row8.amount = null;

								row8.quantity = null;

								row8.date = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_2 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_2 = 0;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row8.hash = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row8.hash = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 1;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row8.location = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row8.location = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 2;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row8.province = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row8.province = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 3;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row8.customerCode = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row8.customerCode = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 4;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row8.customerName = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row8.customerName = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 5;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row8.customerType = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row8.customerType = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 6;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row8.productCode = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row8.productCode = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 7;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row8.productName = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row8.productName = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 8;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row8.amount = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row8.amount = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 9;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row8.quantity = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row8.quantity = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 10;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row8.date = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row8.date = null;

								}

							}

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row8 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
						// Start of branch "row8"
						if (row8 != null) {

							/**
							 * [tUnite_1 main ] start
							 */

							currentComponent = "tUnite_1";

							// row8
							// row8

							if (execStat) {
								runStat.updateStatOnConnection("row8"
										+ iterateId, 1, 1);
							}

							// row7
							// row8

							// ////////

							// for output
							row9 = new row9Struct();

							row9.hash = row8.hash;
							row9.location = row8.location;
							row9.province = row8.province;
							row9.customerCode = row8.customerCode;
							row9.customerName = row8.customerName;
							row9.customerType = row8.customerType;
							row9.productCode = row8.productCode;
							row9.productName = row8.productName;
							row9.amount = row8.amount;
							row9.quantity = row8.quantity;
							row9.date = row8.date;

							nb_line_tUnite_1++;

							// ////////

							tos_count_tUnite_1++;

							/**
							 * [tUnite_1 main ] stop
							 */

							/**
							 * [tUnite_1 process_data_begin ] start
							 */

							currentComponent = "tUnite_1";

							/**
							 * [tUnite_1 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputExcel_3 main ] start
							 */

							currentComponent = "tFileOutputExcel_3";

							// row9
							// row9

							if (execStat) {
								runStat.updateStatOnConnection("row9"
										+ iterateId, 1, 1);
							}

							xlsxTool_tFileOutputExcel_3.addRow();

							if (row9.hash != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row9.hash));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row9.location != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row9.location));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row9.province != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row9.province));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row9.customerCode != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row9.customerCode));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row9.customerName != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row9.customerName));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row9.customerType != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row9.customerType));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row9.productCode != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row9.productCode));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row9.productName != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row9.productName));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row9.amount != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row9.amount));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row9.quantity != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row9.quantity));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row9.date != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row9.date));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							nb_line_tFileOutputExcel_3++;

							tos_count_tFileOutputExcel_3++;

							/**
							 * [tFileOutputExcel_3 main ] stop
							 */

							/**
							 * [tFileOutputExcel_3 process_data_begin ] start
							 */

							currentComponent = "tFileOutputExcel_3";

							/**
							 * [tFileOutputExcel_3 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputExcel_3 process_data_end ] start
							 */

							currentComponent = "tFileOutputExcel_3";

							/**
							 * [tFileOutputExcel_3 process_data_end ] stop
							 */

							/**
							 * [tUnite_1 process_data_end ] start
							 */

							currentComponent = "tUnite_1";

							/**
							 * [tUnite_1 process_data_end ] stop
							 */

						} // End of branch "row8"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						nb_line_tFileInputDelimited_2++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_2 != null) {
							csvReadertFileInputDelimited_2.close();
						}
					}
					if (csvReadertFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								nb_line_tFileInputDelimited_2);
					}

				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row8" + iterateId, 2, 0);
					}
				}

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tFileOutputExcel_3 end ] start
				 */

				currentComponent = "tFileOutputExcel_3";

				columnIndex_tFileOutputExcel_3 = 0;

				xlsxTool_tFileOutputExcel_3
						.setColAutoSize(columnIndex_tFileOutputExcel_3);

				columnIndex_tFileOutputExcel_3 = 1;

				xlsxTool_tFileOutputExcel_3
						.setColAutoSize(columnIndex_tFileOutputExcel_3);

				columnIndex_tFileOutputExcel_3 = 2;

				xlsxTool_tFileOutputExcel_3
						.setColAutoSize(columnIndex_tFileOutputExcel_3);

				columnIndex_tFileOutputExcel_3 = 3;

				xlsxTool_tFileOutputExcel_3
						.setColAutoSize(columnIndex_tFileOutputExcel_3);

				columnIndex_tFileOutputExcel_3 = 4;

				xlsxTool_tFileOutputExcel_3
						.setColAutoSize(columnIndex_tFileOutputExcel_3);

				columnIndex_tFileOutputExcel_3 = 5;

				xlsxTool_tFileOutputExcel_3
						.setColAutoSize(columnIndex_tFileOutputExcel_3);

				columnIndex_tFileOutputExcel_3 = 6;

				xlsxTool_tFileOutputExcel_3
						.setColAutoSize(columnIndex_tFileOutputExcel_3);

				columnIndex_tFileOutputExcel_3 = 7;

				xlsxTool_tFileOutputExcel_3
						.setColAutoSize(columnIndex_tFileOutputExcel_3);

				columnIndex_tFileOutputExcel_3 = 8;

				xlsxTool_tFileOutputExcel_3
						.setColAutoSize(columnIndex_tFileOutputExcel_3);

				columnIndex_tFileOutputExcel_3 = 9;

				xlsxTool_tFileOutputExcel_3
						.setColAutoSize(columnIndex_tFileOutputExcel_3);

				columnIndex_tFileOutputExcel_3 = 10;

				xlsxTool_tFileOutputExcel_3
						.setColAutoSize(columnIndex_tFileOutputExcel_3);

				xlsxTool_tFileOutputExcel_3.writeExcel(
						fileName_tFileOutputExcel_3, true);

				nb_line_tFileOutputExcel_3 = nb_line_tFileOutputExcel_3 - 1;

				globalMap.put("tFileOutputExcel_3_NB_LINE",
						nb_line_tFileOutputExcel_3);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputExcel_3", true);
				end_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tFileFetch_1Process(globalMap);

				/**
				 * [tFileOutputExcel_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tUnite_1 finally ] start
				 */

				currentComponent = "tUnite_1";

				/**
				 * [tUnite_1 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_3 finally ] start
				 */

				currentComponent = "tFileOutputExcel_3";

				/**
				 * [tFileOutputExcel_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tMongoDBClose_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tMongoDBClose_1 begin ] start
				 */

				ok_Hash.put("tMongoDBClose_1", false);
				start_Hash.put("tMongoDBClose_1", System.currentTimeMillis());

				currentComponent = "tMongoDBClose_1";

				int tos_count_tMongoDBClose_1 = 0;

				class BytesLimit65535_tMongoDBClose_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMongoDBClose_1().limitLog4jByte();

				/**
				 * [tMongoDBClose_1 begin ] stop
				 */

				/**
				 * [tMongoDBClose_1 main ] start
				 */

				currentComponent = "tMongoDBClose_1";

				com.mongodb.Mongo mongo_tMongoDBClose_1 = (com.mongodb.Mongo) globalMap
						.get("mongo_tMongoDBConnection_1");
				if (mongo_tMongoDBClose_1 != null) {

					mongo_tMongoDBClose_1.close();

				}

				tos_count_tMongoDBClose_1++;

				/**
				 * [tMongoDBClose_1 main ] stop
				 */

				/**
				 * [tMongoDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tMongoDBClose_1";

				/**
				 * [tMongoDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tMongoDBClose_1 process_data_end ] start
				 */

				currentComponent = "tMongoDBClose_1";

				/**
				 * [tMongoDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tMongoDBClose_1 end ] start
				 */

				currentComponent = "tMongoDBClose_1";

				ok_Hash.put("tMongoDBClose_1", true);
				end_Hash.put("tMongoDBClose_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tChronometerStop_1Process(globalMap);

				/**
				 * [tMongoDBClose_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMongoDBClose_1 finally ] start
				 */

				currentComponent = "tMongoDBClose_1";

				/**
				 * [tMongoDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tMongoDBConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tMongoDBConnection_1 begin ] start
				 */

				ok_Hash.put("tMongoDBConnection_1", false);
				start_Hash.put("tMongoDBConnection_1",
						System.currentTimeMillis());

				currentComponent = "tMongoDBConnection_1";

				int tos_count_tMongoDBConnection_1 = 0;

				class BytesLimit65535_tMongoDBConnection_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMongoDBConnection_1().limitLog4jByte();

				java.util.logging.Logger.getLogger("org.mongodb.driver")
						.setLevel(java.util.logging.Level.SEVERE);
				// Empty client options
				com.mongodb.MongoClientOptions clientOptions_tMongoDBConnection_1 = new com.mongodb.MongoClientOptions.Builder()
						.build();

				// Empty client credentials list
				java.util.List<com.mongodb.MongoCredential> mongoCredentialList_tMongoDBConnection_1 = new java.util.ArrayList<com.mongodb.MongoCredential>();

				com.mongodb.ServerAddress serverAddress_tMongoDBConnection_1 = new com.mongodb.ServerAddress(
						context.getMONGODB_HOSTNAME(), 27017);
				com.mongodb.Mongo mongo_tMongoDBConnection_1 = new com.mongodb.MongoClient(
						serverAddress_tMongoDBConnection_1,
						mongoCredentialList_tMongoDBConnection_1,
						clientOptions_tMongoDBConnection_1);

				mongo_tMongoDBConnection_1.getAddress();
				com.mongodb.client.MongoDatabase db_tMongoDBConnection_1 = ((com.mongodb.MongoClient) mongo_tMongoDBConnection_1)
						.getDatabase("DEEPSEA");

				globalMap.put("mongo_tMongoDBConnection_1",
						mongo_tMongoDBConnection_1);
				globalMap.put("db_tMongoDBConnection_1",
						db_tMongoDBConnection_1);

				/**
				 * [tMongoDBConnection_1 begin ] stop
				 */

				/**
				 * [tMongoDBConnection_1 main ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				tos_count_tMongoDBConnection_1++;

				/**
				 * [tMongoDBConnection_1 main ] stop
				 */

				/**
				 * [tMongoDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				/**
				 * [tMongoDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tMongoDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				/**
				 * [tMongoDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tMongoDBConnection_1 end ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				ok_Hash.put("tMongoDBConnection_1", true);
				end_Hash.put("tMongoDBConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tMongoDBInput_2Process(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tMongoDBInput_3Process(globalMap);

				/**
				 * [tMongoDBConnection_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMongoDBConnection_1 finally ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				/**
				 * [tMongoDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[0];
		static byte[] commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES.length == 0) {
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_UPDATE_ONE_MONTH_SALES) {

				try {

					int length = 0;

					this.id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMongoDBInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tSetGlobalVar_1 begin ] start
				 */

				ok_Hash.put("tSetGlobalVar_1", false);
				start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				currentComponent = "tSetGlobalVar_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tSetGlobalVar_1 = 0;

				class BytesLimit65535_tSetGlobalVar_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tSetGlobalVar_1().limitLog4jByte();

				/**
				 * [tSetGlobalVar_1 begin ] stop
				 */

				/**
				 * [tMongoDBInput_2 begin ] start
				 */

				ok_Hash.put("tMongoDBInput_2", false);
				start_Hash.put("tMongoDBInput_2", System.currentTimeMillis());

				currentComponent = "tMongoDBInput_2";

				int tos_count_tMongoDBInput_2 = 0;

				class BytesLimit65535_tMongoDBInput_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMongoDBInput_2().limitLog4jByte();

				int nb_line_tMongoDBInput_2 = 0;

				com.mongodb.MongoClient mongo_tMongoDBInput_2 = null;
				com.mongodb.client.MongoDatabase db_tMongoDBInput_2 = null;

				mongo_tMongoDBInput_2 = (com.mongodb.MongoClient) globalMap
						.get("mongo_tMongoDBConnection_1");
				db_tMongoDBInput_2 = (com.mongodb.client.MongoDatabase) globalMap
						.get("db_tMongoDBConnection_1");

				com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBInput_2 = db_tMongoDBInput_2
						.getCollection("collections");

				try {
					// Add warning if an index is not in the query.
					boolean needIndexWarning = true;
					String indexList = "";

					for (com.mongodb.DBObject index : coll_tMongoDBInput_2
							.listIndexes(com.mongodb.DBObject.class)) {

						for (String key : ((com.mongodb.DBObject) index
								.get("key")).keySet()) {
							// The regexp is:
							// - contain the db DBcolumnName between two
							// backslashed quotes
							// - is followed at some point by a colon
							// - there is no comma between the the DBcolumnName
							// and the colon
							if (("{'name': '" + context.getCOLLECTION1() + "'}, {'_id':1, 'num': 1}")
									.matches(".*" + key + "[^,]*:.*")) {
								// We have an index, do not print error message
								needIndexWarning = false;
							} else {
								// This index is not in the query, add it into
								// the indexList
								indexList += ", " + key;
							}
						}
					}
					if ((!"".equals(indexList)) && (needIndexWarning)) {

						System.err
								.println("tMongoDBInput_2 - The query does not contain any reference an index.  ["
										+ indexList.substring(1) + " ]");

					}
				} catch (com.mongodb.MongoException e) {
					// caught an exception after issuing the getIndexInfo()
					// don't fail the whole job
					// maybe due to authorization
				}

				org.bson.Document myQuery_tMongoDBInput_2 = org.bson.Document
						.parse("{'name': '" + context.getCOLLECTION1()
								+ "'}, {'_id':1, 'num': 1}");
				com.mongodb.client.FindIterable<org.bson.Document> fi_tMongoDBInput_2 = coll_tMongoDBInput_2
						.find(myQuery_tMongoDBInput_2).noCursorTimeout(false);

				class DBObjectInputUtil_tMongoDBInput_2 {
					// Get the node value in embedded document,
					// If have no embedded document get root document node.

					public Object getValue(String parentNode,
							String currentName, org.bson.Document dbObject) {
						Object value = null;
						if (dbObject == null) {
							return null;
						}
						if (parentNode == null || "".equals(parentNode)) {
							if ("*".equals(currentName)) {
								value = dbObject;
							} else if (dbObject.get(currentName) != null) {
								value = dbObject.get(currentName);
							}
						} else {
							String objNames[] = objNames = parentNode
									.split("\\.");
							org.bson.Document currentObj = dbObject;
							for (int i = 0; i < objNames.length; i++) {
								currentObj = (org.bson.Document) currentObj
										.get(objNames[i]);
								if (currentObj == null) {
									break;
								}
							}
							if ("*".equals(currentName)) {
								value = currentObj;
							} else if (currentObj != null) {
								value = currentObj.get(currentName);
							}
						}
						return value;
					}
				}
				DBObjectInputUtil_tMongoDBInput_2 dbObjectInputUtil_tMongoDBInput_2 = new DBObjectInputUtil_tMongoDBInput_2();
				java.util.Map<String, String> pathMap_tMongoDBInput_2 = new java.util.HashMap<String, String>();
				pathMap_tMongoDBInput_2.put("id", "");

				com.mongodb.BasicDBObject orderBy_tMongoDBInput_2 = new com.mongodb.BasicDBObject();

				orderBy_tMongoDBInput_2.put("num", 1);

				fi_tMongoDBInput_2.sort(orderBy_tMongoDBInput_2);

				com.mongodb.client.MongoCursor<org.bson.Document> cursor_tMongoDBInput_2 = fi_tMongoDBInput_2
						.iterator();

				while (cursor_tMongoDBInput_2.hasNext()) {
					org.bson.Document o_tMongoDBInput_2 = cursor_tMongoDBInput_2
							.next();
					nb_line_tMongoDBInput_2++;
					Object valueObj_tMongoDBInput_2 = null;
					valueObj_tMongoDBInput_2 = dbObjectInputUtil_tMongoDBInput_2
							.getValue(pathMap_tMongoDBInput_2.get("id"), "_id",
									o_tMongoDBInput_2);
					if (valueObj_tMongoDBInput_2 != null
							&& valueObj_tMongoDBInput_2.toString().length() > 0) {
						row3.id = valueObj_tMongoDBInput_2.toString();
					} else {
						row3.id = null;
					}

					/**
					 * [tMongoDBInput_2 begin ] stop
					 */

					/**
					 * [tMongoDBInput_2 main ] start
					 */

					currentComponent = "tMongoDBInput_2";

					tos_count_tMongoDBInput_2++;

					/**
					 * [tMongoDBInput_2 main ] stop
					 */

					/**
					 * [tMongoDBInput_2 process_data_begin ] start
					 */

					currentComponent = "tMongoDBInput_2";

					/**
					 * [tMongoDBInput_2 process_data_begin ] stop
					 */

					/**
					 * [tSetGlobalVar_1 main ] start
					 */

					currentComponent = "tSetGlobalVar_1";

					// row3
					// row3

					if (execStat) {
						runStat.updateStatOnConnection("row3" + iterateId, 1, 1);
					}

					globalMap.put("COLLECTION1_ID", row3.id);
					globalMap.put(
							"FILE_PATH",
							System.getProperty("java.io.tmpdir")
									+ context.getFILE_PREFIX()
									+ context.getBATCH_DATE() + ".xlsx");
					globalMap.put(
							"FILE_PATH1",
							System.getProperty("java.io.tmpdir")
									+ context.getFILE_PREFIX()
									+ context.getBATCH_DATE() + "_1.csv");

					tos_count_tSetGlobalVar_1++;

					/**
					 * [tSetGlobalVar_1 main ] stop
					 */

					/**
					 * [tSetGlobalVar_1 process_data_begin ] start
					 */

					currentComponent = "tSetGlobalVar_1";

					/**
					 * [tSetGlobalVar_1 process_data_begin ] stop
					 */

					/**
					 * [tSetGlobalVar_1 process_data_end ] start
					 */

					currentComponent = "tSetGlobalVar_1";

					/**
					 * [tSetGlobalVar_1 process_data_end ] stop
					 */

					/**
					 * [tMongoDBInput_2 process_data_end ] start
					 */

					currentComponent = "tMongoDBInput_2";

					/**
					 * [tMongoDBInput_2 process_data_end ] stop
					 */

					/**
					 * [tMongoDBInput_2 end ] start
					 */

					currentComponent = "tMongoDBInput_2";

				}

				globalMap.put("tMongoDBInput_2_NB_LINE",
						nb_line_tMongoDBInput_2);

				ok_Hash.put("tMongoDBInput_2", true);
				end_Hash.put("tMongoDBInput_2", System.currentTimeMillis());

				/**
				 * [tMongoDBInput_2 end ] stop
				 */

				/**
				 * [tSetGlobalVar_1 end ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tSetGlobalVar_1", true);
				end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tFileDelete_1Process(globalMap);

				/**
				 * [tSetGlobalVar_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMongoDBInput_2 finally ] start
				 */

				currentComponent = "tMongoDBInput_2";

				/**
				 * [tMongoDBInput_2 finally ] stop
				 */

				/**
				 * [tSetGlobalVar_1 finally ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[0];
		static byte[] commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES.length == 0) {
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_UPDATE_ONE_MONTH_SALES) {

				try {

					int length = 0;

					this.id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMongoDBInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tSetGlobalVar_2 begin ] start
				 */

				ok_Hash.put("tSetGlobalVar_2", false);
				start_Hash.put("tSetGlobalVar_2", System.currentTimeMillis());

				currentComponent = "tSetGlobalVar_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tSetGlobalVar_2 = 0;

				class BytesLimit65535_tSetGlobalVar_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tSetGlobalVar_2().limitLog4jByte();

				/**
				 * [tSetGlobalVar_2 begin ] stop
				 */

				/**
				 * [tMongoDBInput_3 begin ] start
				 */

				ok_Hash.put("tMongoDBInput_3", false);
				start_Hash.put("tMongoDBInput_3", System.currentTimeMillis());

				currentComponent = "tMongoDBInput_3";

				int tos_count_tMongoDBInput_3 = 0;

				class BytesLimit65535_tMongoDBInput_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMongoDBInput_3().limitLog4jByte();

				int nb_line_tMongoDBInput_3 = 0;

				com.mongodb.MongoClient mongo_tMongoDBInput_3 = null;
				com.mongodb.client.MongoDatabase db_tMongoDBInput_3 = null;

				mongo_tMongoDBInput_3 = (com.mongodb.MongoClient) globalMap
						.get("mongo_tMongoDBConnection_1");
				db_tMongoDBInput_3 = (com.mongodb.client.MongoDatabase) globalMap
						.get("db_tMongoDBConnection_1");

				com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBInput_3 = db_tMongoDBInput_3
						.getCollection("collections");

				try {
					// Add warning if an index is not in the query.
					boolean needIndexWarning = true;
					String indexList = "";

					for (com.mongodb.DBObject index : coll_tMongoDBInput_3
							.listIndexes(com.mongodb.DBObject.class)) {

						for (String key : ((com.mongodb.DBObject) index
								.get("key")).keySet()) {
							// The regexp is:
							// - contain the db DBcolumnName between two
							// backslashed quotes
							// - is followed at some point by a colon
							// - there is no comma between the the DBcolumnName
							// and the colon
							if (("{'name': '" + context.getCOLLECTION2() + "'}, {'_id':1, 'num': 1}")
									.matches(".*" + key + "[^,]*:.*")) {
								// We have an index, do not print error message
								needIndexWarning = false;
							} else {
								// This index is not in the query, add it into
								// the indexList
								indexList += ", " + key;
							}
						}
					}
					if ((!"".equals(indexList)) && (needIndexWarning)) {

						System.err
								.println("tMongoDBInput_3 - The query does not contain any reference an index.  ["
										+ indexList.substring(1) + " ]");

					}
				} catch (com.mongodb.MongoException e) {
					// caught an exception after issuing the getIndexInfo()
					// don't fail the whole job
					// maybe due to authorization
				}

				org.bson.Document myQuery_tMongoDBInput_3 = org.bson.Document
						.parse("{'name': '" + context.getCOLLECTION2()
								+ "'}, {'_id':1, 'num': 1}");
				com.mongodb.client.FindIterable<org.bson.Document> fi_tMongoDBInput_3 = coll_tMongoDBInput_3
						.find(myQuery_tMongoDBInput_3).noCursorTimeout(false);

				class DBObjectInputUtil_tMongoDBInput_3 {
					// Get the node value in embedded document,
					// If have no embedded document get root document node.

					public Object getValue(String parentNode,
							String currentName, org.bson.Document dbObject) {
						Object value = null;
						if (dbObject == null) {
							return null;
						}
						if (parentNode == null || "".equals(parentNode)) {
							if ("*".equals(currentName)) {
								value = dbObject;
							} else if (dbObject.get(currentName) != null) {
								value = dbObject.get(currentName);
							}
						} else {
							String objNames[] = objNames = parentNode
									.split("\\.");
							org.bson.Document currentObj = dbObject;
							for (int i = 0; i < objNames.length; i++) {
								currentObj = (org.bson.Document) currentObj
										.get(objNames[i]);
								if (currentObj == null) {
									break;
								}
							}
							if ("*".equals(currentName)) {
								value = currentObj;
							} else if (currentObj != null) {
								value = currentObj.get(currentName);
							}
						}
						return value;
					}
				}
				DBObjectInputUtil_tMongoDBInput_3 dbObjectInputUtil_tMongoDBInput_3 = new DBObjectInputUtil_tMongoDBInput_3();
				java.util.Map<String, String> pathMap_tMongoDBInput_3 = new java.util.HashMap<String, String>();
				pathMap_tMongoDBInput_3.put("id", "");

				com.mongodb.BasicDBObject orderBy_tMongoDBInput_3 = new com.mongodb.BasicDBObject();

				orderBy_tMongoDBInput_3.put("num", 1);

				fi_tMongoDBInput_3.sort(orderBy_tMongoDBInput_3);

				com.mongodb.client.MongoCursor<org.bson.Document> cursor_tMongoDBInput_3 = fi_tMongoDBInput_3
						.iterator();

				while (cursor_tMongoDBInput_3.hasNext()) {
					org.bson.Document o_tMongoDBInput_3 = cursor_tMongoDBInput_3
							.next();
					nb_line_tMongoDBInput_3++;
					Object valueObj_tMongoDBInput_3 = null;
					valueObj_tMongoDBInput_3 = dbObjectInputUtil_tMongoDBInput_3
							.getValue(pathMap_tMongoDBInput_3.get("id"), "_id",
									o_tMongoDBInput_3);
					if (valueObj_tMongoDBInput_3 != null
							&& valueObj_tMongoDBInput_3.toString().length() > 0) {
						row4.id = valueObj_tMongoDBInput_3.toString();
					} else {
						row4.id = null;
					}

					/**
					 * [tMongoDBInput_3 begin ] stop
					 */

					/**
					 * [tMongoDBInput_3 main ] start
					 */

					currentComponent = "tMongoDBInput_3";

					tos_count_tMongoDBInput_3++;

					/**
					 * [tMongoDBInput_3 main ] stop
					 */

					/**
					 * [tMongoDBInput_3 process_data_begin ] start
					 */

					currentComponent = "tMongoDBInput_3";

					/**
					 * [tMongoDBInput_3 process_data_begin ] stop
					 */

					/**
					 * [tSetGlobalVar_2 main ] start
					 */

					currentComponent = "tSetGlobalVar_2";

					// row4
					// row4

					if (execStat) {
						runStat.updateStatOnConnection("row4" + iterateId, 1, 1);
					}

					globalMap.put("COLLECTION2_ID", row4.id);
					globalMap.put(
							"FILE_PATH2",
							System.getProperty("java.io.tmpdir")
									+ context.getFILE_PREFIX()
									+ context.getBATCH_DATE() + "_2.csv");

					tos_count_tSetGlobalVar_2++;

					/**
					 * [tSetGlobalVar_2 main ] stop
					 */

					/**
					 * [tSetGlobalVar_2 process_data_begin ] start
					 */

					currentComponent = "tSetGlobalVar_2";

					/**
					 * [tSetGlobalVar_2 process_data_begin ] stop
					 */

					/**
					 * [tSetGlobalVar_2 process_data_end ] start
					 */

					currentComponent = "tSetGlobalVar_2";

					/**
					 * [tSetGlobalVar_2 process_data_end ] stop
					 */

					/**
					 * [tMongoDBInput_3 process_data_end ] start
					 */

					currentComponent = "tMongoDBInput_3";

					/**
					 * [tMongoDBInput_3 process_data_end ] stop
					 */

					/**
					 * [tMongoDBInput_3 end ] start
					 */

					currentComponent = "tMongoDBInput_3";

				}

				globalMap.put("tMongoDBInput_3_NB_LINE",
						nb_line_tMongoDBInput_3);

				ok_Hash.put("tMongoDBInput_3", true);
				end_Hash.put("tMongoDBInput_3", System.currentTimeMillis());

				/**
				 * [tMongoDBInput_3 end ] stop
				 */

				/**
				 * [tSetGlobalVar_2 end ] start
				 */

				currentComponent = "tSetGlobalVar_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tSetGlobalVar_2", true);
				end_Hash.put("tSetGlobalVar_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tFileDelete_2Process(globalMap);

				/**
				 * [tSetGlobalVar_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMongoDBInput_3 finally ] start
				 */

				currentComponent = "tMongoDBInput_3";

				/**
				 * [tMongoDBInput_3 finally ] stop
				 */

				/**
				 * [tSetGlobalVar_2 finally ] start
				 */

				currentComponent = "tSetGlobalVar_2";

				/**
				 * [tSetGlobalVar_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class newRowStruct implements
			routines.system.IPersistableRow<newRowStruct> {
		final static byte[] commonByteArrayLock_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[0];
		static byte[] commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[0];

		public String hash;

		public String getHash() {
			return this.hash;
		}

		public String location;

		public String getLocation() {
			return this.location;
		}

		public String province;

		public String getProvince() {
			return this.province;
		}

		public String customerCode;

		public String getCustomerCode() {
			return this.customerCode;
		}

		public String customerName;

		public String getCustomerName() {
			return this.customerName;
		}

		public String customerType;

		public String getCustomerType() {
			return this.customerType;
		}

		public String productCode;

		public String getProductCode() {
			return this.productCode;
		}

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String amount;

		public String getAmount() {
			return this.amount;
		}

		public String quantity;

		public String getQuantity() {
			return this.quantity;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES.length == 0) {
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_UPDATE_ONE_MONTH_SALES) {

				try {

					int length = 0;

					this.hash = readString(dis);

					this.location = readString(dis);

					this.province = readString(dis);

					this.customerCode = readString(dis);

					this.customerName = readString(dis);

					this.customerType = readString(dis);

					this.productCode = readString(dis);

					this.productName = readString(dis);

					this.amount = readString(dis);

					this.quantity = readString(dis);

					this.date = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.hash, dos);

				// String

				writeString(this.location, dos);

				// String

				writeString(this.province, dos);

				// String

				writeString(this.customerCode, dos);

				// String

				writeString(this.customerName, dos);

				// String

				writeString(this.customerType, dos);

				// String

				writeString(this.productCode, dos);

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.amount, dos);

				// String

				writeString(this.quantity, dos);

				// String

				writeString(this.date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("hash=" + hash);
			sb.append(",location=" + location);
			sb.append(",province=" + province);
			sb.append(",customerCode=" + customerCode);
			sb.append(",customerName=" + customerName);
			sb.append(",customerType=" + customerType);
			sb.append(",productCode=" + productCode);
			sb.append(",productName=" + productName);
			sb.append(",amount=" + amount);
			sb.append(",quantity=" + quantity);
			sb.append(",date=" + date);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(newRowStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class orgRowStruct implements
			routines.system.IPersistableRow<orgRowStruct> {
		final static byte[] commonByteArrayLock_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[0];
		static byte[] commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[0];

		public String hash;

		public String getHash() {
			return this.hash;
		}

		public String location;

		public String getLocation() {
			return this.location;
		}

		public String province;

		public String getProvince() {
			return this.province;
		}

		public String customerCode;

		public String getCustomerCode() {
			return this.customerCode;
		}

		public String customerName;

		public String getCustomerName() {
			return this.customerName;
		}

		public String customerType;

		public String getCustomerType() {
			return this.customerType;
		}

		public String productCode;

		public String getProductCode() {
			return this.productCode;
		}

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String amount;

		public String getAmount() {
			return this.amount;
		}

		public String quantity;

		public String getQuantity() {
			return this.quantity;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES.length == 0) {
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_UPDATE_ONE_MONTH_SALES) {

				try {

					int length = 0;

					this.hash = readString(dis);

					this.location = readString(dis);

					this.province = readString(dis);

					this.customerCode = readString(dis);

					this.customerName = readString(dis);

					this.customerType = readString(dis);

					this.productCode = readString(dis);

					this.productName = readString(dis);

					this.amount = readString(dis);

					this.quantity = readString(dis);

					this.date = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.hash, dos);

				// String

				writeString(this.location, dos);

				// String

				writeString(this.province, dos);

				// String

				writeString(this.customerCode, dos);

				// String

				writeString(this.customerName, dos);

				// String

				writeString(this.customerType, dos);

				// String

				writeString(this.productCode, dos);

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.amount, dos);

				// String

				writeString(this.quantity, dos);

				// String

				writeString(this.date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("hash=" + hash);
			sb.append(",location=" + location);
			sb.append(",province=" + province);
			sb.append(",customerCode=" + customerCode);
			sb.append(",customerName=" + customerName);
			sb.append(",customerType=" + customerType);
			sb.append(",productCode=" + productCode);
			sb.append(",productName=" + productName);
			sb.append(",amount=" + amount);
			sb.append(",quantity=" + quantity);
			sb.append(",date=" + date);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(orgRowStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[0];
		static byte[] commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[0];

		public String hash;

		public String getHash() {
			return this.hash;
		}

		public String location;

		public String getLocation() {
			return this.location;
		}

		public String province;

		public String getProvince() {
			return this.province;
		}

		public String customerCode;

		public String getCustomerCode() {
			return this.customerCode;
		}

		public String customerName;

		public String getCustomerName() {
			return this.customerName;
		}

		public String customerType;

		public String getCustomerType() {
			return this.customerType;
		}

		public String productCode;

		public String getProductCode() {
			return this.productCode;
		}

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String amount;

		public String getAmount() {
			return this.amount;
		}

		public String quantity;

		public String getQuantity() {
			return this.quantity;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES.length == 0) {
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_UPDATE_ONE_MONTH_SALES) {

				try {

					int length = 0;

					this.hash = readString(dis);

					this.location = readString(dis);

					this.province = readString(dis);

					this.customerCode = readString(dis);

					this.customerName = readString(dis);

					this.customerType = readString(dis);

					this.productCode = readString(dis);

					this.productName = readString(dis);

					this.amount = readString(dis);

					this.quantity = readString(dis);

					this.date = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.hash, dos);

				// String

				writeString(this.location, dos);

				// String

				writeString(this.province, dos);

				// String

				writeString(this.customerCode, dos);

				// String

				writeString(this.customerName, dos);

				// String

				writeString(this.customerType, dos);

				// String

				writeString(this.productCode, dos);

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.amount, dos);

				// String

				writeString(this.quantity, dos);

				// String

				writeString(this.date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("hash=" + hash);
			sb.append(",location=" + location);
			sb.append(",province=" + province);
			sb.append(",customerCode=" + customerCode);
			sb.append(",customerName=" + customerName);
			sb.append(",customerType=" + customerType);
			sb.append(",productCode=" + productCode);
			sb.append(",productName=" + productName);
			sb.append(",amount=" + amount);
			sb.append(",quantity=" + quantity);
			sb.append(",date=" + date);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[0];
		static byte[] commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[0];

		public String hash;

		public String getHash() {
			return this.hash;
		}

		public Object fields;

		public Object getFields() {
			return this.fields;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES.length == 0) {
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_UPDATE_ONE_MONTH_SALES) {

				try {

					int length = 0;

					this.hash = readString(dis);

					this.fields = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.hash, dos);

				// Object

				dos.writeObject(this.fields);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("hash=" + hash);
			sb.append(",fields=" + String.valueOf(fields));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tMongoDBInput_1Struct implements
			routines.system.IPersistableRow<after_tMongoDBInput_1Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[0];
		static byte[] commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[0];

		public String hash;

		public String getHash() {
			return this.hash;
		}

		public Object fields;

		public Object getFields() {
			return this.fields;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES.length == 0) {
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_UPDATE_ONE_MONTH_SALES) {

				try {

					int length = 0;

					this.hash = readString(dis);

					this.fields = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.hash, dos);

				// Object

				dos.writeObject(this.fields);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("hash=" + hash);
			sb.append(",fields=" + String.valueOf(fields));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tMongoDBInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMongoDBInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tMongoDBInput_4Process(globalMap);

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				newRowStruct newRow = new newRowStruct();
				orgRowStruct orgRow = new orgRowStruct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("newRow" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				class BytesLimit65535_tFileOutputDelimited_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputDelimited_1().limitLog4jByte();

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(globalMap
						.get("FILE_PATH2").toString())).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);
				if (filetFileOutputDelimited_1.exists()) {
					throw new RuntimeException(
							"The particular file \""
									+ filetFileOutputDelimited_1
											.getAbsoluteFile()
									+ "\" already exist. If you want to overwrite the file, please uncheck the"
									+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				String[] headColutFileOutputDelimited_1 = new String[11];
				class CSVBasicSet_tFileOutputDelimited_1 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_1[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_1 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_1[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_1 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_1[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_1[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_1 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
				csvSettings_tFileOutputDelimited_1.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}
				java.io.Writer outtFileOutputDelimited_1 = null;
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new routines.system.BufferedOutput(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_1, false),
								"UTF-8"));
				java.io.StringWriter strWritertFileOutputDelimited_1 = new java.io.StringWriter();
				CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(
						strWritertFileOutputDelimited_1);
				CsvWritertFileOutputDelimited_1
						.setSeparator(csvSettings_tFileOutputDelimited_1
								.getFieldDelim());
				if (!csvSettings_tFileOutputDelimited_1
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_1.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_1.getRowDelim());
				}
				CsvWritertFileOutputDelimited_1
						.setEscapeChar(csvSettings_tFileOutputDelimited_1
								.getEscapeChar());
				CsvWritertFileOutputDelimited_1
						.setQuoteChar(csvSettings_tFileOutputDelimited_1
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_1
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_1",
						CsvWritertFileOutputDelimited_1);
				resourceMap.put("out_tFileOutputDelimited_1",
						outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("orgRow" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFileOutputDelimited_2 = 0;

				class BytesLimit65535_tFileOutputDelimited_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputDelimited_2().limitLog4jByte();

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(globalMap
						.get("FILE_PATH1").toString())).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);
				if (filetFileOutputDelimited_2.exists()) {
					throw new RuntimeException(
							"The particular file \""
									+ filetFileOutputDelimited_2
											.getAbsoluteFile()
									+ "\" already exist. If you want to overwrite the file, please uncheck the"
									+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				String[] headColutFileOutputDelimited_2 = new String[11];
				class CSVBasicSet_tFileOutputDelimited_2 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_2[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_2 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_2[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_2[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_2 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_2[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_2[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_2 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_2[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_2 = 0;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				CSVBasicSet_tFileOutputDelimited_2 csvSettings_tFileOutputDelimited_2 = new CSVBasicSet_tFileOutputDelimited_2();
				csvSettings_tFileOutputDelimited_2.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited_2.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_2.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}
				java.io.Writer outtFileOutputDelimited_2 = null;
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				outtFileOutputDelimited_2 = new routines.system.BufferedOutput(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_2, false),
								"UTF-8"));
				java.io.StringWriter strWritertFileOutputDelimited_2 = new java.io.StringWriter();
				CsvWritertFileOutputDelimited_2 = new com.talend.csv.CSVWriter(
						strWritertFileOutputDelimited_2);
				CsvWritertFileOutputDelimited_2
						.setSeparator(csvSettings_tFileOutputDelimited_2
								.getFieldDelim());
				if (!csvSettings_tFileOutputDelimited_2
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_2.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_2.getRowDelim());
				}
				CsvWritertFileOutputDelimited_2
						.setEscapeChar(csvSettings_tFileOutputDelimited_2
								.getEscapeChar());
				CsvWritertFileOutputDelimited_2
						.setQuoteChar(csvSettings_tFileOutputDelimited_2
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_2
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_2",
						CsvWritertFileOutputDelimited_2);
				resourceMap.put("out_tFileOutputDelimited_2",
						outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2",
						nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				class BytesLimit65535_tMap_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_1().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) globalMap
						.get("tHash_Lookup_row6"));

				row6Struct row6HashKey = new row6Struct();
				row6Struct row6Default = new row6Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				newRowStruct newRow_tmp = new newRowStruct();
				orgRowStruct orgRow_tmp = new orgRowStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tExtractFields_1 begin ] start
				 */

				ok_Hash.put("tExtractFields_1", false);
				start_Hash.put("tExtractFields_1", System.currentTimeMillis());

				currentComponent = "tExtractFields_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tExtractFields_1 = 0;

				class BytesLimit65535_tExtractFields_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tExtractFields_1().limitLog4jByte();
				int nb_line_tExtractFields_1 = 0;

				class tExtractFields_1Utility {
					public String UnPivot(
							java.util.List<org.bson.Document> document,
							String key, String value, String keyValue) {
						return document.stream()
								.filter(x -> keyValue.equals(x.get(key)))
								.map(x -> x.get(value).toString()).findFirst()
								.orElse(null);
					}
				}
				tExtractFields_1Utility utility_tExtractFields_1 = new tExtractFields_1Utility();

				/**
				 * [tExtractFields_1 begin ] stop
				 */

				/**
				 * [tMongoDBInput_1 begin ] start
				 */

				ok_Hash.put("tMongoDBInput_1", false);
				start_Hash.put("tMongoDBInput_1", System.currentTimeMillis());

				currentComponent = "tMongoDBInput_1";

				int tos_count_tMongoDBInput_1 = 0;

				class BytesLimit65535_tMongoDBInput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMongoDBInput_1().limitLog4jByte();

				int nb_line_tMongoDBInput_1 = 0;

				com.mongodb.MongoClient mongo_tMongoDBInput_1 = null;
				com.mongodb.client.MongoDatabase db_tMongoDBInput_1 = null;

				mongo_tMongoDBInput_1 = (com.mongodb.MongoClient) globalMap
						.get("mongo_tMongoDBConnection_1");
				db_tMongoDBInput_1 = (com.mongodb.client.MongoDatabase) globalMap
						.get("db_tMongoDBConnection_1");

				com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBInput_1 = db_tMongoDBInput_1
						.getCollection("transactions.records");

				try {
					// Add warning if an index is not in the query.
					boolean needIndexWarning = true;
					String indexList = "";

					for (com.mongodb.DBObject index : coll_tMongoDBInput_1
							.listIndexes(com.mongodb.DBObject.class)) {

						for (String key : ((com.mongodb.DBObject) index
								.get("key")).keySet()) {
							// The regexp is:
							// - contain the db DBcolumnName between two
							// backslashed quotes
							// - is followed at some point by a colon
							// - there is no comma between the the DBcolumnName
							// and the colon
							if (("{}, {'_id':1, 'num': 1}").matches(".*" + key
									+ "[^,]*:.*")) {
								// We have an index, do not print error message
								needIndexWarning = false;
							} else {
								// This index is not in the query, add it into
								// the indexList
								indexList += ", " + key;
							}
						}
					}
					if ((!"".equals(indexList)) && (needIndexWarning)) {

						System.err
								.println("tMongoDBInput_1 - The query does not contain any reference an index.  ["
										+ indexList.substring(1) + " ]");

					}
				} catch (com.mongodb.MongoException e) {
					// caught an exception after issuing the getIndexInfo()
					// don't fail the whole job
					// maybe due to authorization
				}

				java.util.List<org.bson.Document> aggregationStages = new java.util.ArrayList<org.bson.Document>();

				aggregationStages
						.add(org.bson.Document
								.parse("{ $addFields: {'_fileRef': {$arrayToObject: {$map: {input: { $objectToArray: '$file' }, in: {k: {$cond:[{ $eq:[{'$substrCP':['$$this.k',0,1]},{$literal:'$'}] }, { $substrCP:['$$this.k',1,{$strLenCP:'$$this.k'}] }, '$$this.k'] }, v:'$$this.v'} } } } } }"));

				aggregationStages
						.add(org.bson.Document
								.parse("{ $lookup: {from: 'transactions.files', localField: '_fileRef.id', foreignField: '_id', as: '_file'} }"));

				aggregationStages
						.add(org.bson.Document
								.parse("{ $addFields: {'file': {$mergeObjects: '$_file'}} }"));

				aggregationStages
						.add(org.bson.Document
								.parse("{ $addFields: {'_collectionRef': {$arrayToObject: {$map: {input: { $objectToArray: '$file.collection' }, in: {k: {$cond:[{ $eq:[{'$substrCP':['$$this.k',0,1]},{$literal:'$'}] }, { $substrCP:['$$this.k',1,{$strLenCP:'$$this.k'}] }, '$$this.k'] }, v:'$$this.v'} } } } } }"));

				aggregationStages
						.add(org.bson.Document
								.parse("{ $lookup: {from: 'collections', localField: '_collectionRef.id', foreignField: '_id', as: '_collection'} }"));

				aggregationStages
						.add(org.bson.Document
								.parse("{ $addFields: {'collection': {$mergeObjects: '$_collection'}} }"));

				aggregationStages.add(org.bson.Document
						.parse("{ $match : {'collection.name' : '"
								+ context.getCOLLECTION1() + "'} }"));

				aggregationStages
						.add(org.bson.Document
								.parse("{ $project: { '_fileRef': 0, '_file': 0, '_collectionRef': 0, '_collection': 0  } }"));

				com.mongodb.client.MongoCursor<org.bson.Document> cursor_tMongoDBInput_1 = coll_tMongoDBInput_1
						.aggregate(aggregationStages).allowDiskUse(false)
						.iterator();

				class DBObjectInputUtil_tMongoDBInput_1 {
					// Get the node value in embedded document,
					// If have no embedded document get root document node.

					public Object getValue(String parentNode,
							String currentName, org.bson.Document dbObject) {
						Object value = null;
						if (dbObject == null) {
							return null;
						}
						if (parentNode == null || "".equals(parentNode)) {
							if ("*".equals(currentName)) {
								value = dbObject;
							} else if (dbObject.get(currentName) != null) {
								value = dbObject.get(currentName);
							}
						} else {
							String objNames[] = objNames = parentNode
									.split("\\.");
							org.bson.Document currentObj = dbObject;
							for (int i = 0; i < objNames.length; i++) {
								currentObj = (org.bson.Document) currentObj
										.get(objNames[i]);
								if (currentObj == null) {
									break;
								}
							}
							if ("*".equals(currentName)) {
								value = currentObj;
							} else if (currentObj != null) {
								value = currentObj.get(currentName);
							}
						}
						return value;
					}
				}
				DBObjectInputUtil_tMongoDBInput_1 dbObjectInputUtil_tMongoDBInput_1 = new DBObjectInputUtil_tMongoDBInput_1();
				java.util.Map<String, String> pathMap_tMongoDBInput_1 = new java.util.HashMap<String, String>();
				pathMap_tMongoDBInput_1.put("hash", "file");
				pathMap_tMongoDBInput_1.put("fields", "");

				while (cursor_tMongoDBInput_1.hasNext()) {
					org.bson.Document o_tMongoDBInput_1 = cursor_tMongoDBInput_1
							.next();
					nb_line_tMongoDBInput_1++;
					Object valueObj_tMongoDBInput_1 = null;
					valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1
							.getValue(pathMap_tMongoDBInput_1.get("hash"),
									"hash", o_tMongoDBInput_1);
					if (valueObj_tMongoDBInput_1 != null
							&& valueObj_tMongoDBInput_1.toString().length() > 0) {
						row1.hash = valueObj_tMongoDBInput_1.toString();
					} else {
						row1.hash = null;
					}
					valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1
							.getValue(pathMap_tMongoDBInput_1.get("fields"),
									"fields", o_tMongoDBInput_1);
					row1.fields = valueObj_tMongoDBInput_1;

					/**
					 * [tMongoDBInput_1 begin ] stop
					 */

					/**
					 * [tMongoDBInput_1 main ] start
					 */

					currentComponent = "tMongoDBInput_1";

					tos_count_tMongoDBInput_1++;

					/**
					 * [tMongoDBInput_1 main ] stop
					 */

					/**
					 * [tMongoDBInput_1 process_data_begin ] start
					 */

					currentComponent = "tMongoDBInput_1";

					/**
					 * [tMongoDBInput_1 process_data_begin ] stop
					 */

					/**
					 * [tExtractFields_1 main ] start
					 */

					currentComponent = "tExtractFields_1";

					// row1
					// row1

					if (execStat) {
						runStat.updateStatOnConnection("row1" + iterateId, 1, 1);
					}

					List<org.bson.Document> doc_tExtractFields_1 = (List<org.bson.Document>) row1.fields;
					row2.hash = row1.hash;
					row2.location = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value", "location");
					row2.province = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value", "province");
					row2.customerCode = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value",
							"customerCode");
					row2.customerName = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value",
							"customerName");
					row2.customerType = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value",
							"customerType");
					row2.productCode = utility_tExtractFields_1
							.UnPivot(doc_tExtractFields_1, "tag", "value",
									"productCode");
					row2.productName = utility_tExtractFields_1
							.UnPivot(doc_tExtractFields_1, "tag", "value",
									"productName");
					row2.amount = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value", "amount");
					row2.quantity = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value", "quantity");
					row2.date = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value", "date");
					nb_line_tExtractFields_1++;

					tos_count_tExtractFields_1++;

					/**
					 * [tExtractFields_1 main ] stop
					 */

					/**
					 * [tExtractFields_1 process_data_begin ] start
					 */

					currentComponent = "tExtractFields_1";

					/**
					 * [tExtractFields_1 process_data_begin ] stop
					 */
					// Start of branch "row2"
					if (row2 != null) {

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row6"
						// /////////////////////////////////////////////

						boolean forceLooprow6 = false;

						row6Struct row6ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row6HashKey.hash = row2.hash;

							row6HashKey.hashCodeDirty = true;

							tHash_Lookup_row6.lookup(row6HashKey);

							if (!tHash_Lookup_row6.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_1 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row6 != null
								&& tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6' and it contains more one result from keys :  row6.hash = '"
							// + row6HashKey.hash + "'");
						} // G 071

						row6Struct row6 = null;

						row6Struct fromLookup_row6 = null;
						row6 = row6Default;

						if (tHash_Lookup_row6 != null
								&& tHash_Lookup_row6.hasNext()) { // G 099

							fromLookup_row6 = tHash_Lookup_row6.next();

						} // G 099

						if (fromLookup_row6 != null) {
							row6 = fromLookup_row6;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							orgRow = null;
							newRow = null;

							if (!rejectedInnerJoin_tMap_1) {

								// # Output table : 'orgRow'
								orgRow_tmp.hash = row6.hash;
								orgRow_tmp.location = row6.location;
								orgRow_tmp.province = row6.province;
								orgRow_tmp.customerCode = row6.customerCode;
								orgRow_tmp.customerName = row6.customerName;
								orgRow_tmp.customerType = row6.customerType;
								orgRow_tmp.productCode = row6.productCode;
								orgRow_tmp.productName = row6.productName;
								orgRow_tmp.amount = row6.amount;
								orgRow_tmp.quantity = row6.quantity;
								orgRow_tmp.date = row6.date;
								orgRow = orgRow_tmp;
							} // closing inner join bracket (1)
								// ###### START REJECTS #####

							// # Output reject table : 'newRow'
							// # Filter conditions
							if (rejectedInnerJoin_tMap_1) {
								newRow_tmp.hash = row2.hash;
								newRow_tmp.location = row2.location;
								newRow_tmp.province = row2.province;
								newRow_tmp.customerCode = row2.customerCode;
								newRow_tmp.customerName = row2.customerName;
								newRow_tmp.customerType = row2.customerType;
								newRow_tmp.productCode = row2.productCode;
								newRow_tmp.productName = row2.productName;
								newRow_tmp.amount = row2.amount;
								newRow_tmp.quantity = row2.quantity;
								newRow_tmp.date = row2.date;
								newRow = newRow_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
						// Start of branch "newRow"
						if (newRow != null) {

							/**
							 * [tFileOutputDelimited_1 main ] start
							 */

							currentComponent = "tFileOutputDelimited_1";

							// newRow
							// newRow

							if (execStat) {
								runStat.updateStatOnConnection("newRow"
										+ iterateId, 1, 1);
							}

							String[] rowtFileOutputDelimited_1 = new String[11];
							rowtFileOutputDelimited_1[0] = newRow.hash == null ? null
									: newRow.hash;
							rowtFileOutputDelimited_1[1] = newRow.location == null ? null
									: newRow.location;
							rowtFileOutputDelimited_1[2] = newRow.province == null ? null
									: newRow.province;
							rowtFileOutputDelimited_1[3] = newRow.customerCode == null ? null
									: newRow.customerCode;
							rowtFileOutputDelimited_1[4] = newRow.customerName == null ? null
									: newRow.customerName;
							rowtFileOutputDelimited_1[5] = newRow.customerType == null ? null
									: newRow.customerType;
							rowtFileOutputDelimited_1[6] = newRow.productCode == null ? null
									: newRow.productCode;
							rowtFileOutputDelimited_1[7] = newRow.productName == null ? null
									: newRow.productName;
							rowtFileOutputDelimited_1[8] = newRow.amount == null ? null
									: newRow.amount;
							rowtFileOutputDelimited_1[9] = newRow.quantity == null ? null
									: newRow.quantity;
							rowtFileOutputDelimited_1[10] = newRow.date == null ? null
									: newRow.date;
							nb_line_tFileOutputDelimited_1++;
							resourceMap.put("nb_line_tFileOutputDelimited_1",
									nb_line_tFileOutputDelimited_1);
							CsvWritertFileOutputDelimited_1
									.writeNext(rowtFileOutputDelimited_1);
							outtFileOutputDelimited_1
									.write(strWritertFileOutputDelimited_1
											.getBuffer().toString());
							strWritertFileOutputDelimited_1.getBuffer().delete(
									0,
									strWritertFileOutputDelimited_1.getBuffer()
											.length());

							tos_count_tFileOutputDelimited_1++;

							/**
							 * [tFileOutputDelimited_1 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_1 process_data_begin ]
							 * start
							 */

							currentComponent = "tFileOutputDelimited_1";

							/**
							 * [tFileOutputDelimited_1 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_1 process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited_1";

							/**
							 * [tFileOutputDelimited_1 process_data_end ] stop
							 */

						} // End of branch "newRow"

						// Start of branch "orgRow"
						if (orgRow != null) {

							/**
							 * [tFileOutputDelimited_2 main ] start
							 */

							currentComponent = "tFileOutputDelimited_2";

							// orgRow
							// orgRow

							if (execStat) {
								runStat.updateStatOnConnection("orgRow"
										+ iterateId, 1, 1);
							}

							String[] rowtFileOutputDelimited_2 = new String[11];
							rowtFileOutputDelimited_2[0] = orgRow.hash == null ? null
									: orgRow.hash;
							rowtFileOutputDelimited_2[1] = orgRow.location == null ? null
									: orgRow.location;
							rowtFileOutputDelimited_2[2] = orgRow.province == null ? null
									: orgRow.province;
							rowtFileOutputDelimited_2[3] = orgRow.customerCode == null ? null
									: orgRow.customerCode;
							rowtFileOutputDelimited_2[4] = orgRow.customerName == null ? null
									: orgRow.customerName;
							rowtFileOutputDelimited_2[5] = orgRow.customerType == null ? null
									: orgRow.customerType;
							rowtFileOutputDelimited_2[6] = orgRow.productCode == null ? null
									: orgRow.productCode;
							rowtFileOutputDelimited_2[7] = orgRow.productName == null ? null
									: orgRow.productName;
							rowtFileOutputDelimited_2[8] = orgRow.amount == null ? null
									: orgRow.amount;
							rowtFileOutputDelimited_2[9] = orgRow.quantity == null ? null
									: orgRow.quantity;
							rowtFileOutputDelimited_2[10] = orgRow.date == null ? null
									: orgRow.date;
							nb_line_tFileOutputDelimited_2++;
							resourceMap.put("nb_line_tFileOutputDelimited_2",
									nb_line_tFileOutputDelimited_2);
							CsvWritertFileOutputDelimited_2
									.writeNext(rowtFileOutputDelimited_2);
							outtFileOutputDelimited_2
									.write(strWritertFileOutputDelimited_2
											.getBuffer().toString());
							strWritertFileOutputDelimited_2.getBuffer().delete(
									0,
									strWritertFileOutputDelimited_2.getBuffer()
											.length());

							tos_count_tFileOutputDelimited_2++;

							/**
							 * [tFileOutputDelimited_2 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_2 process_data_begin ]
							 * start
							 */

							currentComponent = "tFileOutputDelimited_2";

							/**
							 * [tFileOutputDelimited_2 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_2 process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited_2";

							/**
							 * [tFileOutputDelimited_2 process_data_end ] stop
							 */

						} // End of branch "orgRow"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

					} // End of branch "row2"

					/**
					 * [tExtractFields_1 process_data_end ] start
					 */

					currentComponent = "tExtractFields_1";

					/**
					 * [tExtractFields_1 process_data_end ] stop
					 */

					/**
					 * [tMongoDBInput_1 process_data_end ] start
					 */

					currentComponent = "tMongoDBInput_1";

					/**
					 * [tMongoDBInput_1 process_data_end ] stop
					 */

					/**
					 * [tMongoDBInput_1 end ] start
					 */

					currentComponent = "tMongoDBInput_1";

				}

				globalMap.put("tMongoDBInput_1_NB_LINE",
						nb_line_tMongoDBInput_1);

				ok_Hash.put("tMongoDBInput_1", true);
				end_Hash.put("tMongoDBInput_1", System.currentTimeMillis());

				/**
				 * [tMongoDBInput_1 end ] stop
				 */

				/**
				 * [tExtractFields_1 end ] start
				 */

				currentComponent = "tExtractFields_1";

				globalMap.put("tExtractFields_1_NB_LINE",
						nb_line_tExtractFields_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tExtractFields_1", true);
				end_Hash.put("tExtractFields_1", System.currentTimeMillis());

				/**
				 * [tExtractFields_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row6 != null) {
					tHash_Lookup_row6.endGet();
				}
				globalMap.remove("tHash_Lookup_row6");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (CsvWritertFileOutputDelimited_1 != null) {
					CsvWritertFileOutputDelimited_1.close();
				}

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE",
						nb_line_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("newRow" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (CsvWritertFileOutputDelimited_2 != null) {
					CsvWritertFileOutputDelimited_2.close();
				}

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE",
						nb_line_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("orgRow" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tMongoDBInput_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row6");

			try {

				/**
				 * [tMongoDBInput_1 finally ] start
				 */

				currentComponent = "tMongoDBInput_1";

				/**
				 * [tMongoDBInput_1 finally ] stop
				 */

				/**
				 * [tExtractFields_1 finally ] start
				 */

				currentComponent = "tExtractFields_1";

				/**
				 * [tExtractFields_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_1");

					if (CsvWritertFileOutputDelimited_1 != null) {
						CsvWritertFileOutputDelimited_1.close();
					}

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_2");

					if (CsvWritertFileOutputDelimited_2 != null) {
						CsvWritertFileOutputDelimited_2.close();
					}

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[0];
		static byte[] commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String hash;

		public String getHash() {
			return this.hash;
		}

		public String location;

		public String getLocation() {
			return this.location;
		}

		public String province;

		public String getProvince() {
			return this.province;
		}

		public String customerCode;

		public String getCustomerCode() {
			return this.customerCode;
		}

		public String customerName;

		public String getCustomerName() {
			return this.customerName;
		}

		public String customerType;

		public String getCustomerType() {
			return this.customerType;
		}

		public String productCode;

		public String getProductCode() {
			return this.productCode;
		}

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String amount;

		public String getAmount() {
			return this.amount;
		}

		public String quantity;

		public String getQuantity() {
			return this.quantity;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.hash == null) ? 0 : this.hash.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.hash == null) {
				if (other.hash != null)
					return false;

			} else if (!this.hash.equals(other.hash))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.hash = this.hash;
			other.location = this.location;
			other.province = this.province;
			other.customerCode = this.customerCode;
			other.customerName = this.customerName;
			other.customerType = this.customerType;
			other.productCode = this.productCode;
			other.productName = this.productName;
			other.amount = this.amount;
			other.quantity = this.quantity;
			other.date = this.date;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.hash = this.hash;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES.length == 0) {
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_UPDATE_ONE_MONTH_SALES) {

				try {

					int length = 0;

					this.hash = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.hash, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.location = readString(dis, ois);

				this.province = readString(dis, ois);

				this.customerCode = readString(dis, ois);

				this.customerName = readString(dis, ois);

				this.customerType = readString(dis, ois);

				this.productCode = readString(dis, ois);

				this.productName = readString(dis, ois);

				this.amount = readString(dis, ois);

				this.quantity = readString(dis, ois);

				this.date = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.location, dos, oos);

				writeString(this.province, dos, oos);

				writeString(this.customerCode, dos, oos);

				writeString(this.customerName, dos, oos);

				writeString(this.customerType, dos, oos);

				writeString(this.productCode, dos, oos);

				writeString(this.productName, dos, oos);

				writeString(this.amount, dos, oos);

				writeString(this.quantity, dos, oos);

				writeString(this.date, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("hash=" + hash);
			sb.append(",location=" + location);
			sb.append(",province=" + province);
			sb.append(",customerCode=" + customerCode);
			sb.append(",customerName=" + customerName);
			sb.append(",customerType=" + customerType);
			sb.append(",productCode=" + productCode);
			sb.append(",productName=" + productName);
			sb.append(",amount=" + amount);
			sb.append(",quantity=" + quantity);
			sb.append(",date=" + date);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.hash, other.hash);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[0];
		static byte[] commonByteArray_DEEPSEA_UPDATE_ONE_MONTH_SALES = new byte[0];

		public Object fields;

		public Object getFields() {
			return this.fields;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_UPDATE_ONE_MONTH_SALES) {

				try {

					int length = 0;

					this.fields = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.fields);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("fields=" + String.valueOf(fields));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMongoDBInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				row6Struct row6 = new row6Struct();

				/**
				 * [tAdvancedHash_row6 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row6", false);
				start_Hash
						.put("tAdvancedHash_row6", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row6 = 0;

				class BytesLimit65535_tAdvancedHash_row6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row6().limitLog4jByte();

				// connection name:row6
				// source node:tExtractFields_2 - inputs:(row5)
				// outputs:(row6,row6) | target node:tAdvancedHash_row6 -
				// inputs:(row6) outputs:()
				// linked node: tMap_1 - inputs:(row2,row6)
				// outputs:(newRow,orgRow)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row6Struct> getLookup(matchingModeEnum_row6);

				globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);

				/**
				 * [tAdvancedHash_row6 begin ] stop
				 */

				/**
				 * [tExtractFields_2 begin ] start
				 */

				ok_Hash.put("tExtractFields_2", false);
				start_Hash.put("tExtractFields_2", System.currentTimeMillis());

				currentComponent = "tExtractFields_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tExtractFields_2 = 0;

				class BytesLimit65535_tExtractFields_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tExtractFields_2().limitLog4jByte();
				int nb_line_tExtractFields_2 = 0;

				class tExtractFields_2Utility {
					public String UnPivot(
							java.util.List<org.bson.Document> document,
							String key, String value, String keyValue) {
						return document.stream()
								.filter(x -> keyValue.equals(x.get(key)))
								.map(x -> x.get(value).toString()).findFirst()
								.orElse(null);
					}
				}
				tExtractFields_2Utility utility_tExtractFields_2 = new tExtractFields_2Utility();

				/**
				 * [tExtractFields_2 begin ] stop
				 */

				/**
				 * [tMongoDBInput_4 begin ] start
				 */

				ok_Hash.put("tMongoDBInput_4", false);
				start_Hash.put("tMongoDBInput_4", System.currentTimeMillis());

				currentComponent = "tMongoDBInput_4";

				int tos_count_tMongoDBInput_4 = 0;

				class BytesLimit65535_tMongoDBInput_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMongoDBInput_4().limitLog4jByte();

				int nb_line_tMongoDBInput_4 = 0;

				com.mongodb.MongoClient mongo_tMongoDBInput_4 = null;
				com.mongodb.client.MongoDatabase db_tMongoDBInput_4 = null;

				mongo_tMongoDBInput_4 = (com.mongodb.MongoClient) globalMap
						.get("mongo_tMongoDBConnection_1");
				db_tMongoDBInput_4 = (com.mongodb.client.MongoDatabase) globalMap
						.get("db_tMongoDBConnection_1");

				com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBInput_4 = db_tMongoDBInput_4
						.getCollection("transactions.records");

				try {
					// Add warning if an index is not in the query.
					boolean needIndexWarning = true;
					String indexList = "";

					for (com.mongodb.DBObject index : coll_tMongoDBInput_4
							.listIndexes(com.mongodb.DBObject.class)) {

						for (String key : ((com.mongodb.DBObject) index
								.get("key")).keySet()) {
							// The regexp is:
							// - contain the db DBcolumnName between two
							// backslashed quotes
							// - is followed at some point by a colon
							// - there is no comma between the the DBcolumnName
							// and the colon
							if (("{}, {'_id':1, 'num': 1}").matches(".*" + key
									+ "[^,]*:.*")) {
								// We have an index, do not print error message
								needIndexWarning = false;
							} else {
								// This index is not in the query, add it into
								// the indexList
								indexList += ", " + key;
							}
						}
					}
					if ((!"".equals(indexList)) && (needIndexWarning)) {

						System.err
								.println("tMongoDBInput_4 - The query does not contain any reference an index.  ["
										+ indexList.substring(1) + " ]");

					}
				} catch (com.mongodb.MongoException e) {
					// caught an exception after issuing the getIndexInfo()
					// don't fail the whole job
					// maybe due to authorization
				}

				java.util.List<org.bson.Document> aggregationStages = new java.util.ArrayList<org.bson.Document>();

				aggregationStages
						.add(org.bson.Document
								.parse("{ $addFields: {'_fileRef': {$arrayToObject: {$map: {input: { $objectToArray: '$file' }, in: {k: {$cond:[{ $eq:[{'$substrCP':['$$this.k',0,1]},{$literal:'$'}] }, { $substrCP:['$$this.k',1,{$strLenCP:'$$this.k'}] }, '$$this.k'] }, v:'$$this.v'} } } } } }"));

				aggregationStages
						.add(org.bson.Document
								.parse("{ $lookup: {from: 'transactions.files', localField: '_fileRef.id', foreignField: '_id', as: '_file'} }"));

				aggregationStages
						.add(org.bson.Document
								.parse("{ $addFields: {'file': {$mergeObjects: '$_file'}} }"));

				aggregationStages
						.add(org.bson.Document
								.parse("{ $addFields: {'_collectionRef': {$arrayToObject: {$map: {input: { $objectToArray: '$file.collection' }, in: {k: {$cond:[{ $eq:[{'$substrCP':['$$this.k',0,1]},{$literal:'$'}] }, { $substrCP:['$$this.k',1,{$strLenCP:'$$this.k'}] }, '$$this.k'] }, v:'$$this.v'} } } } } }"));

				aggregationStages
						.add(org.bson.Document
								.parse("{ $lookup: {from: 'collections', localField: '_collectionRef.id', foreignField: '_id', as: '_collection'} }"));

				aggregationStages
						.add(org.bson.Document
								.parse("{ $addFields: {'collection': {$mergeObjects: '$_collection'}} }"));

				aggregationStages.add(org.bson.Document
						.parse("{ $match : {'collection.name' : '"
								+ context.getCOLLECTION2() + "'} }"));

				aggregationStages
						.add(org.bson.Document
								.parse("{ $project: { '_fileRef': 0, '_file': 0, '_collectionRef': 0, '_collection': 0  } }"));

				com.mongodb.client.MongoCursor<org.bson.Document> cursor_tMongoDBInput_4 = coll_tMongoDBInput_4
						.aggregate(aggregationStages).allowDiskUse(false)
						.iterator();

				class DBObjectInputUtil_tMongoDBInput_4 {
					// Get the node value in embedded document,
					// If have no embedded document get root document node.

					public Object getValue(String parentNode,
							String currentName, org.bson.Document dbObject) {
						Object value = null;
						if (dbObject == null) {
							return null;
						}
						if (parentNode == null || "".equals(parentNode)) {
							if ("*".equals(currentName)) {
								value = dbObject;
							} else if (dbObject.get(currentName) != null) {
								value = dbObject.get(currentName);
							}
						} else {
							String objNames[] = objNames = parentNode
									.split("\\.");
							org.bson.Document currentObj = dbObject;
							for (int i = 0; i < objNames.length; i++) {
								currentObj = (org.bson.Document) currentObj
										.get(objNames[i]);
								if (currentObj == null) {
									break;
								}
							}
							if ("*".equals(currentName)) {
								value = currentObj;
							} else if (currentObj != null) {
								value = currentObj.get(currentName);
							}
						}
						return value;
					}
				}
				DBObjectInputUtil_tMongoDBInput_4 dbObjectInputUtil_tMongoDBInput_4 = new DBObjectInputUtil_tMongoDBInput_4();
				java.util.Map<String, String> pathMap_tMongoDBInput_4 = new java.util.HashMap<String, String>();
				pathMap_tMongoDBInput_4.put("fields", "");

				while (cursor_tMongoDBInput_4.hasNext()) {
					org.bson.Document o_tMongoDBInput_4 = cursor_tMongoDBInput_4
							.next();
					nb_line_tMongoDBInput_4++;
					Object valueObj_tMongoDBInput_4 = null;
					valueObj_tMongoDBInput_4 = dbObjectInputUtil_tMongoDBInput_4
							.getValue(pathMap_tMongoDBInput_4.get("fields"),
									"fields", o_tMongoDBInput_4);
					row5.fields = valueObj_tMongoDBInput_4;

					/**
					 * [tMongoDBInput_4 begin ] stop
					 */

					/**
					 * [tMongoDBInput_4 main ] start
					 */

					currentComponent = "tMongoDBInput_4";

					tos_count_tMongoDBInput_4++;

					/**
					 * [tMongoDBInput_4 main ] stop
					 */

					/**
					 * [tMongoDBInput_4 process_data_begin ] start
					 */

					currentComponent = "tMongoDBInput_4";

					/**
					 * [tMongoDBInput_4 process_data_begin ] stop
					 */

					/**
					 * [tExtractFields_2 main ] start
					 */

					currentComponent = "tExtractFields_2";

					// row5
					// row5

					if (execStat) {
						runStat.updateStatOnConnection("row5" + iterateId, 1, 1);
					}

					List<org.bson.Document> doc_tExtractFields_2 = (List<org.bson.Document>) row5.fields;
					row6.hash = utility_tExtractFields_2.UnPivot(
							doc_tExtractFields_2, "tag", "value", "hash");
					row6.location = utility_tExtractFields_2.UnPivot(
							doc_tExtractFields_2, "tag", "value", "location");
					row6.province = utility_tExtractFields_2.UnPivot(
							doc_tExtractFields_2, "tag", "value", "province");
					row6.customerCode = utility_tExtractFields_2.UnPivot(
							doc_tExtractFields_2, "tag", "value",
							"customerCode");
					row6.customerName = utility_tExtractFields_2.UnPivot(
							doc_tExtractFields_2, "tag", "value",
							"customerName");
					row6.customerType = utility_tExtractFields_2.UnPivot(
							doc_tExtractFields_2, "tag", "value",
							"customerType");
					row6.productCode = utility_tExtractFields_2
							.UnPivot(doc_tExtractFields_2, "tag", "value",
									"productCode");
					row6.productName = utility_tExtractFields_2
							.UnPivot(doc_tExtractFields_2, "tag", "value",
									"productName");
					row6.amount = utility_tExtractFields_2.UnPivot(
							doc_tExtractFields_2, "tag", "value", "amount");
					row6.quantity = utility_tExtractFields_2.UnPivot(
							doc_tExtractFields_2, "tag", "value", "quantity");
					row6.date = utility_tExtractFields_2.UnPivot(
							doc_tExtractFields_2, "tag", "value", "date");
					nb_line_tExtractFields_2++;

					tos_count_tExtractFields_2++;

					/**
					 * [tExtractFields_2 main ] stop
					 */

					/**
					 * [tExtractFields_2 process_data_begin ] start
					 */

					currentComponent = "tExtractFields_2";

					/**
					 * [tExtractFields_2 process_data_begin ] stop
					 */
					// Start of branch "row6"
					if (row6 != null) {

						/**
						 * [tAdvancedHash_row6 main ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						// row6
						// row6

						if (execStat) {
							runStat.updateStatOnConnection("row6" + iterateId,
									1, 1);
						}

						row6Struct row6_HashRow = new row6Struct();

						row6_HashRow.hash = row6.hash;

						row6_HashRow.location = row6.location;

						row6_HashRow.province = row6.province;

						row6_HashRow.customerCode = row6.customerCode;

						row6_HashRow.customerName = row6.customerName;

						row6_HashRow.customerType = row6.customerType;

						row6_HashRow.productCode = row6.productCode;

						row6_HashRow.productName = row6.productName;

						row6_HashRow.amount = row6.amount;

						row6_HashRow.quantity = row6.quantity;

						row6_HashRow.date = row6.date;

						tHash_Lookup_row6.put(row6_HashRow);

						tos_count_tAdvancedHash_row6++;

						/**
						 * [tAdvancedHash_row6 main ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_end ] stop
						 */

					} // End of branch "row6"

					/**
					 * [tExtractFields_2 process_data_end ] start
					 */

					currentComponent = "tExtractFields_2";

					/**
					 * [tExtractFields_2 process_data_end ] stop
					 */

					/**
					 * [tMongoDBInput_4 process_data_end ] start
					 */

					currentComponent = "tMongoDBInput_4";

					/**
					 * [tMongoDBInput_4 process_data_end ] stop
					 */

					/**
					 * [tMongoDBInput_4 end ] start
					 */

					currentComponent = "tMongoDBInput_4";

				}

				globalMap.put("tMongoDBInput_4_NB_LINE",
						nb_line_tMongoDBInput_4);

				ok_Hash.put("tMongoDBInput_4", true);
				end_Hash.put("tMongoDBInput_4", System.currentTimeMillis());

				/**
				 * [tMongoDBInput_4 end ] stop
				 */

				/**
				 * [tExtractFields_2 end ] start
				 */

				currentComponent = "tExtractFields_2";

				globalMap.put("tExtractFields_2_NB_LINE",
						nb_line_tExtractFields_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tExtractFields_2", true);
				end_Hash.put("tExtractFields_2", System.currentTimeMillis());

				/**
				 * [tExtractFields_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row6 end ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				tHash_Lookup_row6.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row6", true);
				end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMongoDBInput_4 finally ] start
				 */

				currentComponent = "tMongoDBInput_4";

				/**
				 * [tMongoDBInput_4 finally ] stop
				 */

				/**
				 * [tExtractFields_2 finally ] start
				 */

				currentComponent = "tExtractFields_2";

				/**
				 * [tExtractFields_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row6 finally ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				/**
				 * [tAdvancedHash_row6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBInput_4_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				class BytesLimit65535_tPostjob_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tPostjob_1().limitLog4jByte();

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tMongoDBClose_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				class BytesLimit65535_tPrejob_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tPrejob_1().limitLog4jByte();

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tMongoDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final UPDATE_ONE_MONTH_SALES UPDATE_ONE_MONTH_SALESClass = new UPDATE_ONE_MONTH_SALES();

		int exitCode = UPDATE_ONE_MONTH_SALESClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = UPDATE_ONE_MONTH_SALES.class
					.getClassLoader().getResourceAsStream(
							"deepsea/update_one_month_sales_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = UPDATE_ONE_MONTH_SALES.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			context.setContextType("COUNTRY", "id_String");

			context.COUNTRY = (String) context.getProperty("COUNTRY");
			context.setContextType("BATCH_DATE", "id_String");

			context.BATCH_DATE = (String) context.getProperty("BATCH_DATE");
			context.setContextType("COLLECTION1", "id_String");

			context.COLLECTION1 = (String) context.getProperty("COLLECTION1");
			context.setContextType("COLLECTION2", "id_String");

			context.COLLECTION2 = (String) context.getProperty("COLLECTION2");
			context.setContextType("FILE_PREFIX", "id_String");

			context.FILE_PREFIX = (String) context.getProperty("FILE_PREFIX");
			context.setContextType("MONGODB_HOSTNAME", "id_String");

			context.MONGODB_HOSTNAME = (String) context
					.getProperty("MONGODB_HOSTNAME");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("COUNTRY")) {
				context.COUNTRY = (String) parentContextMap.get("COUNTRY");
			}
			if (parentContextMap.containsKey("BATCH_DATE")) {
				context.BATCH_DATE = (String) parentContextMap
						.get("BATCH_DATE");
			}
			if (parentContextMap.containsKey("COLLECTION1")) {
				context.COLLECTION1 = (String) parentContextMap
						.get("COLLECTION1");
			}
			if (parentContextMap.containsKey("COLLECTION2")) {
				context.COLLECTION2 = (String) parentContextMap
						.get("COLLECTION2");
			}
			if (parentContextMap.containsKey("FILE_PREFIX")) {
				context.FILE_PREFIX = (String) parentContextMap
						.get("FILE_PREFIX");
			}
			if (parentContextMap.containsKey("MONGODB_HOSTNAME")) {
				context.MONGODB_HOSTNAME = (String) parentContextMap
						.get("MONGODB_HOSTNAME");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tMongoDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tMongoDBInput_1) {
			globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", -1);

			e_tMongoDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : UPDATE_ONE_MONTH_SALES");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 269811 characters generated by Talend Open Studio for Big Data on the 2
 * October, 2018 6:26:33 PM SGT
 ************************************************************************************************/
