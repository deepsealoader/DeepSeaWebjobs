// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package deepsea.generate_geography_code_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: GENERATE_GEOGRAPHY_CODE Purpose: <br>
 * Description:  <br>
 * @author romualdrousseau@gmail.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class GENERATE_GEOGRAPHY_CODE implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private Object[] multiThreadLockWrite = new Object[0];

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (COLLECTION != null) {

				this.setProperty("COLLECTION", COLLECTION.toString());

			}

			if (SOURCE != null) {

				this.setProperty("SOURCE", SOURCE.toString());

			}

			if (TABLE != null) {

				this.setProperty("TABLE", TABLE.toString());

			}

			if (COUNTRY != null) {

				this.setProperty("COUNTRY", COUNTRY.toString());

			}

			if (DEEPSEA_AUTH_TOKEN != null) {

				this.setProperty("DEEPSEA_AUTH_TOKEN",
						DEEPSEA_AUTH_TOKEN.toString());

			}

			if (DEEPSEA_HOSTNAME != null) {

				this.setProperty("DEEPSEA_HOSTNAME",
						DEEPSEA_HOSTNAME.toString());

			}

			if (MONGODB_HOSTNAME != null) {

				this.setProperty("MONGODB_HOSTNAME",
						MONGODB_HOSTNAME.toString());

			}

			if (POSTGRES_HOSTNAME != null) {

				this.setProperty("POSTGRES_HOSTNAME",
						POSTGRES_HOSTNAME.toString());

			}

			if (WEBJOB_NAME != null) {

				this.setProperty("WEBJOB_NAME", WEBJOB_NAME.toString());

			}

		}

		public String COLLECTION;

		public String getCOLLECTION() {
			return this.COLLECTION;
		}

		public String SOURCE;

		public String getSOURCE() {
			return this.SOURCE;
		}

		public String TABLE;

		public String getTABLE() {
			return this.TABLE;
		}

		public String COUNTRY;

		public String getCOUNTRY() {
			return this.COUNTRY;
		}

		public String DEEPSEA_AUTH_TOKEN;

		public String getDEEPSEA_AUTH_TOKEN() {
			return this.DEEPSEA_AUTH_TOKEN;
		}

		public String DEEPSEA_HOSTNAME;

		public String getDEEPSEA_HOSTNAME() {
			return this.DEEPSEA_HOSTNAME;
		}

		public String MONGODB_HOSTNAME;

		public String getMONGODB_HOSTNAME() {
			return this.MONGODB_HOSTNAME;
		}

		public String POSTGRES_HOSTNAME;

		public String getPOSTGRES_HOSTNAME() {
			return this.POSTGRES_HOSTNAME;
		}

		public String WEBJOB_NAME;

		public String getWEBJOB_NAME() {
			return this.WEBJOB_NAME;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "GENERATE_GEOGRAPHY_CODE";
	private final String projectName = "DEEPSEA";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	MetterCatcherUtils tFlowMeterCatcher_1 = new MetterCatcherUtils(
			"_ojF0oNA-Eei2putC5JowCA", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					GENERATE_GEOGRAPHY_CODE.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(GENERATE_GEOGRAPHY_CODE.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFlowMeterCatcher_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowMeter_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractFields_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowMeter_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBClose_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSetGlobalVar_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tSetGlobalVar_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSetGlobalVar_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBInput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSetGlobalVar_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBInput_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSetGlobalVar_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBOutput_1_In_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tMongoDBOutput_1_Out_error(exception, errorComponent, globalMap);

	}

	public void tMongoDBOutput_1_Out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowMeterCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBClose_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSetGlobalVar_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBOutput_1_Out_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];
		static byte[] commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public Integer reference;

		public Integer getReference() {
			return this.reference;
		}

		public String thresholds;

		public String getThresholds() {
			return this.thresholds;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length == 0) {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.label = readString(dis);

					this.count = readInteger(dis);

					this.reference = readInteger(dis);

					this.thresholds = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.label, dos);

				// Integer

				writeInteger(this.count, dos);

				// Integer

				writeInteger(this.reference, dos);

				// String

				writeString(this.thresholds, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",label=" + label);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",reference=" + String.valueOf(reference));
			sb.append(",thresholds=" + thresholds);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFlowMeterCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_1 = 0;

				class BytesLimit65535_tLogRow_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tLogRow_1().limitLog4jByte();

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tFlowMeterCatcher_1 begin ] start
				 */

				ok_Hash.put("tFlowMeterCatcher_1", false);
				start_Hash.put("tFlowMeterCatcher_1",
						System.currentTimeMillis());

				currentComponent = "tFlowMeterCatcher_1";

				int tos_count_tFlowMeterCatcher_1 = 0;

				class BytesLimit65535_tFlowMeterCatcher_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowMeterCatcher_1().limitLog4jByte();

				for (MetterCatcherUtils.MetterCatcherMessage mcm : tFlowMeterCatcher_1
						.getMessages()) {
					row6.pid = pid;
					row6.root_pid = rootPid;
					row6.father_pid = fatherPid;
					row6.project = projectName;
					row6.job = jobName;
					row6.context = contextStr;
					row6.origin = (mcm.getOrigin() == null
							|| mcm.getOrigin().length() < 1 ? null : mcm
							.getOrigin());
					row6.moment = mcm.getMoment();
					row6.job_version = mcm.getJobVersion();
					row6.job_repository_id = mcm.getJobId();
					row6.system_pid = mcm.getSystemPid();
					row6.label = mcm.getLabel();
					row6.count = mcm.getCount();
					row6.reference = tFlowMeterCatcher_1.getConnLinesCount(mcm
							.getReferense() + "_count");
					row6.thresholds = mcm.getThresholds();

					/**
					 * [tFlowMeterCatcher_1 begin ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 main ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

					tos_count_tFlowMeterCatcher_1++;

					/**
					 * [tFlowMeterCatcher_1 main ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 process_data_begin ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

					/**
					 * [tFlowMeterCatcher_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					// row6
					// row6

					if (execStat) {
						runStat.updateStatOnConnection("row6" + iterateId, 1, 1);
					}

					// /////////////////////

					strBuffer_tLogRow_1 = new StringBuilder();

					if (row6.moment != null) { //

						strBuffer_tLogRow_1.append(FormatterUtils.format_Date(
								row6.moment, "yyyy-MM-dd HH:mm:ss"));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.pid != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row6.pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.father_pid != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row6.father_pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.root_pid != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row6.root_pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.system_pid != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row6.system_pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.project != null) { //

						strBuffer_tLogRow_1
								.append(String.valueOf(row6.project));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.job != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row6.job));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.job_repository_id != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row6.job_repository_id));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.job_version != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row6.job_version));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.context != null) { //

						strBuffer_tLogRow_1
								.append(String.valueOf(row6.context));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.origin != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row6.origin));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.label != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row6.label));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.count != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row6.count));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.reference != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row6.reference));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.thresholds != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row6.thresholds));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
								.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_1 = new java.io.PrintStream(
								new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
					}
					consoleOut_tLogRow_1
							.println(strBuffer_tLogRow_1.toString());
					consoleOut_tLogRow_1.flush();
					nb_line_tLogRow_1++;
					// ////

					// ////

					// /////////////////////

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

					/**
					 * [tLogRow_1 process_data_begin ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 process_data_end ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_end ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 process_data_end ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

					/**
					 * [tFlowMeterCatcher_1 process_data_end ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 end ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

				}

				ok_Hash.put("tFlowMeterCatcher_1", true);
				end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());

				/**
				 * [tFlowMeterCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFlowMeterCatcher_1 finally ] start
				 */

				currentComponent = "tFlowMeterCatcher_1";

				/**
				 * [tFlowMeterCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];
		static byte[] commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String _id;

		public String get_id() {
			return this._id;
		}

		public String geographyCode;

		public String getGeographyCode() {
			return this.geographyCode;
		}

		public String locality;

		public String getLocality() {
			return this.locality;
		}

		public String adminArea1;

		public String getAdminArea1() {
			return this.adminArea1;
		}

		public String customerCode;

		public String getCustomerCode() {
			return this.customerCode;
		}

		public String customerName;

		public String getCustomerName() {
			return this.customerName;
		}

		public String customerType;

		public String getCustomerType() {
			return this.customerType;
		}

		public String productCode;

		public String getProductCode() {
			return this.productCode;
		}

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String amount;

		public String getAmount() {
			return this.amount;
		}

		public String quantity;

		public String getQuantity() {
			return this.quantity;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this._id == null) ? 0 : this._id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this._id == null) {
				if (other._id != null)
					return false;

			} else if (!this._id.equals(other._id))

				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other._id = this._id;
			other.geographyCode = this.geographyCode;
			other.locality = this.locality;
			other.adminArea1 = this.adminArea1;
			other.customerCode = this.customerCode;
			other.customerName = this.customerName;
			other.customerType = this.customerType;
			other.productCode = this.productCode;
			other.productName = this.productName;
			other.amount = this.amount;
			other.quantity = this.quantity;
			other.date = this.date;

		}

		public void copyKeysDataTo(row9Struct other) {

			other._id = this._id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length == 0) {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE) {

				try {

					int length = 0;

					this._id = readString(dis);

					this.geographyCode = readString(dis);

					this.locality = readString(dis);

					this.adminArea1 = readString(dis);

					this.customerCode = readString(dis);

					this.customerName = readString(dis);

					this.customerType = readString(dis);

					this.productCode = readString(dis);

					this.productName = readString(dis);

					this.amount = readString(dis);

					this.quantity = readString(dis);

					this.date = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this._id, dos);

				// String

				writeString(this.geographyCode, dos);

				// String

				writeString(this.locality, dos);

				// String

				writeString(this.adminArea1, dos);

				// String

				writeString(this.customerCode, dos);

				// String

				writeString(this.customerName, dos);

				// String

				writeString(this.customerType, dos);

				// String

				writeString(this.productCode, dos);

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.amount, dos);

				// String

				writeString(this.quantity, dos);

				// String

				writeString(this.date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("_id=" + _id);
			sb.append(",geographyCode=" + geographyCode);
			sb.append(",locality=" + locality);
			sb.append(",adminArea1=" + adminArea1);
			sb.append(",customerCode=" + customerCode);
			sb.append(",customerName=" + customerName);
			sb.append(",customerType=" + customerType);
			sb.append(",productCode=" + productCode);
			sb.append(",productName=" + productName);
			sb.append(",amount=" + amount);
			sb.append(",quantity=" + quantity);
			sb.append(",date=" + date);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this._id, other._id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];
		static byte[] commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String _id;

		public String get_id() {
			return this._id;
		}

		public String geographyCode;

		public String getGeographyCode() {
			return this.geographyCode;
		}

		public String locality;

		public String getLocality() {
			return this.locality;
		}

		public String adminArea1;

		public String getAdminArea1() {
			return this.adminArea1;
		}

		public String customerCode;

		public String getCustomerCode() {
			return this.customerCode;
		}

		public String customerName;

		public String getCustomerName() {
			return this.customerName;
		}

		public String customerType;

		public String getCustomerType() {
			return this.customerType;
		}

		public String productCode;

		public String getProductCode() {
			return this.productCode;
		}

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String amount;

		public String getAmount() {
			return this.amount;
		}

		public String quantity;

		public String getQuantity() {
			return this.quantity;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this._id == null) ? 0 : this._id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this._id == null) {
				if (other._id != null)
					return false;

			} else if (!this._id.equals(other._id))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other._id = this._id;
			other.geographyCode = this.geographyCode;
			other.locality = this.locality;
			other.adminArea1 = this.adminArea1;
			other.customerCode = this.customerCode;
			other.customerName = this.customerName;
			other.customerType = this.customerType;
			other.productCode = this.productCode;
			other.productName = this.productName;
			other.amount = this.amount;
			other.quantity = this.quantity;
			other.date = this.date;

		}

		public void copyKeysDataTo(row5Struct other) {

			other._id = this._id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length == 0) {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE) {

				try {

					int length = 0;

					this._id = readString(dis);

					this.geographyCode = readString(dis);

					this.locality = readString(dis);

					this.adminArea1 = readString(dis);

					this.customerCode = readString(dis);

					this.customerName = readString(dis);

					this.customerType = readString(dis);

					this.productCode = readString(dis);

					this.productName = readString(dis);

					this.amount = readString(dis);

					this.quantity = readString(dis);

					this.date = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this._id, dos);

				// String

				writeString(this.geographyCode, dos);

				// String

				writeString(this.locality, dos);

				// String

				writeString(this.adminArea1, dos);

				// String

				writeString(this.customerCode, dos);

				// String

				writeString(this.customerName, dos);

				// String

				writeString(this.customerType, dos);

				// String

				writeString(this.productCode, dos);

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.amount, dos);

				// String

				writeString(this.quantity, dos);

				// String

				writeString(this.date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("_id=" + _id);
			sb.append(",geographyCode=" + geographyCode);
			sb.append(",locality=" + locality);
			sb.append(",adminArea1=" + adminArea1);
			sb.append(",customerCode=" + customerCode);
			sb.append(",customerName=" + customerName);
			sb.append(",customerType=" + customerType);
			sb.append(",productCode=" + productCode);
			sb.append(",productName=" + productName);
			sb.append(",amount=" + amount);
			sb.append(",quantity=" + quantity);
			sb.append(",date=" + date);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this._id, other._id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];
		static byte[] commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String _id;

		public String get_id() {
			return this._id;
		}

		public String geographyCode;

		public String getGeographyCode() {
			return this.geographyCode;
		}

		public String locality;

		public String getLocality() {
			return this.locality;
		}

		public String adminArea1;

		public String getAdminArea1() {
			return this.adminArea1;
		}

		public String customerCode;

		public String getCustomerCode() {
			return this.customerCode;
		}

		public String customerName;

		public String getCustomerName() {
			return this.customerName;
		}

		public String customerType;

		public String getCustomerType() {
			return this.customerType;
		}

		public String productCode;

		public String getProductCode() {
			return this.productCode;
		}

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String amount;

		public String getAmount() {
			return this.amount;
		}

		public String quantity;

		public String getQuantity() {
			return this.quantity;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this._id == null) ? 0 : this._id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this._id == null) {
				if (other._id != null)
					return false;

			} else if (!this._id.equals(other._id))

				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other._id = this._id;
			other.geographyCode = this.geographyCode;
			other.locality = this.locality;
			other.adminArea1 = this.adminArea1;
			other.customerCode = this.customerCode;
			other.customerName = this.customerName;
			other.customerType = this.customerType;
			other.productCode = this.productCode;
			other.productName = this.productName;
			other.amount = this.amount;
			other.quantity = this.quantity;
			other.date = this.date;

		}

		public void copyKeysDataTo(row10Struct other) {

			other._id = this._id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length == 0) {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE) {

				try {

					int length = 0;

					this._id = readString(dis);

					this.geographyCode = readString(dis);

					this.locality = readString(dis);

					this.adminArea1 = readString(dis);

					this.customerCode = readString(dis);

					this.customerName = readString(dis);

					this.customerType = readString(dis);

					this.productCode = readString(dis);

					this.productName = readString(dis);

					this.amount = readString(dis);

					this.quantity = readString(dis);

					this.date = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this._id, dos);

				// String

				writeString(this.geographyCode, dos);

				// String

				writeString(this.locality, dos);

				// String

				writeString(this.adminArea1, dos);

				// String

				writeString(this.customerCode, dos);

				// String

				writeString(this.customerName, dos);

				// String

				writeString(this.customerType, dos);

				// String

				writeString(this.productCode, dos);

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.amount, dos);

				// String

				writeString(this.quantity, dos);

				// String

				writeString(this.date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("_id=" + _id);
			sb.append(",geographyCode=" + geographyCode);
			sb.append(",locality=" + locality);
			sb.append(",adminArea1=" + adminArea1);
			sb.append(",customerCode=" + customerCode);
			sb.append(",customerName=" + customerName);
			sb.append(",customerType=" + customerType);
			sb.append(",productCode=" + productCode);
			sb.append(",productName=" + productName);
			sb.append(",amount=" + amount);
			sb.append(",quantity=" + quantity);
			sb.append(",date=" + date);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this._id, other._id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];
		static byte[] commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String hash;

		public String getHash() {
			return this.hash;
		}

		public long num;

		public long getNum() {
			return this.num;
		}

		public String geographyCode;

		public String getGeographyCode() {
			return this.geographyCode;
		}

		public String locality;

		public String getLocality() {
			return this.locality;
		}

		public String adminArea1;

		public String getAdminArea1() {
			return this.adminArea1;
		}

		public String customerCode;

		public String getCustomerCode() {
			return this.customerCode;
		}

		public String customerName;

		public String getCustomerName() {
			return this.customerName;
		}

		public String customerType;

		public String getCustomerType() {
			return this.customerType;
		}

		public String productCode;

		public String getProductCode() {
			return this.productCode;
		}

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String amount;

		public String getAmount() {
			return this.amount;
		}

		public String quantity;

		public String getQuantity() {
			return this.quantity;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length == 0) {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.hash = readString(dis);

					this.num = dis.readLong();

					this.geographyCode = readString(dis);

					this.locality = readString(dis);

					this.adminArea1 = readString(dis);

					this.customerCode = readString(dis);

					this.customerName = readString(dis);

					this.customerType = readString(dis);

					this.productCode = readString(dis);

					this.productName = readString(dis);

					this.amount = readString(dis);

					this.quantity = readString(dis);

					this.date = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.hash, dos);

				// long

				dos.writeLong(this.num);

				// String

				writeString(this.geographyCode, dos);

				// String

				writeString(this.locality, dos);

				// String

				writeString(this.adminArea1, dos);

				// String

				writeString(this.customerCode, dos);

				// String

				writeString(this.customerName, dos);

				// String

				writeString(this.customerType, dos);

				// String

				writeString(this.productCode, dos);

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.amount, dos);

				// String

				writeString(this.quantity, dos);

				// String

				writeString(this.date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",hash=" + hash);
			sb.append(",num=" + String.valueOf(num));
			sb.append(",geographyCode=" + geographyCode);
			sb.append(",locality=" + locality);
			sb.append(",adminArea1=" + adminArea1);
			sb.append(",customerCode=" + customerCode);
			sb.append(",customerName=" + customerName);
			sb.append(",customerType=" + customerType);
			sb.append(",productCode=" + productCode);
			sb.append(",productName=" + productName);
			sb.append(",amount=" + amount);
			sb.append(",quantity=" + quantity);
			sb.append(",date=" + date);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];
		static byte[] commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String hash;

		public String getHash() {
			return this.hash;
		}

		public Long num;

		public Long getNum() {
			return this.num;
		}

		public Object fields;

		public Object getFields() {
			return this.fields;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length == 0) {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.hash = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num = null;
					} else {
						this.num = dis.readLong();
					}

					this.fields = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.hash, dos);

				// Long

				if (this.num == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num);
				}

				// Object

				dos.writeObject(this.fields);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",hash=" + hash);
			sb.append(",num=" + String.valueOf(num));
			sb.append(",fields=" + String.valueOf(fields));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];
		static byte[] commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String hash;

		public String getHash() {
			return this.hash;
		}

		public Long num;

		public Long getNum() {
			return this.num;
		}

		public Object fields;

		public Object getFields() {
			return this.fields;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length == 0) {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.hash = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num = null;
					} else {
						this.num = dis.readLong();
					}

					this.fields = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.hash, dos);

				// Long

				if (this.num == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num);
				}

				// Object

				dos.writeObject(this.fields);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",hash=" + hash);
			sb.append(",num=" + String.valueOf(num));
			sb.append(",fields=" + String.valueOf(fields));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];
		static byte[] commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String hash;

		public String getHash() {
			return this.hash;
		}

		public Long num;

		public Long getNum() {
			return this.num;
		}

		public Object fields;

		public Object getFields() {
			return this.fields;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length == 0) {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.hash = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num = null;
					} else {
						this.num = dis.readLong();
					}

					this.fields = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.hash, dos);

				// Long

				if (this.num == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num);
				}

				// Object

				dos.writeObject(this.fields);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",hash=" + hash);
			sb.append(",num=" + String.valueOf(num));
			sb.append(",fields=" + String.valueOf(fields));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tMongoDBInput_1Struct implements
			routines.system.IPersistableRow<after_tMongoDBInput_1Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];
		static byte[] commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String hash;

		public String getHash() {
			return this.hash;
		}

		public Long num;

		public Long getNum() {
			return this.num;
		}

		public Object fields;

		public Object getFields() {
			return this.fields;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length == 0) {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.hash = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num = null;
					} else {
						this.num = dis.readLong();
					}

					this.fields = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.hash, dos);

				// Long

				if (this.num == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.num);
				}

				// Object

				dos.writeObject(this.fields);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",hash=" + hash);
			sb.append(",num=" + String.valueOf(num));
			sb.append(",fields=" + String.valueOf(fields));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tMongoDBInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMongoDBInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_1Process(globalMap);
				tDBInput_2Process(globalMap);

				row1Struct row1 = new row1Struct();
				out1Struct out1 = new out1Struct();
				out1Struct row7 = out1;
				row2Struct row2 = new row2Struct();
				row10Struct row10 = new row10Struct();
				row10Struct row5 = row10;
				row10Struct row9 = row10;

				/**
				 * [tMongoDBOutput_1_In begin ] start
				 */

				ok_Hash.put("tMongoDBOutput_1_In", false);
				start_Hash.put("tMongoDBOutput_1_In",
						System.currentTimeMillis());

				currentVirtualComponent = "tMongoDBOutput_1";

				currentComponent = "tMongoDBOutput_1_In";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);

					}
				}

				int tos_count_tMongoDBOutput_1_In = 0;

				class BytesLimit65535_tMongoDBOutput_1_In {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMongoDBOutput_1_In().limitLog4jByte();
				// tWriteXMLFieldOut_begin
				int nb_line_tMongoDBOutput_1_In = 0;
				boolean needRoot_tMongoDBOutput_1_In = true;

				String strCompCache_tMongoDBOutput_1_In = null;

				java.util.Queue<String> listGroupby_tMongoDBOutput_1_In = new java.util.concurrent.ConcurrentLinkedQueue<String>();

				class ThreadXMLField_tMongoDBOutput_1_In extends Thread {

					java.util.Queue<String> queue;

					java.util.List<java.util.Map<String, String>> flows;
					java.lang.Exception lastException;
					String currentComponent;

					ThreadXMLField_tMongoDBOutput_1_In(java.util.Queue q) {
						this.queue = q;
						globalMap.put("queue_tMongoDBOutput_1_Out", queue);
						lastException = null;
					}

					ThreadXMLField_tMongoDBOutput_1_In(java.util.Queue q,
							java.util.List<java.util.Map<String, String>> l) {
						this.queue = q;
						this.flows = l;
						lastException = null;
						globalMap.put("queue_tMongoDBOutput_1_Out", queue);
						globalMap.put("flows_tMongoDBOutput_1_Out", flows);
					}

					public java.lang.Exception getLastException() {
						return this.lastException;
					}

					public String getCurrentComponent() {
						return this.currentComponent;
					}

					@Override
					public void run() {
						try {
							tMongoDBOutput_1_OutProcess(globalMap);
						} catch (TalendException te) {
							this.lastException = te.getException();
							this.currentComponent = te.getCurrentComponent();
						}
					}
				}

				ThreadXMLField_tMongoDBOutput_1_In txf_tMongoDBOutput_1_In = new ThreadXMLField_tMongoDBOutput_1_In(
						listGroupby_tMongoDBOutput_1_In);

				txf_tMongoDBOutput_1_In.start();

				java.util.List<java.util.List<String>> groupbyList_tMongoDBOutput_1_In = new java.util.ArrayList<java.util.List<String>>();
				java.util.Map<String, String> valueMap_tMongoDBOutput_1_In = new java.util.HashMap<String, String>();

				class NestXMLTool_tMongoDBOutput_1_In {
					public void parseAndAdd(org.dom4j.Element nestRoot,
							String value) {
						try {
							org.dom4j.Document doc4Str = org.dom4j.DocumentHelper
									.parseText("<root>" + value + "</root>");
							nestRoot.setContent(doc4Str.getRootElement()
									.content());
						} catch (java.lang.Exception e) {
							e.printStackTrace();
							nestRoot.setText(value);
						}
					}

					public void setText(org.dom4j.Element element, String value) {
						if (value.startsWith("<![CDATA[")
								&& value.endsWith("]]>")) {
							String text = value
									.substring(9, value.length() - 3);
							element.addCDATA(text);
						} else {
							element.setText(value);
						}
					}

					public void replaceDefaultNameSpace(
							org.dom4j.Element nestRoot) {
						if (nestRoot != null) {
							for (org.dom4j.Element tmp : (java.util.List<org.dom4j.Element>) nestRoot
									.elements()) {
								if (("").equals(tmp.getQName().getNamespace()
										.getURI())
										&& ("").equals(tmp.getQName()
												.getNamespace().getPrefix())) {
									tmp.setQName(org.dom4j.DocumentHelper
											.createQName(tmp.getName(),
													nestRoot.getQName()
															.getNamespace()));
								}
								replaceDefaultNameSpace(tmp);
							}
						}
					}

					public void removeEmptyElement(org.dom4j.Element root) {
						if (root != null) {
							for (org.dom4j.Element tmp : (java.util.List<org.dom4j.Element>) root
									.elements()) {
								removeEmptyElement(tmp);
							}
							if (root.content().size() == 0
									&& root.attributes().size() == 0
									&& root.declaredNamespaces().size() == 0) {
								if (root.getParent() != null) {
									root.getParent().remove(root);
								}
							}
						}
					}
				}
				NestXMLTool_tMongoDBOutput_1_In nestXMLTool_tMongoDBOutput_1_In = new NestXMLTool_tMongoDBOutput_1_In();

				row10Struct rowStructOutput_tMongoDBOutput_1_In = new row10Struct();
				// sort group root element for judgement of group
				java.util.List<org.dom4j.Element> groupElementList_tMongoDBOutput_1_In = new java.util.ArrayList<org.dom4j.Element>();
				org.dom4j.Element root4Group_tMongoDBOutput_1_In = null;
				org.dom4j.Document doc_tMongoDBOutput_1_In = org.dom4j.DocumentHelper
						.createDocument();
				org.dom4j.io.OutputFormat format_tMongoDBOutput_1_In = org.dom4j.io.OutputFormat
						.createCompactFormat();
				format_tMongoDBOutput_1_In.setNewLineAfterDeclaration(false);
				format_tMongoDBOutput_1_In.setTrimText(false);
				format_tMongoDBOutput_1_In.setEncoding("ISO-8859-15");
				int[] orders_tMongoDBOutput_1_In = new int[1];

				/**
				 * [tMongoDBOutput_1_In begin ] stop
				 */

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_2 = 0;

				class BytesLimit65535_tLogRow_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tLogRow_2().limitLog4jByte();

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
				java.io.PrintStream consoleOut_tLogRow_2 = null;

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
				// /////////////////////

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tFlowMeter_17 begin ] start
				 */

				ok_Hash.put("tFlowMeter_17", false);
				start_Hash.put("tFlowMeter_17", System.currentTimeMillis());

				currentComponent = "tFlowMeter_17";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row10" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFlowMeter_17 = 0;

				class BytesLimit65535_tFlowMeter_17 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowMeter_17().limitLog4jByte();

				int count_tFlowMeter_17 = 0;

				/**
				 * [tFlowMeter_17 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_2 = 0;

				class BytesLimit65535_tMap_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_2().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) globalMap
						.get("tHash_Lookup_row3"));

				row3Struct row3HashKey = new row3Struct();
				row3Struct row3Default = new row3Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				row10Struct row10_tmp = new row10Struct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tExtractFields_1 begin ] start
				 */

				ok_Hash.put("tExtractFields_1", false);
				start_Hash.put("tExtractFields_1", System.currentTimeMillis());

				currentComponent = "tExtractFields_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tExtractFields_1 = 0;

				class BytesLimit65535_tExtractFields_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tExtractFields_1().limitLog4jByte();
				int nb_line_tExtractFields_1 = 0;

				class tExtractFields_1Utility {
					public String UnPivot(
							java.util.List<org.bson.Document> document,
							String key, String value, String keyValue) {
						return document.stream()
								.filter(x -> keyValue.equals(x.get(key)))
								.map(x -> x.get(value).toString()).findFirst()
								.orElse(null);
					}
				}
				tExtractFields_1Utility utility_tExtractFields_1 = new tExtractFields_1Utility();

				/**
				 * [tExtractFields_1 begin ] stop
				 */

				/**
				 * [tFlowMeter_11 begin ] start
				 */

				ok_Hash.put("tFlowMeter_11", false);
				start_Hash.put("tFlowMeter_11", System.currentTimeMillis());

				currentComponent = "tFlowMeter_11";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("out1" + iterateId, 0, 0);

					}
				}

				int tos_count_tFlowMeter_11 = 0;

				class BytesLimit65535_tFlowMeter_11 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowMeter_11().limitLog4jByte();

				int count_tFlowMeter_11 = 0;

				/**
				 * [tFlowMeter_11 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				class BytesLimit65535_tMap_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_1().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tMongoDBInput_1 begin ] start
				 */

				ok_Hash.put("tMongoDBInput_1", false);
				start_Hash.put("tMongoDBInput_1", System.currentTimeMillis());

				currentComponent = "tMongoDBInput_1";

				int tos_count_tMongoDBInput_1 = 0;

				class BytesLimit65535_tMongoDBInput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMongoDBInput_1().limitLog4jByte();

				int nb_line_tMongoDBInput_1 = 0;

				com.mongodb.MongoClient mongo_tMongoDBInput_1 = null;
				com.mongodb.client.MongoDatabase db_tMongoDBInput_1 = null;

				mongo_tMongoDBInput_1 = (com.mongodb.MongoClient) globalMap
						.get("mongo_tMongoDBConnection_1");
				db_tMongoDBInput_1 = (com.mongodb.client.MongoDatabase) globalMap
						.get("db_tMongoDBConnection_1");

				com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBInput_1 = db_tMongoDBInput_1
						.getCollection("test.talend");

				try {
					// Add warning if an index is not in the query.
					boolean needIndexWarning = true;
					String indexList = "";

					for (com.mongodb.DBObject index : coll_tMongoDBInput_1
							.listIndexes(com.mongodb.DBObject.class)) {

						for (String key : ((com.mongodb.DBObject) index
								.get("key")).keySet()) {
							// The regexp is:
							// - contain the db DBcolumnName between two
							// backslashed quotes
							// - is followed at some point by a colon
							// - there is no comma between the the DBcolumnName
							// and the colon
							if (("{{}, {_id:1, num: 1}}").matches(".*" + key
									+ "[^,]*:.*")) {
								// We have an index, do not print error message
								needIndexWarning = false;
							} else {
								// This index is not in the query, add it into
								// the indexList
								indexList += ", " + key;
							}
						}
					}
					if ((!"".equals(indexList)) && (needIndexWarning)) {

						System.err
								.println("tMongoDBInput_1 - The query does not contain any reference an index.  ["
										+ indexList.substring(1) + " ]");

					}
				} catch (com.mongodb.MongoException e) {
					// caught an exception after issuing the getIndexInfo()
					// don't fail the whole job
					// maybe due to authorization
				}

				java.util.List<org.bson.Document> aggregationStages = new java.util.ArrayList<org.bson.Document>();

				aggregationStages
						.add(org.bson.Document
								.parse("{ $addFields: {'_fileRef': {$arrayToObject: {$map: {input: { $objectToArray: '$file' }, in: {k: {$cond:[{ $eq:[{'$substrCP':['$$this.k',0,1]},{$literal:'$'}] }, { $substrCP:['$$this.k',1,{$strLenCP:'$$this.k'}] }, '$$this.k'] }, v:'$$this.v'} } } } } }"));

				aggregationStages
						.add(org.bson.Document
								.parse("{ $lookup: {from: 'transactions.files', localField: '_fileRef.id', foreignField: '_id', as: 'file'} }"));

				aggregationStages
						.add(org.bson.Document
								.parse("{ $addFields: {'file': {$mergeObjects: '$file'}} }"));

				com.mongodb.client.MongoCursor<org.bson.Document> cursor_tMongoDBInput_1 = coll_tMongoDBInput_1
						.aggregate(aggregationStages).allowDiskUse(false)
						.iterator();

				class DBObjectInputUtil_tMongoDBInput_1 {
					// Get the node value in embedded document,
					// If have no embedded document get root document node.

					public Object getValue(String parentNode,
							String currentName, org.bson.Document dbObject) {
						Object value = null;
						if (dbObject == null) {
							return null;
						}
						if (parentNode == null || "".equals(parentNode)) {
							if ("*".equals(currentName)) {
								value = dbObject;
							} else if (dbObject.get(currentName) != null) {
								value = dbObject.get(currentName);
							}
						} else {
							String objNames[] = objNames = parentNode
									.split("\\.");
							org.bson.Document currentObj = dbObject;
							for (int i = 0; i < objNames.length; i++) {
								currentObj = (org.bson.Document) currentObj
										.get(objNames[i]);
								if (currentObj == null) {
									break;
								}
							}
							if ("*".equals(currentName)) {
								value = currentObj;
							} else if (currentObj != null) {
								value = currentObj.get(currentName);
							}
						}
						return value;
					}
				}
				DBObjectInputUtil_tMongoDBInput_1 dbObjectInputUtil_tMongoDBInput_1 = new DBObjectInputUtil_tMongoDBInput_1();
				java.util.Map<String, String> pathMap_tMongoDBInput_1 = new java.util.HashMap<String, String>();
				pathMap_tMongoDBInput_1.put("id", "");
				pathMap_tMongoDBInput_1.put("hash", "file");
				pathMap_tMongoDBInput_1.put("num", "");
				pathMap_tMongoDBInput_1.put("fields", "");

				while (cursor_tMongoDBInput_1.hasNext()) {
					org.bson.Document o_tMongoDBInput_1 = cursor_tMongoDBInput_1
							.next();
					nb_line_tMongoDBInput_1++;
					Object valueObj_tMongoDBInput_1 = null;
					valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1
							.getValue(pathMap_tMongoDBInput_1.get("id"), "_id",
									o_tMongoDBInput_1);
					if (valueObj_tMongoDBInput_1 != null
							&& valueObj_tMongoDBInput_1.toString().length() > 0) {
						row1.id = valueObj_tMongoDBInput_1.toString();
					} else {
						row1.id = null;
					}
					valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1
							.getValue(pathMap_tMongoDBInput_1.get("hash"),
									"hash", o_tMongoDBInput_1);
					if (valueObj_tMongoDBInput_1 != null
							&& valueObj_tMongoDBInput_1.toString().length() > 0) {
						row1.hash = valueObj_tMongoDBInput_1.toString();
					} else {
						row1.hash = null;
					}
					valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1
							.getValue(pathMap_tMongoDBInput_1.get("num"),
									"num", o_tMongoDBInput_1);
					if (valueObj_tMongoDBInput_1 != null
							&& valueObj_tMongoDBInput_1.toString().length() > 0) {
						if (valueObj_tMongoDBInput_1.getClass().equals(
								Double.class)) {
							row1.num = ParserUtils.parseTo_Double(
									valueObj_tMongoDBInput_1.toString())
									.longValue();
						} else {
							row1.num = ParserUtils
									.parseTo_Long(valueObj_tMongoDBInput_1
											.toString());
						}
					} else {
						row1.num = null;
					}
					valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1
							.getValue(pathMap_tMongoDBInput_1.get("fields"),
									"fields", o_tMongoDBInput_1);
					row1.fields = valueObj_tMongoDBInput_1;

					/**
					 * [tMongoDBInput_1 begin ] stop
					 */

					/**
					 * [tMongoDBInput_1 main ] start
					 */

					currentComponent = "tMongoDBInput_1";

					tos_count_tMongoDBInput_1++;

					/**
					 * [tMongoDBInput_1 main ] stop
					 */

					/**
					 * [tMongoDBInput_1 process_data_begin ] start
					 */

					currentComponent = "tMongoDBInput_1";

					/**
					 * [tMongoDBInput_1 process_data_begin ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					// row1
					// row1

					if (execStat) {
						runStat.updateStatOnConnection("row1" + iterateId, 1, 1);
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					// /////////////////////////////////////////////
					// Starting Lookup Table "row4"
					// /////////////////////////////////////////////

					boolean forceLooprow4 = false;

					row4Struct row4ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_1 = false;

						row4HashKey.hash = row1.hash + "_";

						row4HashKey.hashCodeDirty = true;

						tHash_Lookup_row4.lookup(row4HashKey);

						if (!tHash_Lookup_row4.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_1 = true;

						} // G_TM_M_090

					} // G_TM_M_020

					if (tHash_Lookup_row4 != null
							&& tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G
																				// 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.hash = '"
						// + row4HashKey.hash + "'");
					} // G 071

					row4Struct row4 = null;

					row4Struct fromLookup_row4 = null;
					row4 = row4Default;

					if (tHash_Lookup_row4 != null
							&& tHash_Lookup_row4.hasNext()) { // G 099

						fromLookup_row4 = tHash_Lookup_row4.next();

					} // G 099

					if (fromLookup_row4 != null) {
						row4 = fromLookup_row4;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
						// ###############################
						// # Output tables

						out1 = null;

						if (!rejectedInnerJoin_tMap_1) {
						} // closing inner join bracket (1)
							// ###### START REJECTS #####

						// # Output reject table : 'out1'
						// # Filter conditions
						if (rejectedInnerJoin_tMap_1) {
							out1_tmp.id = row1.id;
							out1_tmp.hash = row1.hash;
							out1_tmp.num = row1.num;
							out1_tmp.fields = row1.fields;
							out1 = out1_tmp;
						} // closing filter/reject
							// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1 = false;

					tos_count_tMap_1++;

					/**
					 * [tMap_1 main ] stop
					 */

					/**
					 * [tMap_1 process_data_begin ] start
					 */

					currentComponent = "tMap_1";

					/**
					 * [tMap_1 process_data_begin ] stop
					 */
					// Start of branch "out1"
					if (out1 != null) {

						/**
						 * [tFlowMeter_11 main ] start
						 */

						currentComponent = "tFlowMeter_11";

						// out1
						// out1

						if (execStat) {
							runStat.updateStatOnConnection("out1" + iterateId,
									1, 1);
						}

						count_tFlowMeter_11++;

						row7 = out1;

						tos_count_tFlowMeter_11++;

						/**
						 * [tFlowMeter_11 main ] stop
						 */

						/**
						 * [tFlowMeter_11 process_data_begin ] start
						 */

						currentComponent = "tFlowMeter_11";

						/**
						 * [tFlowMeter_11 process_data_begin ] stop
						 */

						/**
						 * [tExtractFields_1 main ] start
						 */

						currentComponent = "tExtractFields_1";

						// row7
						// row7

						if (execStat) {
							runStat.updateStatOnConnection("row7" + iterateId,
									1, 1);
						}

						List<org.bson.Document> doc_tExtractFields_1 = (List<org.bson.Document>) row7.fields;
						row2.id = row7.id;
						row2.hash = row7.hash;
						row2.num = row7.num;
						row2.geographyCode = utility_tExtractFields_1.UnPivot(
								doc_tExtractFields_1, "tag", "value",
								"geographyCode");
						row2.locality = utility_tExtractFields_1.UnPivot(
								doc_tExtractFields_1, "tag", "value",
								"locality");
						row2.adminArea1 = utility_tExtractFields_1.UnPivot(
								doc_tExtractFields_1, "tag", "value",
								"adminArea1");
						row2.customerCode = utility_tExtractFields_1.UnPivot(
								doc_tExtractFields_1, "tag", "value",
								"customerCode");
						row2.customerName = utility_tExtractFields_1.UnPivot(
								doc_tExtractFields_1, "tag", "value",
								"customerName");
						row2.customerType = utility_tExtractFields_1.UnPivot(
								doc_tExtractFields_1, "tag", "value",
								"customerType");
						row2.productCode = utility_tExtractFields_1.UnPivot(
								doc_tExtractFields_1, "tag", "value",
								"productCode");
						row2.productName = utility_tExtractFields_1.UnPivot(
								doc_tExtractFields_1, "tag", "value",
								"productName");
						row2.amount = utility_tExtractFields_1.UnPivot(
								doc_tExtractFields_1, "tag", "value", "amount");
						row2.quantity = utility_tExtractFields_1.UnPivot(
								doc_tExtractFields_1, "tag", "value",
								"quantity");
						row2.date = utility_tExtractFields_1.UnPivot(
								doc_tExtractFields_1, "tag", "value", "date");
						nb_line_tExtractFields_1++;

						tos_count_tExtractFields_1++;

						/**
						 * [tExtractFields_1 main ] stop
						 */

						/**
						 * [tExtractFields_1 process_data_begin ] start
						 */

						currentComponent = "tExtractFields_1";

						/**
						 * [tExtractFields_1 process_data_begin ] stop
						 */
						// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							// row2
							// row2

							if (execStat) {
								runStat.updateStatOnConnection("row2"
										+ iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row3"
							// /////////////////////////////////////////////

							boolean forceLooprow3 = false;

							row3Struct row3ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_2 = false;

								row3HashKey.businessKey = row2.locality;

								row3HashKey.hashCodeDirty = true;

								tHash_Lookup_row3.lookup(row3HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row3 != null
									&& tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G
																						// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.businessKey = '"
								// + row3HashKey.businessKey + "'");
							} // G 071

							row3Struct row3 = null;

							row3Struct fromLookup_row3 = null;
							row3 = row3Default;

							if (tHash_Lookup_row3 != null
									&& tHash_Lookup_row3.hasNext()) { // G 099

								fromLookup_row3 = tHash_Lookup_row3.next();

							} // G 099

							if (fromLookup_row3 != null) {
								row3 = fromLookup_row3;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								row10 = null;

								// # Output table : 'row10'
								row10_tmp._id = row2.id;
								row10_tmp.geographyCode = row3.geographyCode;
								row10_tmp.locality = row2.locality;
								row10_tmp.adminArea1 = row2.adminArea1;
								row10_tmp.customerCode = row2.customerCode;
								row10_tmp.customerName = row2.customerName;
								row10_tmp.customerType = row2.customerType;
								row10_tmp.productCode = row2.productCode;
								row10_tmp.productName = row2.productName;
								row10_tmp.amount = row2.amount;
								row10_tmp.quantity = row2.quantity;
								row10_tmp.date = row2.date;
								row10 = row10_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */

							/**
							 * [tMap_2 process_data_begin ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_begin ] stop
							 */
							// Start of branch "row10"
							if (row10 != null) {

								/**
								 * [tFlowMeter_17 main ] start
								 */

								currentComponent = "tFlowMeter_17";

								// row10
								// row10

								if (execStat) {
									runStat.updateStatOnConnection("row10"
											+ iterateId, 1, 1);
								}

								count_tFlowMeter_17++;

								row5 = row10;

								tos_count_tFlowMeter_17++;

								/**
								 * [tFlowMeter_17 main ] stop
								 */

								/**
								 * [tFlowMeter_17 process_data_begin ] start
								 */

								currentComponent = "tFlowMeter_17";

								/**
								 * [tFlowMeter_17 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_2 main ] start
								 */

								currentComponent = "tLogRow_2";

								// row5
								// row5

								if (execStat) {
									runStat.updateStatOnConnection("row5"
											+ iterateId, 1, 1);
								}

								// /////////////////////

								strBuffer_tLogRow_2 = new StringBuilder();

								if (row5._id != null) { //

									strBuffer_tLogRow_2.append(String
											.valueOf(row5._id));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row5.geographyCode != null) { //

									strBuffer_tLogRow_2.append(String
											.valueOf(row5.geographyCode));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row5.locality != null) { //

									strBuffer_tLogRow_2.append(String
											.valueOf(row5.locality));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row5.adminArea1 != null) { //

									strBuffer_tLogRow_2.append(String
											.valueOf(row5.adminArea1));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row5.customerCode != null) { //

									strBuffer_tLogRow_2.append(String
											.valueOf(row5.customerCode));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row5.customerName != null) { //

									strBuffer_tLogRow_2.append(String
											.valueOf(row5.customerName));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row5.customerType != null) { //

									strBuffer_tLogRow_2.append(String
											.valueOf(row5.customerType));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row5.productCode != null) { //

									strBuffer_tLogRow_2.append(String
											.valueOf(row5.productCode));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row5.productName != null) { //

									strBuffer_tLogRow_2.append(String
											.valueOf(row5.productName));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row5.amount != null) { //

									strBuffer_tLogRow_2.append(String
											.valueOf(row5.amount));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row5.quantity != null) { //

									strBuffer_tLogRow_2.append(String
											.valueOf(row5.quantity));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row5.date != null) { //

									strBuffer_tLogRow_2.append(String
											.valueOf(row5.date));

								} //

								if (globalMap.get("tLogRow_CONSOLE") != null) {
									consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap
											.get("tLogRow_CONSOLE");
								} else {
									consoleOut_tLogRow_2 = new java.io.PrintStream(
											new java.io.BufferedOutputStream(
													System.out));
									globalMap.put("tLogRow_CONSOLE",
											consoleOut_tLogRow_2);
								}
								consoleOut_tLogRow_2
										.println(strBuffer_tLogRow_2.toString());
								consoleOut_tLogRow_2.flush();
								nb_line_tLogRow_2++;
								// ////

								// ////

								// /////////////////////

								row9 = row5;

								tos_count_tLogRow_2++;

								/**
								 * [tLogRow_2 main ] stop
								 */

								/**
								 * [tLogRow_2 process_data_begin ] start
								 */

								currentComponent = "tLogRow_2";

								/**
								 * [tLogRow_2 process_data_begin ] stop
								 */

								/**
								 * [tMongoDBOutput_1_In main ] start
								 */

								currentVirtualComponent = "tMongoDBOutput_1";

								currentComponent = "tMongoDBOutput_1_In";

								// row9
								// row9

								if (execStat) {
									runStat.updateStatOnConnection("row9"
											+ iterateId, 1, 1);
								}

								if (txf_tMongoDBOutput_1_In.getLastException() != null) {
									currentComponent = txf_tMongoDBOutput_1_In
											.getCurrentComponent();
									throw txf_tMongoDBOutput_1_In
											.getLastException();
								}
								nb_line_tMongoDBOutput_1_In++;
								valueMap_tMongoDBOutput_1_In.clear();
								valueMap_tMongoDBOutput_1_In.put("_id",
										(row9._id.toString()));
								valueMap_tMongoDBOutput_1_In
										.put("geographyCode",
												(row9.geographyCode != null ? row9.geographyCode
														.toString() : null));
								valueMap_tMongoDBOutput_1_In.put(
										"locality",
										(row9.locality != null ? row9.locality
												.toString() : null));
								valueMap_tMongoDBOutput_1_In
										.put("adminArea1",
												(row9.adminArea1 != null ? row9.adminArea1
														.toString() : null));
								valueMap_tMongoDBOutput_1_In
										.put("customerCode",
												(row9.customerCode != null ? row9.customerCode
														.toString() : null));
								valueMap_tMongoDBOutput_1_In
										.put("customerName",
												(row9.customerName != null ? row9.customerName
														.toString() : null));
								valueMap_tMongoDBOutput_1_In
										.put("customerType",
												(row9.customerType != null ? row9.customerType
														.toString() : null));
								valueMap_tMongoDBOutput_1_In.put("productCode",
										(row9.productCode.toString()));
								valueMap_tMongoDBOutput_1_In
										.put("productName",
												(row9.productName != null ? row9.productName
														.toString() : null));
								valueMap_tMongoDBOutput_1_In.put(
										"amount",
										(row9.amount != null ? row9.amount
												.toString() : null));
								valueMap_tMongoDBOutput_1_In.put("quantity",
										(row9.quantity.toString()));
								valueMap_tMongoDBOutput_1_In.put("date",
										(row9.date.toString()));
								String strTemp_tMongoDBOutput_1_In = "";
								if (strCompCache_tMongoDBOutput_1_In == null) {
									strCompCache_tMongoDBOutput_1_In = strTemp_tMongoDBOutput_1_In;

								} else {
									nestXMLTool_tMongoDBOutput_1_In
											.replaceDefaultNameSpace(doc_tMongoDBOutput_1_In
													.getRootElement());
									nestXMLTool_tMongoDBOutput_1_In
											.removeEmptyElement(doc_tMongoDBOutput_1_In
													.getRootElement());
									java.io.StringWriter strWriter_tMongoDBOutput_1_In = new java.io.StringWriter();
									org.dom4j.io.XMLWriter output_tMongoDBOutput_1_In = new org.dom4j.io.XMLWriter(
											strWriter_tMongoDBOutput_1_In,
											format_tMongoDBOutput_1_In);
									output_tMongoDBOutput_1_In
											.write(doc_tMongoDBOutput_1_In);
									output_tMongoDBOutput_1_In.close();

									listGroupby_tMongoDBOutput_1_In
											.add(strWriter_tMongoDBOutput_1_In
													.toString());

									doc_tMongoDBOutput_1_In.clearContent();
									needRoot_tMongoDBOutput_1_In = true;
									for (int i_tMongoDBOutput_1_In = 0; i_tMongoDBOutput_1_In < orders_tMongoDBOutput_1_In.length; i_tMongoDBOutput_1_In++) {
										orders_tMongoDBOutput_1_In[i_tMongoDBOutput_1_In] = 0;
									}

									if (groupbyList_tMongoDBOutput_1_In != null
											&& groupbyList_tMongoDBOutput_1_In
													.size() >= 0) {
										groupbyList_tMongoDBOutput_1_In.clear();
									}
									strCompCache_tMongoDBOutput_1_In = strTemp_tMongoDBOutput_1_In;
								}

								org.dom4j.Element subTreeRootParent_tMongoDBOutput_1_In = null;

								// build root xml tree
								if (needRoot_tMongoDBOutput_1_In) {
									needRoot_tMongoDBOutput_1_In = false;
									org.dom4j.Element root_tMongoDBOutput_1_In = doc_tMongoDBOutput_1_In
											.addElement("rootTag");
									org.dom4j.Element root_0_tMongoDBOutput_1_In = root_tMongoDBOutput_1_In
											.addElement("query");
									org.dom4j.Element root_0_0_tMongoDBOutput_1_In = root_0_tMongoDBOutput_1_In
											.addElement("_id");
									if (valueMap_tMongoDBOutput_1_In.get("_id") != null) {
										nestXMLTool_tMongoDBOutput_1_In
												.setText(
														root_0_0_tMongoDBOutput_1_In,
														valueMap_tMongoDBOutput_1_In
																.get("_id"));
									}
									root_0_0_tMongoDBOutput_1_In.addAttribute(
											"type", "object");
									org.dom4j.Element root_1_tMongoDBOutput_1_In = root_tMongoDBOutput_1_In
											.addElement("data");
									subTreeRootParent_tMongoDBOutput_1_In = root_1_tMongoDBOutput_1_In;
									root4Group_tMongoDBOutput_1_In = subTreeRootParent_tMongoDBOutput_1_In;
								} else {
									subTreeRootParent_tMongoDBOutput_1_In = root4Group_tMongoDBOutput_1_In;
								}
								// build group xml tree
								// build loop xml tree
								org.dom4j.Element loop_tMongoDBOutput_1_In = org.dom4j.DocumentHelper
										.createElement("fields");
								if (orders_tMongoDBOutput_1_In[0] == 0) {
									orders_tMongoDBOutput_1_In[0] = 0;
								}
								if (1 < orders_tMongoDBOutput_1_In.length) {
									orders_tMongoDBOutput_1_In[1] = 0;
								}
								subTreeRootParent_tMongoDBOutput_1_In
										.elements()
										.add(orders_tMongoDBOutput_1_In[0]++,
												loop_tMongoDBOutput_1_In);
								org.dom4j.Element loop_0_tMongoDBOutput_1_In = loop_tMongoDBOutput_1_In
										.addElement("field");
								org.dom4j.Element loop_0_0_tMongoDBOutput_1_In = loop_0_tMongoDBOutput_1_In
										.addElement("name");
								nestXMLTool_tMongoDBOutput_1_In.parseAndAdd(
										loop_0_0_tMongoDBOutput_1_In,
										"geographyCode");
								org.dom4j.Element loop_0_1_tMongoDBOutput_1_In = loop_0_tMongoDBOutput_1_In
										.addElement("value");
								if (valueMap_tMongoDBOutput_1_In
										.get("geographyCode") != null) {
									nestXMLTool_tMongoDBOutput_1_In.setText(
											loop_0_1_tMongoDBOutput_1_In,
											valueMap_tMongoDBOutput_1_In
													.get("geographyCode"));
								}
								org.dom4j.Element loop_0_2_tMongoDBOutput_1_In = loop_0_tMongoDBOutput_1_In
										.addElement("tag");
								nestXMLTool_tMongoDBOutput_1_In.parseAndAdd(
										loop_0_2_tMongoDBOutput_1_In,
										"geographyCode");
								org.dom4j.Element loop_1_tMongoDBOutput_1_In = loop_tMongoDBOutput_1_In
										.addElement("field");
								org.dom4j.Element loop_1_0_tMongoDBOutput_1_In = loop_1_tMongoDBOutput_1_In
										.addElement("name");
								nestXMLTool_tMongoDBOutput_1_In.parseAndAdd(
										loop_1_0_tMongoDBOutput_1_In,
										"locality");
								org.dom4j.Element loop_1_1_tMongoDBOutput_1_In = loop_1_tMongoDBOutput_1_In
										.addElement("value");
								if (valueMap_tMongoDBOutput_1_In
										.get("locality") != null) {
									nestXMLTool_tMongoDBOutput_1_In.setText(
											loop_1_1_tMongoDBOutput_1_In,
											valueMap_tMongoDBOutput_1_In
													.get("locality"));
								}
								org.dom4j.Element loop_1_2_tMongoDBOutput_1_In = loop_1_tMongoDBOutput_1_In
										.addElement("tag");
								nestXMLTool_tMongoDBOutput_1_In.parseAndAdd(
										loop_1_2_tMongoDBOutput_1_In,
										"locality");

								tos_count_tMongoDBOutput_1_In++;

								/**
								 * [tMongoDBOutput_1_In main ] stop
								 */

								/**
								 * [tMongoDBOutput_1_In process_data_begin ]
								 * start
								 */

								currentVirtualComponent = "tMongoDBOutput_1";

								currentComponent = "tMongoDBOutput_1_In";

								/**
								 * [tMongoDBOutput_1_In process_data_begin ]
								 * stop
								 */

								/**
								 * [tMongoDBOutput_1_In process_data_end ] start
								 */

								currentVirtualComponent = "tMongoDBOutput_1";

								currentComponent = "tMongoDBOutput_1_In";

								/**
								 * [tMongoDBOutput_1_In process_data_end ] stop
								 */

								/**
								 * [tLogRow_2 process_data_end ] start
								 */

								currentComponent = "tLogRow_2";

								/**
								 * [tLogRow_2 process_data_end ] stop
								 */

								/**
								 * [tFlowMeter_17 process_data_end ] start
								 */

								currentComponent = "tFlowMeter_17";

								/**
								 * [tFlowMeter_17 process_data_end ] stop
								 */

							} // End of branch "row10"

							/**
							 * [tMap_2 process_data_end ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tExtractFields_1 process_data_end ] start
						 */

						currentComponent = "tExtractFields_1";

						/**
						 * [tExtractFields_1 process_data_end ] stop
						 */

						/**
						 * [tFlowMeter_11 process_data_end ] start
						 */

						currentComponent = "tFlowMeter_11";

						/**
						 * [tFlowMeter_11 process_data_end ] stop
						 */

					} // End of branch "out1"

					/**
					 * [tMap_1 process_data_end ] start
					 */

					currentComponent = "tMap_1";

					/**
					 * [tMap_1 process_data_end ] stop
					 */

					/**
					 * [tMongoDBInput_1 process_data_end ] start
					 */

					currentComponent = "tMongoDBInput_1";

					/**
					 * [tMongoDBInput_1 process_data_end ] stop
					 */

					/**
					 * [tMongoDBInput_1 end ] start
					 */

					currentComponent = "tMongoDBInput_1";

				}

				globalMap.put("tMongoDBInput_1_NB_LINE",
						nb_line_tMongoDBInput_1);

				ok_Hash.put("tMongoDBInput_1", true);
				end_Hash.put("tMongoDBInput_1", System.currentTimeMillis());

				/**
				 * [tMongoDBInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFlowMeter_11 end ] start
				 */

				currentComponent = "tFlowMeter_11";

				tFlowMeterCatcher_1.addMessage("out1", new Integer(
						count_tFlowMeter_11), "null", "", "tFlowMeter_11");

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("out1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFlowMeter_11", true);
				end_Hash.put("tFlowMeter_11", System.currentTimeMillis());

				/**
				 * [tFlowMeter_11 end ] stop
				 */

				/**
				 * [tExtractFields_1 end ] start
				 */

				currentComponent = "tExtractFields_1";

				globalMap.put("tExtractFields_1_NB_LINE",
						nb_line_tExtractFields_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tExtractFields_1", true);
				end_Hash.put("tExtractFields_1", System.currentTimeMillis());

				/**
				 * [tExtractFields_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row3 != null) {
					tHash_Lookup_row3.endGet();
				}
				globalMap.remove("tHash_Lookup_row3");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tFlowMeter_17 end ] start
				 */

				currentComponent = "tFlowMeter_17";

				tFlowMeterCatcher_1.addMessage("row10", new Integer(
						count_tFlowMeter_17), "null", "", "tFlowMeter_17");

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row10" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFlowMeter_17", true);
				end_Hash.put("tFlowMeter_17", System.currentTimeMillis());

				/**
				 * [tFlowMeter_17 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

				// ////
				// ////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

				/**
				 * [tMongoDBOutput_1_In end ] start
				 */

				currentVirtualComponent = "tMongoDBOutput_1";

				currentComponent = "tMongoDBOutput_1_In";

				if (nb_line_tMongoDBOutput_1_In > 0) {
					nestXMLTool_tMongoDBOutput_1_In
							.replaceDefaultNameSpace(doc_tMongoDBOutput_1_In
									.getRootElement());
					nestXMLTool_tMongoDBOutput_1_In
							.removeEmptyElement(doc_tMongoDBOutput_1_In
									.getRootElement());
					java.io.StringWriter strWriter_tMongoDBOutput_1_In = new java.io.StringWriter();
					org.dom4j.io.XMLWriter output_tMongoDBOutput_1_In = new org.dom4j.io.XMLWriter(
							strWriter_tMongoDBOutput_1_In,
							format_tMongoDBOutput_1_In);
					output_tMongoDBOutput_1_In.write(doc_tMongoDBOutput_1_In);
					output_tMongoDBOutput_1_In.close();
					listGroupby_tMongoDBOutput_1_In
							.add(strWriter_tMongoDBOutput_1_In.toString());

				}
				globalMap.put("tMongoDBOutput_1_In_NB_LINE",
						nb_line_tMongoDBOutput_1_In);
				globalMap.put("tMongoDBOutput_1_Out_FINISH"
						+ (listGroupby_tMongoDBOutput_1_In == null ? ""
								: listGroupby_tMongoDBOutput_1_In.hashCode()),
						"true");

				txf_tMongoDBOutput_1_In.join();
				if (txf_tMongoDBOutput_1_In.getLastException() != null) {
					currentComponent = txf_tMongoDBOutput_1_In
							.getCurrentComponent();
					throw txf_tMongoDBOutput_1_In.getLastException();
				}

				resourceMap.put("finish_tMongoDBOutput_1_In", true);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMongoDBOutput_1_In", true);
				end_Hash.put("tMongoDBOutput_1_In", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}

				/**
				 * [tMongoDBOutput_1_In end ] stop
				 */

			}// end the resume

			tFlowMeterCatcher_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row3");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row4");

			try {

				/**
				 * [tMongoDBInput_1 finally ] start
				 */

				currentComponent = "tMongoDBInput_1";

				/**
				 * [tMongoDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFlowMeter_11 finally ] start
				 */

				currentComponent = "tFlowMeter_11";

				/**
				 * [tFlowMeter_11 finally ] stop
				 */

				/**
				 * [tExtractFields_1 finally ] start
				 */

				currentComponent = "tExtractFields_1";

				/**
				 * [tExtractFields_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tFlowMeter_17 finally ] start
				 */

				currentComponent = "tFlowMeter_17";

				/**
				 * [tFlowMeter_17 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tMongoDBOutput_1_In finally ] start
				 */

				currentVirtualComponent = "tMongoDBOutput_1";

				currentComponent = "tMongoDBOutput_1_In";

				java.util.Queue listGroupby_tMongoDBOutput_1_In = (java.util.Queue) globalMap
						.get("queue_tMongoDBOutput_1_Out");
				if (resourceMap.get("finish_tMongoDBOutput_1_In") == null) {
					globalMap
							.put("tMongoDBOutput_1_Out_FINISH_WITH_EXCEPTION"
									+ (listGroupby_tMongoDBOutput_1_In == null ? ""
											: listGroupby_tMongoDBOutput_1_In
													.hashCode()), "true");
				}

				if (listGroupby_tMongoDBOutput_1_In != null) {
					globalMap
							.put("tMongoDBOutput_1_Out_FINISH"
									+ (listGroupby_tMongoDBOutput_1_In == null ? ""
											: listGroupby_tMongoDBOutput_1_In
													.hashCode()), "true");
				}

				/**
				 * [tMongoDBOutput_1_In finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];
		static byte[] commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String businessKey;

		public String getBusinessKey() {
			return this.businessKey;
		}

		public String geographyCode;

		public String getGeographyCode() {
			return this.geographyCode;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.businessKey == null) ? 0 : this.businessKey
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.businessKey == null) {
				if (other.businessKey != null)
					return false;

			} else if (!this.businessKey.equals(other.businessKey))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.id = this.id;
			other.businessKey = this.businessKey;
			other.geographyCode = this.geographyCode;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.businessKey = this.businessKey;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length == 0) {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE) {

				try {

					int length = 0;

					this.businessKey = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.businessKey, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = readInteger(dis, ois);

				this.geographyCode = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.id, dos, oos);

				writeString(this.geographyCode, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",businessKey=" + businessKey);
			sb.append(",geographyCode=" + geographyCode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.businessKey,
					other.businessKey);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tAdvancedHash_row3 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row3", false);
				start_Hash
						.put("tAdvancedHash_row3", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row3 = 0;

				class BytesLimit65535_tAdvancedHash_row3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row3().limitLog4jByte();

				// connection name:row3
				// source node:tDBInput_1 - inputs:(after_tMongoDBInput_1)
				// outputs:(row3,row3) | target node:tAdvancedHash_row3 -
				// inputs:(row3) outputs:()
				// linked node: tMap_2 - inputs:(row2,row3) outputs:(row10)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row3Struct> getLookup(matchingModeEnum_row3);

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedHash_row3 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				class BytesLimit65535_tDBInput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_1().limitLog4jByte();

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1
						.createStatement();

				String dbquery_tDBInput_1 = "SELECT DISTINCT\n	A.id,\n	substring(A.business_key, 1, 2) AS business_key,	\n	A.business_key AS geography_code\nFROM\n	hub_g"
						+ "eography A\n		INNER JOIN sat_geography B on B.hub_id = A.id\nWHERE\n	B.level=4 AND B.source = 'myanmar.master.geographyhier"
						+ "archy.servier'";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1
							.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1
							.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1
							.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row3.id = null;
						} else {

							if (rs_tDBInput_1.getObject(1) != null) {
								row3.id = rs_tDBInput_1.getInt(1);
							} else {
								row3.id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row3.businessKey = null;
						} else {

							row3.businessKey = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row3.geographyCode = null;
						} else {

							row3.geographyCode = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 3, false);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row3 main ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						row3Struct row3_HashRow = new row3Struct();

						row3_HashRow.id = row3.id;

						row3_HashRow.businessKey = row3.businessKey;

						row3_HashRow.geographyCode = row3.geographyCode;

						tHash_Lookup_row3.put(row3_HashRow);

						tos_count_tAdvancedHash_row3++;

						/**
						 * [tAdvancedHash_row3 main ] stop
						 */

						/**
						 * [tAdvancedHash_row3 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						/**
						 * [tAdvancedHash_row3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row3 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						/**
						 * [tAdvancedHash_row3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					stmt_tDBInput_1.close();

				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row3 end ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				tHash_Lookup_row3.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row3", true);
				end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row3 finally ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				/**
				 * [tAdvancedHash_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];
		static byte[] commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String hash;

		public String getHash() {
			return this.hash;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.hash == null) ? 0 : this.hash.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.hash == null) {
				if (other.hash != null)
					return false;

			} else if (!this.hash.equals(other.hash))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.hash = this.hash;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.hash = this.hash;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length == 0) {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE) {

				try {

					int length = 0;

					this.hash = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.hash, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("hash=" + hash);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.hash, other.hash);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash
						.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row4 = 0;

				class BytesLimit65535_tAdvancedHash_row4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row4().limitLog4jByte();

				// connection name:row4
				// source node:tDBInput_2 - inputs:(after_tMongoDBInput_1)
				// outputs:(row4,row4) | target node:tAdvancedHash_row4 -
				// inputs:(row4) outputs:()
				// linked node: tMap_1 - inputs:(row1,row4) outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct> getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				class BytesLimit65535_tDBInput_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_2().limitLog4jByte();

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2
						.createStatement();

				String dbquery_tDBInput_2 = "select distinct\n	hash\nfrom\n	"
						+ globalMap.get("HUB_TABLE") + " as a inner join "
						+ globalMap.get("SAT_TABLE")
						+ " as b on a.id=b.hub_id\nwhere\n	a.source='"
						+ context.getSOURCE() + "'";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2
							.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2
							.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2
							.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row4.hash = null;
						} else {

							row4.hash = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 1, false);
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 main ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						// row4
						// row4

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId,
									1, 1);
						}

						row4Struct row4_HashRow = new row4Struct();

						row4_HashRow.hash = row4.hash;

						tHash_Lookup_row4.put(row4_HashRow);

						tos_count_tAdvancedHash_row4++;

						/**
						 * [tAdvancedHash_row4 main ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					stmt_tDBInput_2.close();

				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				class BytesLimit65535_tPostjob_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tPostjob_1().limitLog4jByte();

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tMongoDBClose_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tMongoDBClose_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tMongoDBClose_1 begin ] start
				 */

				ok_Hash.put("tMongoDBClose_1", false);
				start_Hash.put("tMongoDBClose_1", System.currentTimeMillis());

				currentComponent = "tMongoDBClose_1";

				int tos_count_tMongoDBClose_1 = 0;

				class BytesLimit65535_tMongoDBClose_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMongoDBClose_1().limitLog4jByte();

				/**
				 * [tMongoDBClose_1 begin ] stop
				 */

				/**
				 * [tMongoDBClose_1 main ] start
				 */

				currentComponent = "tMongoDBClose_1";

				com.mongodb.Mongo mongo_tMongoDBClose_1 = (com.mongodb.Mongo) globalMap
						.get("mongo_tMongoDBConnection_1");
				if (mongo_tMongoDBClose_1 != null) {

					mongo_tMongoDBClose_1.close();

				}

				tos_count_tMongoDBClose_1++;

				/**
				 * [tMongoDBClose_1 main ] stop
				 */

				/**
				 * [tMongoDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tMongoDBClose_1";

				/**
				 * [tMongoDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tMongoDBClose_1 process_data_end ] start
				 */

				currentComponent = "tMongoDBClose_1";

				/**
				 * [tMongoDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tMongoDBClose_1 end ] start
				 */

				currentComponent = "tMongoDBClose_1";

				ok_Hash.put("tMongoDBClose_1", true);
				end_Hash.put("tMongoDBClose_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tDBClose_1Process(globalMap);

				/**
				 * [tMongoDBClose_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMongoDBClose_1 finally ] start
				 */

				currentComponent = "tMongoDBClose_1";

				/**
				 * [tMongoDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tDBClose_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_1 begin ] start
				 */

				ok_Hash.put("tDBClose_1", false);
				start_Hash.put("tDBClose_1", System.currentTimeMillis());

				currentComponent = "tDBClose_1";

				int tos_count_tDBClose_1 = 0;

				class BytesLimit65535_tDBClose_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBClose_1().limitLog4jByte();

				/**
				 * [tDBClose_1 begin ] stop
				 */

				/**
				 * [tDBClose_1 main ] start
				 */

				currentComponent = "tDBClose_1";

				java.sql.Connection conn_tDBClose_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");
				if (conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed()) {
					conn_tDBClose_1.close();
				}

				tos_count_tDBClose_1++;

				/**
				 * [tDBClose_1 main ] stop
				 */

				/**
				 * [tDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_1 process_data_end ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tDBClose_1 end ] start
				 */

				currentComponent = "tDBClose_1";

				ok_Hash.put("tDBClose_1", true);
				end_Hash.put("tDBClose_1", System.currentTimeMillis());

				/**
				 * [tDBClose_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_1 finally ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				class BytesLimit65535_tPrejob_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tPrejob_1().limitLog4jByte();

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tMongoDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tMongoDBConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tMongoDBConnection_1 begin ] start
				 */

				ok_Hash.put("tMongoDBConnection_1", false);
				start_Hash.put("tMongoDBConnection_1",
						System.currentTimeMillis());

				currentComponent = "tMongoDBConnection_1";

				int tos_count_tMongoDBConnection_1 = 0;

				class BytesLimit65535_tMongoDBConnection_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMongoDBConnection_1().limitLog4jByte();

				java.util.logging.Logger.getLogger("org.mongodb.driver")
						.setLevel(java.util.logging.Level.SEVERE);
				// Empty client options
				com.mongodb.MongoClientOptions clientOptions_tMongoDBConnection_1 = new com.mongodb.MongoClientOptions.Builder()
						.build();

				// Empty client credentials list
				java.util.List<com.mongodb.MongoCredential> mongoCredentialList_tMongoDBConnection_1 = new java.util.ArrayList<com.mongodb.MongoCredential>();

				com.mongodb.ServerAddress serverAddress_tMongoDBConnection_1 = new com.mongodb.ServerAddress(
						context.getMONGODB_HOSTNAME(), 27017);
				com.mongodb.Mongo mongo_tMongoDBConnection_1 = new com.mongodb.MongoClient(
						serverAddress_tMongoDBConnection_1,
						mongoCredentialList_tMongoDBConnection_1,
						clientOptions_tMongoDBConnection_1);

				mongo_tMongoDBConnection_1.getAddress();
				com.mongodb.client.MongoDatabase db_tMongoDBConnection_1 = ((com.mongodb.MongoClient) mongo_tMongoDBConnection_1)
						.getDatabase("DEEPSEA");

				globalMap.put("mongo_tMongoDBConnection_1",
						mongo_tMongoDBConnection_1);
				globalMap.put("db_tMongoDBConnection_1",
						db_tMongoDBConnection_1);

				/**
				 * [tMongoDBConnection_1 begin ] stop
				 */

				/**
				 * [tMongoDBConnection_1 main ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				tos_count_tMongoDBConnection_1++;

				/**
				 * [tMongoDBConnection_1 main ] stop
				 */

				/**
				 * [tMongoDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				/**
				 * [tMongoDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tMongoDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				/**
				 * [tMongoDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tMongoDBConnection_1 end ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				ok_Hash.put("tMongoDBConnection_1", true);
				end_Hash.put("tMongoDBConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tMongoDBConnection_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMongoDBConnection_1 finally ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				/**
				 * [tMongoDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				class BytesLimit65535_tDBConnection_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBConnection_1().limitLog4jByte();

				String url_tDBConnection_1 = "jdbc:postgresql://"
						+ context.getPOSTGRES_HOSTNAME() + ":" + "5432" + "/"
						+ "deepsea";

				String dbUser_tDBConnection_1 = "postgres";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("8f24fd5aa89bb403f4f7aba1746784ea");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 = java.sql.DriverManager
						.getDrivers();
				while (drivers_tDBConnection_1.hasMoreElements()) {
					java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1
							.nextElement();
					java.util.List<String> driverList_tDBConnection_1 = java.util.Arrays
							.<String> asList("com.amazon.redshift.jdbc.Driver",
									"com.amazon.redshift.jdbc41.Driver");
					if (driverList_tDBConnection_1.contains(d_tDBConnection_1
							.getClass().getName())) {
						try {
							java.sql.DriverManager
									.deregisterDriver(d_tDBConnection_1);
							java.sql.DriverManager
									.registerDriver(d_tDBConnection_1);
						} catch (java.lang.Exception e_tDBConnection_1) {
							// do nothing
						}
					}
				}
				String driverClass_tDBConnection_1 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(
						url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tDBConnection_1", "");

				globalMap
						.put("conn_" + "tDBConnection_1", conn_tDBConnection_1);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tSetGlobalVar_1Process(globalMap);

				/**
				 * [tDBConnection_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tSetGlobalVar_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tSetGlobalVar_1 begin ] start
				 */

				ok_Hash.put("tSetGlobalVar_1", false);
				start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				currentComponent = "tSetGlobalVar_1";

				int tos_count_tSetGlobalVar_1 = 0;

				class BytesLimit65535_tSetGlobalVar_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tSetGlobalVar_1().limitLog4jByte();

				/**
				 * [tSetGlobalVar_1 begin ] stop
				 */

				/**
				 * [tSetGlobalVar_1 main ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				globalMap.put("HUB_TABLE", "hub_" + context.getTABLE());
				globalMap.put("SAT_TABLE", "sat_" + context.getTABLE());

				tos_count_tSetGlobalVar_1++;

				/**
				 * [tSetGlobalVar_1 main ] stop
				 */

				/**
				 * [tSetGlobalVar_1 process_data_begin ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 process_data_begin ] stop
				 */

				/**
				 * [tSetGlobalVar_1 process_data_end ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 process_data_end ] stop
				 */

				/**
				 * [tSetGlobalVar_1 end ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				ok_Hash.put("tSetGlobalVar_1", true);
				end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tMongoDBInput_2Process(globalMap);

				/**
				 * [tSetGlobalVar_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tSetGlobalVar_1 finally ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];
		static byte[] commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length == 0) {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE) {

				try {

					int length = 0;

					this.id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMongoDBInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();

				/**
				 * [tSetGlobalVar_2 begin ] start
				 */

				ok_Hash.put("tSetGlobalVar_2", false);
				start_Hash.put("tSetGlobalVar_2", System.currentTimeMillis());

				currentComponent = "tSetGlobalVar_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row11" + iterateId, 0,
								0);

					}
				}

				int tos_count_tSetGlobalVar_2 = 0;

				class BytesLimit65535_tSetGlobalVar_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tSetGlobalVar_2().limitLog4jByte();

				/**
				 * [tSetGlobalVar_2 begin ] stop
				 */

				/**
				 * [tMongoDBInput_2 begin ] start
				 */

				ok_Hash.put("tMongoDBInput_2", false);
				start_Hash.put("tMongoDBInput_2", System.currentTimeMillis());

				currentComponent = "tMongoDBInput_2";

				int tos_count_tMongoDBInput_2 = 0;

				class BytesLimit65535_tMongoDBInput_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMongoDBInput_2().limitLog4jByte();

				int nb_line_tMongoDBInput_2 = 0;

				com.mongodb.MongoClient mongo_tMongoDBInput_2 = null;
				com.mongodb.client.MongoDatabase db_tMongoDBInput_2 = null;

				mongo_tMongoDBInput_2 = (com.mongodb.MongoClient) globalMap
						.get("mongo_tMongoDBConnection_1");
				db_tMongoDBInput_2 = (com.mongodb.client.MongoDatabase) globalMap
						.get("db_tMongoDBConnection_1");

				com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBInput_2 = db_tMongoDBInput_2
						.getCollection("countries");

				try {
					// Add warning if an index is not in the query.
					boolean needIndexWarning = true;
					String indexList = "";

					for (com.mongodb.DBObject index : coll_tMongoDBInput_2
							.listIndexes(com.mongodb.DBObject.class)) {

						for (String key : ((com.mongodb.DBObject) index
								.get("key")).keySet()) {
							// The regexp is:
							// - contain the db DBcolumnName between two
							// backslashed quotes
							// - is followed at some point by a colon
							// - there is no comma between the the DBcolumnName
							// and the colon
							if (("{'name': '" + context.getCOUNTRY() + "'}, {'_id':1}")
									.matches(".*" + key + "[^,]*:.*")) {
								// We have an index, do not print error message
								needIndexWarning = false;
							} else {
								// This index is not in the query, add it into
								// the indexList
								indexList += ", " + key;
							}
						}
					}
					if ((!"".equals(indexList)) && (needIndexWarning)) {

						System.err
								.println("tMongoDBInput_2 - The query does not contain any reference an index.  ["
										+ indexList.substring(1) + " ]");

					}
				} catch (com.mongodb.MongoException e) {
					// caught an exception after issuing the getIndexInfo()
					// don't fail the whole job
					// maybe due to authorization
				}

				org.bson.Document myQuery_tMongoDBInput_2 = org.bson.Document
						.parse("{'name': '" + context.getCOUNTRY()
								+ "'}, {'_id':1}");
				com.mongodb.client.FindIterable<org.bson.Document> fi_tMongoDBInput_2 = coll_tMongoDBInput_2
						.find(myQuery_tMongoDBInput_2).noCursorTimeout(false);

				class DBObjectInputUtil_tMongoDBInput_2 {
					// Get the node value in embedded document,
					// If have no embedded document get root document node.

					public Object getValue(String parentNode,
							String currentName, org.bson.Document dbObject) {
						Object value = null;
						if (dbObject == null) {
							return null;
						}
						if (parentNode == null || "".equals(parentNode)) {
							if ("*".equals(currentName)) {
								value = dbObject;
							} else if (dbObject.get(currentName) != null) {
								value = dbObject.get(currentName);
							}
						} else {
							String objNames[] = objNames = parentNode
									.split("\\.");
							org.bson.Document currentObj = dbObject;
							for (int i = 0; i < objNames.length; i++) {
								currentObj = (org.bson.Document) currentObj
										.get(objNames[i]);
								if (currentObj == null) {
									break;
								}
							}
							if ("*".equals(currentName)) {
								value = currentObj;
							} else if (currentObj != null) {
								value = currentObj.get(currentName);
							}
						}
						return value;
					}
				}
				DBObjectInputUtil_tMongoDBInput_2 dbObjectInputUtil_tMongoDBInput_2 = new DBObjectInputUtil_tMongoDBInput_2();
				java.util.Map<String, String> pathMap_tMongoDBInput_2 = new java.util.HashMap<String, String>();
				pathMap_tMongoDBInput_2.put("id", "");

				com.mongodb.BasicDBObject orderBy_tMongoDBInput_2 = new com.mongodb.BasicDBObject();

				orderBy_tMongoDBInput_2.put("num", 1);

				fi_tMongoDBInput_2.sort(orderBy_tMongoDBInput_2);

				com.mongodb.client.MongoCursor<org.bson.Document> cursor_tMongoDBInput_2 = fi_tMongoDBInput_2
						.iterator();

				while (cursor_tMongoDBInput_2.hasNext()) {
					org.bson.Document o_tMongoDBInput_2 = cursor_tMongoDBInput_2
							.next();
					nb_line_tMongoDBInput_2++;
					Object valueObj_tMongoDBInput_2 = null;
					valueObj_tMongoDBInput_2 = dbObjectInputUtil_tMongoDBInput_2
							.getValue(pathMap_tMongoDBInput_2.get("id"), "_id",
									o_tMongoDBInput_2);
					if (valueObj_tMongoDBInput_2 != null
							&& valueObj_tMongoDBInput_2.toString().length() > 0) {
						row11.id = valueObj_tMongoDBInput_2.toString();
					} else {
						row11.id = null;
					}

					/**
					 * [tMongoDBInput_2 begin ] stop
					 */

					/**
					 * [tMongoDBInput_2 main ] start
					 */

					currentComponent = "tMongoDBInput_2";

					tos_count_tMongoDBInput_2++;

					/**
					 * [tMongoDBInput_2 main ] stop
					 */

					/**
					 * [tMongoDBInput_2 process_data_begin ] start
					 */

					currentComponent = "tMongoDBInput_2";

					/**
					 * [tMongoDBInput_2 process_data_begin ] stop
					 */

					/**
					 * [tSetGlobalVar_2 main ] start
					 */

					currentComponent = "tSetGlobalVar_2";

					// row11
					// row11

					if (execStat) {
						runStat.updateStatOnConnection("row11" + iterateId, 1,
								1);
					}

					globalMap.put("COUNTRY_ID", row11.id);

					tos_count_tSetGlobalVar_2++;

					/**
					 * [tSetGlobalVar_2 main ] stop
					 */

					/**
					 * [tSetGlobalVar_2 process_data_begin ] start
					 */

					currentComponent = "tSetGlobalVar_2";

					/**
					 * [tSetGlobalVar_2 process_data_begin ] stop
					 */

					/**
					 * [tSetGlobalVar_2 process_data_end ] start
					 */

					currentComponent = "tSetGlobalVar_2";

					/**
					 * [tSetGlobalVar_2 process_data_end ] stop
					 */

					/**
					 * [tMongoDBInput_2 process_data_end ] start
					 */

					currentComponent = "tMongoDBInput_2";

					/**
					 * [tMongoDBInput_2 process_data_end ] stop
					 */

					/**
					 * [tMongoDBInput_2 end ] start
					 */

					currentComponent = "tMongoDBInput_2";

				}

				globalMap.put("tMongoDBInput_2_NB_LINE",
						nb_line_tMongoDBInput_2);

				ok_Hash.put("tMongoDBInput_2", true);
				end_Hash.put("tMongoDBInput_2", System.currentTimeMillis());

				/**
				 * [tMongoDBInput_2 end ] stop
				 */

				/**
				 * [tSetGlobalVar_2 end ] start
				 */

				currentComponent = "tSetGlobalVar_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row11" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tSetGlobalVar_2", true);
				end_Hash.put("tSetGlobalVar_2", System.currentTimeMillis());

				/**
				 * [tSetGlobalVar_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tMongoDBInput_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tMongoDBInput_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMongoDBInput_2 finally ] start
				 */

				currentComponent = "tMongoDBInput_2";

				/**
				 * [tMongoDBInput_2 finally ] stop
				 */

				/**
				 * [tSetGlobalVar_2 finally ] start
				 */

				currentComponent = "tSetGlobalVar_2";

				/**
				 * [tSetGlobalVar_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];
		static byte[] commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length == 0) {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE) {

				try {

					int length = 0;

					this.id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMongoDBInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();

				/**
				 * [tSetGlobalVar_3 begin ] start
				 */

				ok_Hash.put("tSetGlobalVar_3", false);
				start_Hash.put("tSetGlobalVar_3", System.currentTimeMillis());

				currentComponent = "tSetGlobalVar_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row12" + iterateId, 0,
								0);

					}
				}

				int tos_count_tSetGlobalVar_3 = 0;

				class BytesLimit65535_tSetGlobalVar_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tSetGlobalVar_3().limitLog4jByte();

				/**
				 * [tSetGlobalVar_3 begin ] stop
				 */

				/**
				 * [tMongoDBInput_3 begin ] start
				 */

				ok_Hash.put("tMongoDBInput_3", false);
				start_Hash.put("tMongoDBInput_3", System.currentTimeMillis());

				currentComponent = "tMongoDBInput_3";

				int tos_count_tMongoDBInput_3 = 0;

				class BytesLimit65535_tMongoDBInput_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMongoDBInput_3().limitLog4jByte();

				int nb_line_tMongoDBInput_3 = 0;

				com.mongodb.MongoClient mongo_tMongoDBInput_3 = null;
				com.mongodb.client.MongoDatabase db_tMongoDBInput_3 = null;

				mongo_tMongoDBInput_3 = (com.mongodb.MongoClient) globalMap
						.get("mongo_tMongoDBConnection_1");
				db_tMongoDBInput_3 = (com.mongodb.client.MongoDatabase) globalMap
						.get("db_tMongoDBConnection_1");

				com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBInput_3 = db_tMongoDBInput_3
						.getCollection("collections");

				try {
					// Add warning if an index is not in the query.
					boolean needIndexWarning = true;
					String indexList = "";

					for (com.mongodb.DBObject index : coll_tMongoDBInput_3
							.listIndexes(com.mongodb.DBObject.class)) {

						for (String key : ((com.mongodb.DBObject) index
								.get("key")).keySet()) {
							// The regexp is:
							// - contain the db DBcolumnName between two
							// backslashed quotes
							// - is followed at some point by a colon
							// - there is no comma between the the DBcolumnName
							// and the colon
							if (("{'name': '" + context.getCOLLECTION() + "'}, {'_id':1}")
									.matches(".*" + key + "[^,]*:.*")) {
								// We have an index, do not print error message
								needIndexWarning = false;
							} else {
								// This index is not in the query, add it into
								// the indexList
								indexList += ", " + key;
							}
						}
					}
					if ((!"".equals(indexList)) && (needIndexWarning)) {

						System.err
								.println("tMongoDBInput_3 - The query does not contain any reference an index.  ["
										+ indexList.substring(1) + " ]");

					}
				} catch (com.mongodb.MongoException e) {
					// caught an exception after issuing the getIndexInfo()
					// don't fail the whole job
					// maybe due to authorization
				}

				org.bson.Document myQuery_tMongoDBInput_3 = org.bson.Document
						.parse("{'name': '" + context.getCOLLECTION()
								+ "'}, {'_id':1}");
				com.mongodb.client.FindIterable<org.bson.Document> fi_tMongoDBInput_3 = coll_tMongoDBInput_3
						.find(myQuery_tMongoDBInput_3).noCursorTimeout(false);

				class DBObjectInputUtil_tMongoDBInput_3 {
					// Get the node value in embedded document,
					// If have no embedded document get root document node.

					public Object getValue(String parentNode,
							String currentName, org.bson.Document dbObject) {
						Object value = null;
						if (dbObject == null) {
							return null;
						}
						if (parentNode == null || "".equals(parentNode)) {
							if ("*".equals(currentName)) {
								value = dbObject;
							} else if (dbObject.get(currentName) != null) {
								value = dbObject.get(currentName);
							}
						} else {
							String objNames[] = objNames = parentNode
									.split("\\.");
							org.bson.Document currentObj = dbObject;
							for (int i = 0; i < objNames.length; i++) {
								currentObj = (org.bson.Document) currentObj
										.get(objNames[i]);
								if (currentObj == null) {
									break;
								}
							}
							if ("*".equals(currentName)) {
								value = currentObj;
							} else if (currentObj != null) {
								value = currentObj.get(currentName);
							}
						}
						return value;
					}
				}
				DBObjectInputUtil_tMongoDBInput_3 dbObjectInputUtil_tMongoDBInput_3 = new DBObjectInputUtil_tMongoDBInput_3();
				java.util.Map<String, String> pathMap_tMongoDBInput_3 = new java.util.HashMap<String, String>();
				pathMap_tMongoDBInput_3.put("id", "");

				com.mongodb.BasicDBObject orderBy_tMongoDBInput_3 = new com.mongodb.BasicDBObject();

				orderBy_tMongoDBInput_3.put("num", 1);

				fi_tMongoDBInput_3.sort(orderBy_tMongoDBInput_3);

				com.mongodb.client.MongoCursor<org.bson.Document> cursor_tMongoDBInput_3 = fi_tMongoDBInput_3
						.iterator();

				while (cursor_tMongoDBInput_3.hasNext()) {
					org.bson.Document o_tMongoDBInput_3 = cursor_tMongoDBInput_3
							.next();
					nb_line_tMongoDBInput_3++;
					Object valueObj_tMongoDBInput_3 = null;
					valueObj_tMongoDBInput_3 = dbObjectInputUtil_tMongoDBInput_3
							.getValue(pathMap_tMongoDBInput_3.get("id"), "_id",
									o_tMongoDBInput_3);
					if (valueObj_tMongoDBInput_3 != null
							&& valueObj_tMongoDBInput_3.toString().length() > 0) {
						row12.id = valueObj_tMongoDBInput_3.toString();
					} else {
						row12.id = null;
					}

					/**
					 * [tMongoDBInput_3 begin ] stop
					 */

					/**
					 * [tMongoDBInput_3 main ] start
					 */

					currentComponent = "tMongoDBInput_3";

					tos_count_tMongoDBInput_3++;

					/**
					 * [tMongoDBInput_3 main ] stop
					 */

					/**
					 * [tMongoDBInput_3 process_data_begin ] start
					 */

					currentComponent = "tMongoDBInput_3";

					/**
					 * [tMongoDBInput_3 process_data_begin ] stop
					 */

					/**
					 * [tSetGlobalVar_3 main ] start
					 */

					currentComponent = "tSetGlobalVar_3";

					// row12
					// row12

					if (execStat) {
						runStat.updateStatOnConnection("row12" + iterateId, 1,
								1);
					}

					globalMap.put("COLLECTION_ID", row12.id);

					tos_count_tSetGlobalVar_3++;

					/**
					 * [tSetGlobalVar_3 main ] stop
					 */

					/**
					 * [tSetGlobalVar_3 process_data_begin ] start
					 */

					currentComponent = "tSetGlobalVar_3";

					/**
					 * [tSetGlobalVar_3 process_data_begin ] stop
					 */

					/**
					 * [tSetGlobalVar_3 process_data_end ] start
					 */

					currentComponent = "tSetGlobalVar_3";

					/**
					 * [tSetGlobalVar_3 process_data_end ] stop
					 */

					/**
					 * [tMongoDBInput_3 process_data_end ] start
					 */

					currentComponent = "tMongoDBInput_3";

					/**
					 * [tMongoDBInput_3 process_data_end ] stop
					 */

					/**
					 * [tMongoDBInput_3 end ] start
					 */

					currentComponent = "tMongoDBInput_3";

				}

				globalMap.put("tMongoDBInput_3_NB_LINE",
						nb_line_tMongoDBInput_3);

				ok_Hash.put("tMongoDBInput_3", true);
				end_Hash.put("tMongoDBInput_3", System.currentTimeMillis());

				/**
				 * [tMongoDBInput_3 end ] stop
				 */

				/**
				 * [tSetGlobalVar_3 end ] start
				 */

				currentComponent = "tSetGlobalVar_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row12" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tSetGlobalVar_3", true);
				end_Hash.put("tSetGlobalVar_3", System.currentTimeMillis());

				/**
				 * [tSetGlobalVar_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tMongoDBInput_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tMongoDBInput_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMongoDBInput_3 finally ] start
				 */

				currentComponent = "tMongoDBInput_3";

				/**
				 * [tMongoDBInput_3 finally ] stop
				 */

				/**
				 * [tSetGlobalVar_3 finally ] start
				 */

				currentComponent = "tSetGlobalVar_3";

				/**
				 * [tSetGlobalVar_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];
		static byte[] commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE.length == 0) {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_GENERATE_GEOGRAPHY_CODE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_GENERATE_GEOGRAPHY_CODE) {

				try {

					int length = 0;

					this.id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMongoDBInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row16Struct row16 = new row16Struct();

				/**
				 * [tSetGlobalVar_4 begin ] start
				 */

				ok_Hash.put("tSetGlobalVar_4", false);
				start_Hash.put("tSetGlobalVar_4", System.currentTimeMillis());

				currentComponent = "tSetGlobalVar_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row16" + iterateId, 0,
								0);

					}
				}

				int tos_count_tSetGlobalVar_4 = 0;

				class BytesLimit65535_tSetGlobalVar_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tSetGlobalVar_4().limitLog4jByte();

				/**
				 * [tSetGlobalVar_4 begin ] stop
				 */

				/**
				 * [tMongoDBInput_4 begin ] start
				 */

				ok_Hash.put("tMongoDBInput_4", false);
				start_Hash.put("tMongoDBInput_4", System.currentTimeMillis());

				currentComponent = "tMongoDBInput_4";

				int tos_count_tMongoDBInput_4 = 0;

				class BytesLimit65535_tMongoDBInput_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMongoDBInput_4().limitLog4jByte();

				int nb_line_tMongoDBInput_4 = 0;

				com.mongodb.MongoClient mongo_tMongoDBInput_4 = null;
				com.mongodb.client.MongoDatabase db_tMongoDBInput_4 = null;

				mongo_tMongoDBInput_4 = (com.mongodb.MongoClient) globalMap
						.get("mongo_tMongoDBConnection_1");
				db_tMongoDBInput_4 = (com.mongodb.client.MongoDatabase) globalMap
						.get("db_tMongoDBConnection_1");

				com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBInput_4 = db_tMongoDBInput_4
						.getCollection("webjobs");

				try {
					// Add warning if an index is not in the query.
					boolean needIndexWarning = true;
					String indexList = "";

					for (com.mongodb.DBObject index : coll_tMongoDBInput_4
							.listIndexes(com.mongodb.DBObject.class)) {

						for (String key : ((com.mongodb.DBObject) index
								.get("key")).keySet()) {
							// The regexp is:
							// - contain the db DBcolumnName between two
							// backslashed quotes
							// - is followed at some point by a colon
							// - there is no comma between the the DBcolumnName
							// and the colon
							if (("{'name': '" + context.getWEBJOB_NAME() + "'}, {'_id':1}")
									.matches(".*" + key + "[^,]*:.*")) {
								// We have an index, do not print error message
								needIndexWarning = false;
							} else {
								// This index is not in the query, add it into
								// the indexList
								indexList += ", " + key;
							}
						}
					}
					if ((!"".equals(indexList)) && (needIndexWarning)) {

						System.err
								.println("tMongoDBInput_4 - The query does not contain any reference an index.  ["
										+ indexList.substring(1) + " ]");

					}
				} catch (com.mongodb.MongoException e) {
					// caught an exception after issuing the getIndexInfo()
					// don't fail the whole job
					// maybe due to authorization
				}

				org.bson.Document myQuery_tMongoDBInput_4 = org.bson.Document
						.parse("{'name': '" + context.getWEBJOB_NAME()
								+ "'}, {'_id':1}");
				com.mongodb.client.FindIterable<org.bson.Document> fi_tMongoDBInput_4 = coll_tMongoDBInput_4
						.find(myQuery_tMongoDBInput_4).noCursorTimeout(false);

				class DBObjectInputUtil_tMongoDBInput_4 {
					// Get the node value in embedded document,
					// If have no embedded document get root document node.

					public Object getValue(String parentNode,
							String currentName, org.bson.Document dbObject) {
						Object value = null;
						if (dbObject == null) {
							return null;
						}
						if (parentNode == null || "".equals(parentNode)) {
							if ("*".equals(currentName)) {
								value = dbObject;
							} else if (dbObject.get(currentName) != null) {
								value = dbObject.get(currentName);
							}
						} else {
							String objNames[] = objNames = parentNode
									.split("\\.");
							org.bson.Document currentObj = dbObject;
							for (int i = 0; i < objNames.length; i++) {
								currentObj = (org.bson.Document) currentObj
										.get(objNames[i]);
								if (currentObj == null) {
									break;
								}
							}
							if ("*".equals(currentName)) {
								value = currentObj;
							} else if (currentObj != null) {
								value = currentObj.get(currentName);
							}
						}
						return value;
					}
				}
				DBObjectInputUtil_tMongoDBInput_4 dbObjectInputUtil_tMongoDBInput_4 = new DBObjectInputUtil_tMongoDBInput_4();
				java.util.Map<String, String> pathMap_tMongoDBInput_4 = new java.util.HashMap<String, String>();
				pathMap_tMongoDBInput_4.put("id", "");

				com.mongodb.client.MongoCursor<org.bson.Document> cursor_tMongoDBInput_4 = fi_tMongoDBInput_4
						.iterator();

				while (cursor_tMongoDBInput_4.hasNext()) {
					org.bson.Document o_tMongoDBInput_4 = cursor_tMongoDBInput_4
							.next();
					nb_line_tMongoDBInput_4++;
					Object valueObj_tMongoDBInput_4 = null;
					valueObj_tMongoDBInput_4 = dbObjectInputUtil_tMongoDBInput_4
							.getValue(pathMap_tMongoDBInput_4.get("id"), "_id",
									o_tMongoDBInput_4);
					if (valueObj_tMongoDBInput_4 != null
							&& valueObj_tMongoDBInput_4.toString().length() > 0) {
						row16.id = valueObj_tMongoDBInput_4.toString();
					} else {
						row16.id = null;
					}

					/**
					 * [tMongoDBInput_4 begin ] stop
					 */

					/**
					 * [tMongoDBInput_4 main ] start
					 */

					currentComponent = "tMongoDBInput_4";

					tos_count_tMongoDBInput_4++;

					/**
					 * [tMongoDBInput_4 main ] stop
					 */

					/**
					 * [tMongoDBInput_4 process_data_begin ] start
					 */

					currentComponent = "tMongoDBInput_4";

					/**
					 * [tMongoDBInput_4 process_data_begin ] stop
					 */

					/**
					 * [tSetGlobalVar_4 main ] start
					 */

					currentComponent = "tSetGlobalVar_4";

					// row16
					// row16

					if (execStat) {
						runStat.updateStatOnConnection("row16" + iterateId, 1,
								1);
					}

					globalMap.put("WEBJOB_ID", row16.id);

					tos_count_tSetGlobalVar_4++;

					/**
					 * [tSetGlobalVar_4 main ] stop
					 */

					/**
					 * [tSetGlobalVar_4 process_data_begin ] start
					 */

					currentComponent = "tSetGlobalVar_4";

					/**
					 * [tSetGlobalVar_4 process_data_begin ] stop
					 */

					/**
					 * [tSetGlobalVar_4 process_data_end ] start
					 */

					currentComponent = "tSetGlobalVar_4";

					/**
					 * [tSetGlobalVar_4 process_data_end ] stop
					 */

					/**
					 * [tMongoDBInput_4 process_data_end ] start
					 */

					currentComponent = "tMongoDBInput_4";

					/**
					 * [tMongoDBInput_4 process_data_end ] stop
					 */

					/**
					 * [tMongoDBInput_4 end ] start
					 */

					currentComponent = "tMongoDBInput_4";

				}

				globalMap.put("tMongoDBInput_4_NB_LINE",
						nb_line_tMongoDBInput_4);

				ok_Hash.put("tMongoDBInput_4", true);
				end_Hash.put("tMongoDBInput_4", System.currentTimeMillis());

				/**
				 * [tMongoDBInput_4 end ] stop
				 */

				/**
				 * [tSetGlobalVar_4 end ] start
				 */

				currentComponent = "tSetGlobalVar_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row16" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tSetGlobalVar_4", true);
				end_Hash.put("tSetGlobalVar_4", System.currentTimeMillis());

				/**
				 * [tSetGlobalVar_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMongoDBInput_4 finally ] start
				 */

				currentComponent = "tMongoDBInput_4";

				/**
				 * [tMongoDBInput_4 finally ] stop
				 */

				/**
				 * [tSetGlobalVar_4 finally ] start
				 */

				currentComponent = "tSetGlobalVar_4";

				/**
				 * [tSetGlobalVar_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBInput_4_SUBPROCESS_STATE", 1);
	}

	public void tMongoDBOutput_1_OutProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBOutput_1_Out_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tMongoDBOutput_1_Out begin ] start
				 */

				ok_Hash.put("tMongoDBOutput_1_Out", false);
				start_Hash.put("tMongoDBOutput_1_Out",
						System.currentTimeMillis());

				currentVirtualComponent = "tMongoDBOutput_1";

				currentComponent = "tMongoDBOutput_1_Out";

				int tos_count_tMongoDBOutput_1_Out = 0;

				class BytesLimit65535_tMongoDBOutput_1_Out {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMongoDBOutput_1_Out().limitLog4jByte();

				int nb_line_tMongoDBOutput_1_Out = 0;

				com.mongodb.MongoClient mongo_tMongoDBOutput_1_Out = null;
				com.mongodb.client.MongoDatabase db_tMongoDBOutput_1_Out = null;

				mongo_tMongoDBOutput_1_Out = (com.mongodb.MongoClient) globalMap
						.get("mongo_tMongoDBConnection_1");
				db_tMongoDBOutput_1_Out = (com.mongodb.client.MongoDatabase) globalMap
						.get("db_tMongoDBConnection_1");

				com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBOutput_1_Out = db_tMongoDBOutput_1_Out
						.getCollection("test.talend");

				net.sf.json.xml.XMLSerializer xmlSerializer_tMongoDBOutput_1_Out = new net.sf.json.xml.XMLSerializer();
				xmlSerializer_tMongoDBOutput_1_Out.clearNamespaces();
				xmlSerializer_tMongoDBOutput_1_Out.setSkipNamespaces(true);
				xmlSerializer_tMongoDBOutput_1_Out
						.setForceTopLevelObject(false);

				java.util.Queue<String> queue_tMongoDBOutput_1_Out = (java.util.Queue<String>) globalMap
						.get("queue_tMongoDBOutput_1_Out");

				String readFinishMarkWithPipeId_tMongoDBOutput_1_Out = "tMongoDBOutput_1_Out_FINISH"
						+ (queue_tMongoDBOutput_1_Out == null ? ""
								: queue_tMongoDBOutput_1_Out.hashCode());
				String str_tMongoDBOutput_1_Out = null;

				/**
				 * Convert Date and Byte array in mongo DB format
				 *
				 */
				class MongoDBTreeConverter_tMongoDBOutput_1_Out {

					/**
					 * header method to ease javajet implementation.
					 **/
					public void processTree(Object currentElement,
							String[] path, String pattern) {
						if (currentElement instanceof org.bson.Document) {
							// Start index at 1, in order to remove the first
							// unwanted or empty string.
							processTree((org.bson.Document) currentElement,
									path, 1, pattern);
						} else if (currentElement instanceof com.mongodb.BasicDBList) {
							// Start index at 1, in order to remove the first
							// unwanted or empty string.
							processTree(
									(com.mongodb.BasicDBList) currentElement,
									path, 1, pattern);
						}
					}

					public void processTree(org.bson.Document currentElement,
							String[] path, int index, String pattern) {
						if (index < path.length - 1) {
							Object nextElement = currentElement
									.get(path[index]);
							if (nextElement instanceof org.bson.Document) {
								processTree((org.bson.Document) nextElement,
										path, index + 1, pattern);
							} else if (nextElement instanceof com.mongodb.BasicDBList) {
								processTree(
										(com.mongodb.BasicDBList) nextElement,
										path, index + 1, pattern);
							} else if (nextElement == null && index > 0) {
								// some loop are not reported by the XML tree
								nextElement = currentElement
										.get(path[index - 1]);
								if (nextElement != null) {
									if (nextElement instanceof org.bson.Document) {
										processTree(
												(org.bson.Document) nextElement,
												path, index, pattern);
									} else if (nextElement instanceof com.mongodb.BasicDBList) {
										processTree(
												(com.mongodb.BasicDBList) nextElement,
												path, index, pattern);
									}
								}
							}
						} else {
							// process leaf
							if (currentElement.get(path[path.length - 1]) instanceof com.mongodb.BasicDBList) {
								// if the leaf is a list
								com.mongodb.BasicDBList finalObjects = (com.mongodb.BasicDBList) currentElement
										.get(path[path.length - 1]);
								com.mongodb.BasicDBList convertedElements = new com.mongodb.BasicDBList();
								for (Object finalObject : finalObjects) {
									if (pattern == null) {
										// no pattern, we want to parse to a
										// byte array.
										if (finalObject != null) {
											convertedElements
													.add(((String) finalObject)
															.getBytes());
										}
									} else {
										if (finalObject != null) {
											convertedElements
													.add(ParserUtils
															.parseTo_Date(
																	(String) finalObject,
																	pattern));
										}
									}
								}
								finalObjects.clear();
								finalObjects.addAll(convertedElements);
							} else {
								if (pattern == null) {
									// no pattern, we want to parse to a byte
									// array.
									if (currentElement
											.get(path[path.length - 1]) != null) {
										currentElement
												.put(path[path.length - 1],
														((String) currentElement
																.get(path[path.length - 1]))
																.getBytes());
									}
								} else {
									if (currentElement
											.get(path[path.length - 1]) != null) {
										currentElement
												.put(path[path.length - 1],
														ParserUtils
																.parseTo_Date(
																		(String) (currentElement)
																				.get(path[path.length - 1]),
																		pattern));
									}
								}
							}
						}
					}

					public void processTree(
							com.mongodb.BasicDBList currentElements,
							String[] path, int index, String pattern) {
						if (index < path.length - 1) {
							for (Object currentElement : currentElements) {
								if (currentElement instanceof org.bson.Document) {
									processTree(
											(org.bson.Document) currentElement,
											path, index + 1, pattern);
								} else if (currentElement instanceof com.mongodb.BasicDBList) {
									processTree(
											(com.mongodb.BasicDBList) currentElement,
											path, index + 1, pattern);
								}
							}
						} else {
							// process leaf
							com.mongodb.BasicDBList convertedElements = new com.mongodb.BasicDBList();
							for (Object finalObject : currentElements) {
								if (finalObject instanceof org.bson.Document) {
									org.bson.Document currentElement = (org.bson.Document) finalObject;
									if (pattern == null) {
										// no pattern, we want to parse to a
										// byte array.
										if (currentElement
												.get(path[path.length - 1]) != null) {
											currentElement
													.put(path[path.length - 1],
															((String) currentElement
																	.get(path[path.length - 1]))
																	.getBytes());
										}
									} else {
										if (currentElement
												.get(path[path.length - 1]) != null) {
											currentElement
													.put(path[path.length - 1],
															ParserUtils
																	.parseTo_Date(
																			(String) (currentElement)
																					.get(path[path.length - 1]),
																			pattern));
										}
									}
								} else { // loop with raw types
									if (pattern == null) {
										// no pattern, we want to parse to a
										// byte array.
										if (finalObject != null) {
											convertedElements
													.add(((String) finalObject)
															.getBytes());
										}
									} else {
										if (finalObject != null) {
											convertedElements
													.add(ParserUtils
															.parseTo_Date(
																	(String) finalObject,
																	pattern));
										}
									}
								}
							}
							if (convertedElements.size() > 0) {
								currentElements.clear();
								currentElements.addAll(convertedElements);
							}
						}

					}
				}
				MongoDBTreeConverter_tMongoDBOutput_1_Out mongoDBTreeConverter_tMongoDBOutput_1_Out = new MongoDBTreeConverter_tMongoDBOutput_1_Out();
				while (!globalMap
						.containsKey(readFinishMarkWithPipeId_tMongoDBOutput_1_Out)
						|| !queue_tMongoDBOutput_1_Out.isEmpty()) {
					if (!queue_tMongoDBOutput_1_Out.isEmpty()) {
						str_tMongoDBOutput_1_Out = queue_tMongoDBOutput_1_Out
								.poll();
						// Convert XML to JSON
						net.sf.json.JSON json_tMongoDBOutput_1_Out = xmlSerializer_tMongoDBOutput_1_Out
								.read(str_tMongoDBOutput_1_Out);
						nb_line_tMongoDBOutput_1_Out++;

						/**
						 * [tMongoDBOutput_1_Out begin ] stop
						 */

						/**
						 * [tMongoDBOutput_1_Out main ] start
						 */

						currentVirtualComponent = "tMongoDBOutput_1";

						currentComponent = "tMongoDBOutput_1_Out";

						org.bson.Document data_tMongoDBOutput_1_Out = org.bson.Document
								.parse(json_tMongoDBOutput_1_Out.toString());

						// Replace Date and Bytes by true mongoDB types.
						Object tMongoDBOutput_1_Out_dbobject = data_tMongoDBOutput_1_Out;
						String pathString_tMongoDBOutput_1_Out = "";
						String[] path_tMongoDBOutput_1_Out;

						org.bson.Document queryObj_tMongoDBOutput_1_Out = null;
						if (data_tMongoDBOutput_1_Out != null) {

							queryObj_tMongoDBOutput_1_Out = (org.bson.Document) data_tMongoDBOutput_1_Out
									.get("query");
							data_tMongoDBOutput_1_Out = (org.bson.Document) data_tMongoDBOutput_1_Out
									.get("data");
							if (data_tMongoDBOutput_1_Out != null
									&& queryObj_tMongoDBOutput_1_Out != null) {

								coll_tMongoDBOutput_1_Out
										.updateOne(
												queryObj_tMongoDBOutput_1_Out,
												new org.bson.Document("$set",
														data_tMongoDBOutput_1_Out),
												new com.mongodb.client.model.UpdateOptions()
														.upsert(true));
							} else {

								throw new Exception(
										"Data node or Query node configuration error! ");

							}

						} else {

							throw new Exception(
									"There no data in json,Please check the json configuration");

						}

						tos_count_tMongoDBOutput_1_Out++;

						/**
						 * [tMongoDBOutput_1_Out main ] stop
						 */

						/**
						 * [tMongoDBOutput_1_Out process_data_begin ] start
						 */

						currentVirtualComponent = "tMongoDBOutput_1";

						currentComponent = "tMongoDBOutput_1_Out";

						/**
						 * [tMongoDBOutput_1_Out process_data_begin ] stop
						 */

						/**
						 * [tMongoDBOutput_1_Out process_data_end ] start
						 */

						currentVirtualComponent = "tMongoDBOutput_1";

						currentComponent = "tMongoDBOutput_1_Out";

						/**
						 * [tMongoDBOutput_1_Out process_data_end ] stop
						 */

						/**
						 * [tMongoDBOutput_1_Out end ] start
						 */

						currentVirtualComponent = "tMongoDBOutput_1";

						currentComponent = "tMongoDBOutput_1_Out";

					}
				}

				String readFinishWithExceptionMarkWithPipeId_tMongoDBOutput_1_Out = "tMongoDBOutput_1_Out_FINISH_WITH_EXCEPTION"
						+ (queue_tMongoDBOutput_1_Out == null ? ""
								: queue_tMongoDBOutput_1_Out.hashCode());
				if (globalMap
						.containsKey(readFinishWithExceptionMarkWithPipeId_tMongoDBOutput_1_Out)) {
					globalMap
							.put(readFinishWithExceptionMarkWithPipeId_tMongoDBOutput_1_Out,
									null);// syn
					globalMap
							.remove(readFinishWithExceptionMarkWithPipeId_tMongoDBOutput_1_Out);
					return;
				}
				globalMap.remove("queue_tMongoDBOutput_1_Out");

				globalMap.put(readFinishMarkWithPipeId_tMongoDBOutput_1_Out,
						null);// syn
				globalMap.remove(readFinishMarkWithPipeId_tMongoDBOutput_1_Out);

				globalMap.put("tMongoDBOutput_1_NB_LINE",
						nb_line_tMongoDBOutput_1_Out);

				ok_Hash.put("tMongoDBOutput_1_Out", true);
				end_Hash.put("tMongoDBOutput_1_Out", System.currentTimeMillis());

				/**
				 * [tMongoDBOutput_1_Out end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMongoDBOutput_1_Out finally ] start
				 */

				currentVirtualComponent = "tMongoDBOutput_1";

				currentComponent = "tMongoDBOutput_1_Out";

				/**
				 * [tMongoDBOutput_1_Out finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBOutput_1_Out_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final GENERATE_GEOGRAPHY_CODE GENERATE_GEOGRAPHY_CODEClass = new GENERATE_GEOGRAPHY_CODE();

		int exitCode = GENERATE_GEOGRAPHY_CODEClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = GENERATE_GEOGRAPHY_CODE.class
					.getClassLoader().getResourceAsStream(
							"deepsea/generate_geography_code_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = GENERATE_GEOGRAPHY_CODE.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			context.setContextType("COLLECTION", "id_String");

			context.COLLECTION = (String) context.getProperty("COLLECTION");
			context.setContextType("SOURCE", "id_String");

			context.SOURCE = (String) context.getProperty("SOURCE");
			context.setContextType("TABLE", "id_String");

			context.TABLE = (String) context.getProperty("TABLE");
			context.setContextType("COUNTRY", "id_String");

			context.COUNTRY = (String) context.getProperty("COUNTRY");
			context.setContextType("DEEPSEA_AUTH_TOKEN", "id_String");

			context.DEEPSEA_AUTH_TOKEN = (String) context
					.getProperty("DEEPSEA_AUTH_TOKEN");
			context.setContextType("DEEPSEA_HOSTNAME", "id_String");

			context.DEEPSEA_HOSTNAME = (String) context
					.getProperty("DEEPSEA_HOSTNAME");
			context.setContextType("MONGODB_HOSTNAME", "id_String");

			context.MONGODB_HOSTNAME = (String) context
					.getProperty("MONGODB_HOSTNAME");
			context.setContextType("POSTGRES_HOSTNAME", "id_String");

			context.POSTGRES_HOSTNAME = (String) context
					.getProperty("POSTGRES_HOSTNAME");
			context.setContextType("WEBJOB_NAME", "id_String");

			context.WEBJOB_NAME = (String) context.getProperty("WEBJOB_NAME");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("COLLECTION")) {
				context.COLLECTION = (String) parentContextMap
						.get("COLLECTION");
			}
			if (parentContextMap.containsKey("SOURCE")) {
				context.SOURCE = (String) parentContextMap.get("SOURCE");
			}
			if (parentContextMap.containsKey("TABLE")) {
				context.TABLE = (String) parentContextMap.get("TABLE");
			}
			if (parentContextMap.containsKey("COUNTRY")) {
				context.COUNTRY = (String) parentContextMap.get("COUNTRY");
			}
			if (parentContextMap.containsKey("DEEPSEA_AUTH_TOKEN")) {
				context.DEEPSEA_AUTH_TOKEN = (String) parentContextMap
						.get("DEEPSEA_AUTH_TOKEN");
			}
			if (parentContextMap.containsKey("DEEPSEA_HOSTNAME")) {
				context.DEEPSEA_HOSTNAME = (String) parentContextMap
						.get("DEEPSEA_HOSTNAME");
			}
			if (parentContextMap.containsKey("MONGODB_HOSTNAME")) {
				context.MONGODB_HOSTNAME = (String) parentContextMap
						.get("MONGODB_HOSTNAME");
			}
			if (parentContextMap.containsKey("POSTGRES_HOSTNAME")) {
				context.POSTGRES_HOSTNAME = (String) parentContextMap
						.get("POSTGRES_HOSTNAME");
			}
			if (parentContextMap.containsKey("WEBJOB_NAME")) {
				context.WEBJOB_NAME = (String) parentContextMap
						.get("WEBJOB_NAME");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs
		final Thread launchingThread = Thread.currentThread();
		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tMongoDBInput_1Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tMongoDBInput_1) {
					globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", -1);

					e_tMongoDBInput_1.printStackTrace();

				} catch (java.lang.Error e_tMongoDBInput_1) {
					globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", -1);
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					throw e_tMongoDBInput_1;

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					if ("true".equals(((java.util.Map) threadLocal.get())
							.get("JobInterrupted"))) {
						launchingThread.interrupt();
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		boolean interrupted = false;
		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (java.lang.InterruptedException e) {
				interrupted = true;
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		if (interrupted) {
			Thread.currentThread().interrupt();
		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : GENERATE_GEOGRAPHY_CODE");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1",
				globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 259995 characters generated by Talend Open Studio for Big Data on the October
 * 16, 2018 8:35:33 AM CST
 ************************************************************************************************/
