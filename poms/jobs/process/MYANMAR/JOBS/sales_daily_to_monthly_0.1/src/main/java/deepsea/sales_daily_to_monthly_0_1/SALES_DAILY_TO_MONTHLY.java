// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package deepsea.sales_daily_to_monthly_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: SALES_DAILY_TO_MONTHLY Purpose: Concat daily sales  to one monthly file<br>
 * Description: Concat daily sales to one monthly file <br>
 * @author romualdrousseau@gmail.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class SALES_DAILY_TO_MONTHLY implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private Object[] multiThreadLockWrite = new Object[0];

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (MONGODB_HOSTNAME != null) {

				this.setProperty("MONGODB_HOSTNAME",
						MONGODB_HOSTNAME.toString());

			}

			if (POSTGRES_HOSTNAME != null) {

				this.setProperty("POSTGRES_HOSTNAME",
						POSTGRES_HOSTNAME.toString());

			}

			if (COUNTRY != null) {

				this.setProperty("COUNTRY", COUNTRY.toString());

			}

			if (COLLECTION != null) {

				this.setProperty("COLLECTION", COLLECTION.toString());

			}

		}

		public String MONGODB_HOSTNAME;

		public String getMONGODB_HOSTNAME() {
			return this.MONGODB_HOSTNAME;
		}

		public String POSTGRES_HOSTNAME;

		public String getPOSTGRES_HOSTNAME() {
			return this.POSTGRES_HOSTNAME;
		}

		public String COUNTRY;

		public String getCOUNTRY() {
			return this.COUNTRY;
		}

		public String COLLECTION;

		public String getCOLLECTION() {
			return this.COLLECTION;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "SALES_DAILY_TO_MONTHLY";
	private final String projectName = "DEEPSEA";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	MetterCatcherUtils tFlowMeterCatcher_1 = new MetterCatcherUtils(
			"_nO6OILgPEei30bV-SVSjVA", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					SALES_DAILY_TO_MONTHLY.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(SALES_DAILY_TO_MONTHLY.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tChronometerStop_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tChronometerStop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowMeterCatcher_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBClose_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractFields_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_1_AGGOUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_1_AGGIN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tChronometerStop_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFlowMeterCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBClose_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tChronometerStop_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tChronometerStop_1 begin ] start
				 */

				ok_Hash.put("tChronometerStop_1", false);
				start_Hash
						.put("tChronometerStop_1", System.currentTimeMillis());

				currentComponent = "tChronometerStop_1";

				int tos_count_tChronometerStop_1 = 0;

				class BytesLimit65535_tChronometerStop_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tChronometerStop_1().limitLog4jByte();

				long timetChronometerStop_1;

				timetChronometerStop_1 = System.currentTimeMillis() - startTime;

				System.out.print("[ tChronometerStop_1 ]  ");

				System.out.println("" + "  " + timetChronometerStop_1
						+ " milliseconds");

				Long currentTimetChronometerStop_1 = System.currentTimeMillis();
				globalMap.put("tChronometerStop_1",
						currentTimetChronometerStop_1);

				globalMap.put("tChronometerStop_1_STOPTIME",
						currentTimetChronometerStop_1);
				globalMap.put("tChronometerStop_1_DURATION",
						timetChronometerStop_1);

				/**
				 * [tChronometerStop_1 begin ] stop
				 */

				/**
				 * [tChronometerStop_1 main ] start
				 */

				currentComponent = "tChronometerStop_1";

				tos_count_tChronometerStop_1++;

				/**
				 * [tChronometerStop_1 main ] stop
				 */

				/**
				 * [tChronometerStop_1 process_data_begin ] start
				 */

				currentComponent = "tChronometerStop_1";

				/**
				 * [tChronometerStop_1 process_data_begin ] stop
				 */

				/**
				 * [tChronometerStop_1 process_data_end ] start
				 */

				currentComponent = "tChronometerStop_1";

				/**
				 * [tChronometerStop_1 process_data_end ] stop
				 */

				/**
				 * [tChronometerStop_1 end ] start
				 */

				currentComponent = "tChronometerStop_1";

				ok_Hash.put("tChronometerStop_1", true);
				end_Hash.put("tChronometerStop_1", System.currentTimeMillis());

				/**
				 * [tChronometerStop_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tChronometerStop_1 finally ] start
				 */

				currentComponent = "tChronometerStop_1";

				/**
				 * [tChronometerStop_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[0];
		static byte[] commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public Integer reference;

		public Integer getReference() {
			return this.reference;
		}

		public String thresholds;

		public String getThresholds() {
			return this.thresholds;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY.length == 0) {
						commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_SALES_DAILY_TO_MONTHLY) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.label = readString(dis);

					this.count = readInteger(dis);

					this.reference = readInteger(dis);

					this.thresholds = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.label, dos);

				// Integer

				writeInteger(this.count, dos);

				// Integer

				writeInteger(this.reference, dos);

				// String

				writeString(this.thresholds, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",label=" + label);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",reference=" + String.valueOf(reference));
			sb.append(",thresholds=" + thresholds);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFlowMeterCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_1 = 0;

				class BytesLimit65535_tLogRow_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tLogRow_1().limitLog4jByte();

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tFlowMeterCatcher_1 begin ] start
				 */

				ok_Hash.put("tFlowMeterCatcher_1", false);
				start_Hash.put("tFlowMeterCatcher_1",
						System.currentTimeMillis());

				currentComponent = "tFlowMeterCatcher_1";

				int tos_count_tFlowMeterCatcher_1 = 0;

				class BytesLimit65535_tFlowMeterCatcher_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowMeterCatcher_1().limitLog4jByte();

				for (MetterCatcherUtils.MetterCatcherMessage mcm : tFlowMeterCatcher_1
						.getMessages()) {
					row6.pid = pid;
					row6.root_pid = rootPid;
					row6.father_pid = fatherPid;
					row6.project = projectName;
					row6.job = jobName;
					row6.context = contextStr;
					row6.origin = (mcm.getOrigin() == null
							|| mcm.getOrigin().length() < 1 ? null : mcm
							.getOrigin());
					row6.moment = mcm.getMoment();
					row6.job_version = mcm.getJobVersion();
					row6.job_repository_id = mcm.getJobId();
					row6.system_pid = mcm.getSystemPid();
					row6.label = mcm.getLabel();
					row6.count = mcm.getCount();
					row6.reference = tFlowMeterCatcher_1.getConnLinesCount(mcm
							.getReferense() + "_count");
					row6.thresholds = mcm.getThresholds();

					/**
					 * [tFlowMeterCatcher_1 begin ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 main ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

					tos_count_tFlowMeterCatcher_1++;

					/**
					 * [tFlowMeterCatcher_1 main ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 process_data_begin ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

					/**
					 * [tFlowMeterCatcher_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					// row6
					// row6

					if (execStat) {
						runStat.updateStatOnConnection("row6" + iterateId, 1, 1);
					}

					// /////////////////////

					strBuffer_tLogRow_1 = new StringBuilder();

					if (row6.moment != null) { //

						strBuffer_tLogRow_1.append(FormatterUtils.format_Date(
								row6.moment, "yyyy-MM-dd HH:mm:ss"));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.pid != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row6.pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.father_pid != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row6.father_pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.root_pid != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row6.root_pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.system_pid != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row6.system_pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.project != null) { //

						strBuffer_tLogRow_1
								.append(String.valueOf(row6.project));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.job != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row6.job));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.job_repository_id != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row6.job_repository_id));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.job_version != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row6.job_version));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.context != null) { //

						strBuffer_tLogRow_1
								.append(String.valueOf(row6.context));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.origin != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row6.origin));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.label != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row6.label));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.count != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row6.count));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.reference != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row6.reference));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.thresholds != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row6.thresholds));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
								.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_1 = new java.io.PrintStream(
								new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
					}
					consoleOut_tLogRow_1
							.println(strBuffer_tLogRow_1.toString());
					consoleOut_tLogRow_1.flush();
					nb_line_tLogRow_1++;
					// ////

					// ////

					// /////////////////////

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

					/**
					 * [tLogRow_1 process_data_begin ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 process_data_end ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_end ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 process_data_end ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

					/**
					 * [tFlowMeterCatcher_1 process_data_end ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 end ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

				}

				ok_Hash.put("tFlowMeterCatcher_1", true);
				end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());

				/**
				 * [tFlowMeterCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFlowMeterCatcher_1 finally ] start
				 */

				currentComponent = "tFlowMeterCatcher_1";

				/**
				 * [tFlowMeterCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 1);
	}

	public void tMongoDBClose_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tMongoDBClose_1 begin ] start
				 */

				ok_Hash.put("tMongoDBClose_1", false);
				start_Hash.put("tMongoDBClose_1", System.currentTimeMillis());

				currentComponent = "tMongoDBClose_1";

				int tos_count_tMongoDBClose_1 = 0;

				class BytesLimit65535_tMongoDBClose_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMongoDBClose_1().limitLog4jByte();

				/**
				 * [tMongoDBClose_1 begin ] stop
				 */

				/**
				 * [tMongoDBClose_1 main ] start
				 */

				currentComponent = "tMongoDBClose_1";

				com.mongodb.Mongo mongo_tMongoDBClose_1 = (com.mongodb.Mongo) globalMap
						.get("mongo_tMongoDBConnection_1");
				if (mongo_tMongoDBClose_1 != null) {

					mongo_tMongoDBClose_1.close();

				}

				tos_count_tMongoDBClose_1++;

				/**
				 * [tMongoDBClose_1 main ] stop
				 */

				/**
				 * [tMongoDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tMongoDBClose_1";

				/**
				 * [tMongoDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tMongoDBClose_1 process_data_end ] start
				 */

				currentComponent = "tMongoDBClose_1";

				/**
				 * [tMongoDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tMongoDBClose_1 end ] start
				 */

				currentComponent = "tMongoDBClose_1";

				ok_Hash.put("tMongoDBClose_1", true);
				end_Hash.put("tMongoDBClose_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tChronometerStop_1Process(globalMap);

				/**
				 * [tMongoDBClose_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMongoDBClose_1 finally ] start
				 */

				currentComponent = "tMongoDBClose_1";

				/**
				 * [tMongoDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tMongoDBConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tMongoDBConnection_1 begin ] start
				 */

				ok_Hash.put("tMongoDBConnection_1", false);
				start_Hash.put("tMongoDBConnection_1",
						System.currentTimeMillis());

				currentComponent = "tMongoDBConnection_1";

				int tos_count_tMongoDBConnection_1 = 0;

				class BytesLimit65535_tMongoDBConnection_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMongoDBConnection_1().limitLog4jByte();

				java.util.logging.Logger.getLogger("org.mongodb.driver")
						.setLevel(java.util.logging.Level.SEVERE);
				// Empty client options
				com.mongodb.MongoClientOptions clientOptions_tMongoDBConnection_1 = new com.mongodb.MongoClientOptions.Builder()
						.build();

				// Empty client credentials list
				java.util.List<com.mongodb.MongoCredential> mongoCredentialList_tMongoDBConnection_1 = new java.util.ArrayList<com.mongodb.MongoCredential>();

				com.mongodb.ServerAddress serverAddress_tMongoDBConnection_1 = new com.mongodb.ServerAddress(
						context.getMONGODB_HOSTNAME(), 27017);
				com.mongodb.Mongo mongo_tMongoDBConnection_1 = new com.mongodb.MongoClient(
						serverAddress_tMongoDBConnection_1,
						mongoCredentialList_tMongoDBConnection_1,
						clientOptions_tMongoDBConnection_1);

				mongo_tMongoDBConnection_1.getAddress();
				com.mongodb.client.MongoDatabase db_tMongoDBConnection_1 = ((com.mongodb.MongoClient) mongo_tMongoDBConnection_1)
						.getDatabase("DEEPSEA");

				globalMap.put("mongo_tMongoDBConnection_1",
						mongo_tMongoDBConnection_1);
				globalMap.put("db_tMongoDBConnection_1",
						db_tMongoDBConnection_1);

				/**
				 * [tMongoDBConnection_1 begin ] stop
				 */

				/**
				 * [tMongoDBConnection_1 main ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				tos_count_tMongoDBConnection_1++;

				/**
				 * [tMongoDBConnection_1 main ] stop
				 */

				/**
				 * [tMongoDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				/**
				 * [tMongoDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tMongoDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				/**
				 * [tMongoDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tMongoDBConnection_1 end ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				ok_Hash.put("tMongoDBConnection_1", true);
				end_Hash.put("tMongoDBConnection_1", System.currentTimeMillis());

				/**
				 * [tMongoDBConnection_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMongoDBConnection_1 finally ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				/**
				 * [tMongoDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[0];
		static byte[] commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[0];

		public java.util.Date batchDate;

		public java.util.Date getBatchDate() {
			return this.batchDate;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_SALES_DAILY_TO_MONTHLY) {

				try {

					int length = 0;

					this.batchDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.batchDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("batchDate=" + String.valueOf(batchDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[0];
		static byte[] commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[0];

		public java.util.Date batchDate;

		public java.util.Date getBatchDate() {
			return this.batchDate;
		}

		public String hash;

		public String getHash() {
			return this.hash;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY.length == 0) {
						commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_SALES_DAILY_TO_MONTHLY) {

				try {

					int length = 0;

					this.batchDate = readDate(dis);

					this.hash = readString(dis);

					this.name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.batchDate, dos);

				// String

				writeString(this.hash, dos);

				// String

				writeString(this.name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("batchDate=" + String.valueOf(batchDate));
			sb.append(",hash=" + hash);
			sb.append(",name=" + name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tMongoDBInput_1Struct implements
			routines.system.IPersistableRow<after_tMongoDBInput_1Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[0];
		static byte[] commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[0];

		public java.util.Date batchDate;

		public java.util.Date getBatchDate() {
			return this.batchDate;
		}

		public String hash;

		public String getHash() {
			return this.hash;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY.length == 0) {
						commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_SALES_DAILY_TO_MONTHLY) {

				try {

					int length = 0;

					this.batchDate = readDate(dis);

					this.hash = readString(dis);

					this.name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.batchDate, dos);

				// String

				writeString(this.hash, dos);

				// String

				writeString(this.name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("batchDate=" + String.valueOf(batchDate));
			sb.append(",hash=" + hash);
			sb.append(",name=" + name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tMongoDBInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMongoDBInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tMongoDBInput_2Process(globalMap);

				row1Struct row1 = new row1Struct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("out1" + iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_2 = 0;

				class BytesLimit65535_tLogRow_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tLogRow_2().limitLog4jByte();

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
				java.io.PrintStream consoleOut_tLogRow_2 = null;

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
				// /////////////////////

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				class BytesLimit65535_tMap_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_1().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tMongoDBInput_1 begin ] start
				 */

				ok_Hash.put("tMongoDBInput_1", false);
				start_Hash.put("tMongoDBInput_1", System.currentTimeMillis());

				currentComponent = "tMongoDBInput_1";

				int tos_count_tMongoDBInput_1 = 0;

				class BytesLimit65535_tMongoDBInput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMongoDBInput_1().limitLog4jByte();

				int nb_line_tMongoDBInput_1 = 0;

				com.mongodb.MongoClient mongo_tMongoDBInput_1 = null;
				com.mongodb.client.MongoDatabase db_tMongoDBInput_1 = null;

				mongo_tMongoDBInput_1 = (com.mongodb.MongoClient) globalMap
						.get("mongo_tMongoDBConnection_1");
				db_tMongoDBInput_1 = (com.mongodb.client.MongoDatabase) globalMap
						.get("db_tMongoDBConnection_1");

				com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBInput_1 = db_tMongoDBInput_1
						.getCollection("transactions.files");

				try {
					// Add warning if an index is not in the query.
					boolean needIndexWarning = true;
					String indexList = "";

					for (com.mongodb.DBObject index : coll_tMongoDBInput_1
							.listIndexes(com.mongodb.DBObject.class)) {

						for (String key : ((com.mongodb.DBObject) index
								.get("key")).keySet()) {
							// The regexp is:
							// - contain the db DBcolumnName between two
							// backslashed quotes
							// - is followed at some point by a colon
							// - there is no comma between the the DBcolumnName
							// and the colon
							if (("{}, {'_id':1, 'num': 1}").matches(".*" + key
									+ "[^,]*:.*")) {
								// We have an index, do not print error message
								needIndexWarning = false;
							} else {
								// This index is not in the query, add it into
								// the indexList
								indexList += ", " + key;
							}
						}
					}
					if ((!"".equals(indexList)) && (needIndexWarning)) {

						System.err
								.println("tMongoDBInput_1 - The query does not contain any reference an index.  ["
										+ indexList.substring(1) + " ]");

					}
				} catch (com.mongodb.MongoException e) {
					// caught an exception after issuing the getIndexInfo()
					// don't fail the whole job
					// maybe due to authorization
				}

				java.util.List<org.bson.Document> aggregationStages = new java.util.ArrayList<org.bson.Document>();

				aggregationStages
						.add(org.bson.Document
								.parse("{ $addFields: {'_collectionRef': {$arrayToObject: {$map: {input: { $objectToArray: '$collection' }, in: {k: {$cond:[{ $eq:[{'$substrCP':['$$this.k',0,1]},{$literal:'$'}] }, { $substrCP:['$$this.k',1,{$strLenCP:'$$this.k'}] }, '$$this.k'] }, v:'$$this.v'} } } } } }"));

				aggregationStages
						.add(org.bson.Document
								.parse("{ $lookup: {from: 'collections', localField: '_collectionRef.id', foreignField: '_id', as: '_collection'} }"));

				aggregationStages
						.add(org.bson.Document
								.parse("{ $addFields: {'collection': {$mergeObjects: '$_collection'}} }"));

				aggregationStages.add(org.bson.Document
						.parse("{ $match : {'collection.name' : '"
								+ context.getCOLLECTION() + "'} }"));

				aggregationStages
						.add(org.bson.Document
								.parse("{ $project: { '_collectionRef': 0, '_collection': 0 } }"));

				com.mongodb.client.MongoCursor<org.bson.Document> cursor_tMongoDBInput_1 = coll_tMongoDBInput_1
						.aggregate(aggregationStages).allowDiskUse(false)
						.iterator();

				class DBObjectInputUtil_tMongoDBInput_1 {
					// Get the node value in embedded document,
					// If have no embedded document get root document node.

					public Object getValue(String parentNode,
							String currentName, org.bson.Document dbObject) {
						Object value = null;
						if (dbObject == null) {
							return null;
						}
						if (parentNode == null || "".equals(parentNode)) {
							if ("*".equals(currentName)) {
								value = dbObject;
							} else if (dbObject.get(currentName) != null) {
								value = dbObject.get(currentName);
							}
						} else {
							String objNames[] = objNames = parentNode
									.split("\\.");
							org.bson.Document currentObj = dbObject;
							for (int i = 0; i < objNames.length; i++) {
								currentObj = (org.bson.Document) currentObj
										.get(objNames[i]);
								if (currentObj == null) {
									break;
								}
							}
							if ("*".equals(currentName)) {
								value = currentObj;
							} else if (currentObj != null) {
								value = currentObj.get(currentName);
							}
						}
						return value;
					}
				}
				DBObjectInputUtil_tMongoDBInput_1 dbObjectInputUtil_tMongoDBInput_1 = new DBObjectInputUtil_tMongoDBInput_1();
				java.util.Map<String, String> pathMap_tMongoDBInput_1 = new java.util.HashMap<String, String>();
				pathMap_tMongoDBInput_1.put("batchDate", "");
				pathMap_tMongoDBInput_1.put("hash", "");
				pathMap_tMongoDBInput_1.put("name", "collection");

				while (cursor_tMongoDBInput_1.hasNext()) {
					org.bson.Document o_tMongoDBInput_1 = cursor_tMongoDBInput_1
							.next();
					nb_line_tMongoDBInput_1++;
					Object valueObj_tMongoDBInput_1 = null;
					valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1
							.getValue(pathMap_tMongoDBInput_1.get("batchDate"),
									"batchDate", o_tMongoDBInput_1);
					if (valueObj_tMongoDBInput_1 != null
							&& valueObj_tMongoDBInput_1.toString().length() > 0) {
						if (valueObj_tMongoDBInput_1 instanceof java.util.Date) {
							row1.batchDate = ParserUtils.parseTo_Date(
									(java.util.Date) valueObj_tMongoDBInput_1,
									"dd-MM-yyyy");
						} else {
							row1.batchDate = ParserUtils.parseTo_Date(
									(String) valueObj_tMongoDBInput_1,
									"dd-MM-yyyy");
						}
					} else {
						row1.batchDate = null;
					}
					valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1
							.getValue(pathMap_tMongoDBInput_1.get("hash"),
									"hash", o_tMongoDBInput_1);
					if (valueObj_tMongoDBInput_1 != null
							&& valueObj_tMongoDBInput_1.toString().length() > 0) {
						row1.hash = valueObj_tMongoDBInput_1.toString();
					} else {
						row1.hash = null;
					}
					valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1
							.getValue(pathMap_tMongoDBInput_1.get("name"),
									"name", o_tMongoDBInput_1);
					if (valueObj_tMongoDBInput_1 != null
							&& valueObj_tMongoDBInput_1.toString().length() > 0) {
						row1.name = valueObj_tMongoDBInput_1.toString();
					} else {
						row1.name = null;
					}

					/**
					 * [tMongoDBInput_1 begin ] stop
					 */

					/**
					 * [tMongoDBInput_1 main ] start
					 */

					currentComponent = "tMongoDBInput_1";

					tos_count_tMongoDBInput_1++;

					/**
					 * [tMongoDBInput_1 main ] stop
					 */

					/**
					 * [tMongoDBInput_1 process_data_begin ] start
					 */

					currentComponent = "tMongoDBInput_1";

					/**
					 * [tMongoDBInput_1 process_data_begin ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					// row1
					// row1

					if (execStat) {
						runStat.updateStatOnConnection("row1" + iterateId, 1, 1);
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					// /////////////////////////////////////////////
					// Starting Lookup Table "row4"
					// /////////////////////////////////////////////

					boolean forceLooprow4 = false;

					row4Struct row4ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_1 = false;

						row4HashKey.batchDate = row1.batchDate;

						row4HashKey.hash = row1.hash;

						row4HashKey.hashCodeDirty = true;

						tHash_Lookup_row4.lookup(row4HashKey);

						if (!tHash_Lookup_row4.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_1 = true;

						} // G_TM_M_090

					} // G_TM_M_020

					if (tHash_Lookup_row4 != null
							&& tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G
																				// 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.batchDate = '"
						// + row4HashKey.batchDate + "', row4.hash = '" +
						// row4HashKey.hash + "'");
					} // G 071

					row4Struct row4 = null;

					row4Struct fromLookup_row4 = null;
					row4 = row4Default;

					if (tHash_Lookup_row4 != null
							&& tHash_Lookup_row4.hasNext()) { // G 099

						fromLookup_row4 = tHash_Lookup_row4.next();

					} // G 099

					if (fromLookup_row4 != null) {
						row4 = fromLookup_row4;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
						// ###############################
						// # Output tables

						out1 = null;

						if (!rejectedInnerJoin_tMap_1) {
						} // closing inner join bracket (1)
							// ###### START REJECTS #####

						// # Output reject table : 'out1'
						// # Filter conditions
						if (rejectedInnerJoin_tMap_1) {
							out1_tmp.batchDate = row1.batchDate;
							out1 = out1_tmp;
						} // closing filter/reject
							// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1 = false;

					tos_count_tMap_1++;

					/**
					 * [tMap_1 main ] stop
					 */

					/**
					 * [tMap_1 process_data_begin ] start
					 */

					currentComponent = "tMap_1";

					/**
					 * [tMap_1 process_data_begin ] stop
					 */
					// Start of branch "out1"
					if (out1 != null) {

						/**
						 * [tLogRow_2 main ] start
						 */

						currentComponent = "tLogRow_2";

						// out1
						// out1

						if (execStat) {
							runStat.updateStatOnConnection("out1" + iterateId,
									1, 1);
						}

						// /////////////////////

						strBuffer_tLogRow_2 = new StringBuilder();

						if (out1.batchDate != null) { //

							strBuffer_tLogRow_2.append(FormatterUtils
									.format_Date(out1.batchDate, "dd-MM-yyyy"));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_2 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_2);
						}
						consoleOut_tLogRow_2.println(strBuffer_tLogRow_2
								.toString());
						consoleOut_tLogRow_2.flush();
						nb_line_tLogRow_2++;
						// ////

						// ////

						// /////////////////////

						tos_count_tLogRow_2++;

						/**
						 * [tLogRow_2 main ] stop
						 */

						/**
						 * [tLogRow_2 process_data_begin ] start
						 */

						currentComponent = "tLogRow_2";

						/**
						 * [tLogRow_2 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_2 process_data_end ] start
						 */

						currentComponent = "tLogRow_2";

						/**
						 * [tLogRow_2 process_data_end ] stop
						 */

					} // End of branch "out1"

					/**
					 * [tMap_1 process_data_end ] start
					 */

					currentComponent = "tMap_1";

					/**
					 * [tMap_1 process_data_end ] stop
					 */

					/**
					 * [tMongoDBInput_1 process_data_end ] start
					 */

					currentComponent = "tMongoDBInput_1";

					/**
					 * [tMongoDBInput_1 process_data_end ] stop
					 */

					/**
					 * [tMongoDBInput_1 end ] start
					 */

					currentComponent = "tMongoDBInput_1";

				}

				globalMap.put("tMongoDBInput_1_NB_LINE",
						nb_line_tMongoDBInput_1);

				ok_Hash.put("tMongoDBInput_1", true);
				end_Hash.put("tMongoDBInput_1", System.currentTimeMillis());

				/**
				 * [tMongoDBInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

				// ////
				// ////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("out1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row4");

			try {

				/**
				 * [tMongoDBInput_1 finally ] start
				 */

				currentComponent = "tMongoDBInput_1";

				/**
				 * [tMongoDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[0];
		static byte[] commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public java.util.Date batchDate;

		public java.util.Date getBatchDate() {
			return this.batchDate;
		}

		public String hash;

		public String getHash() {
			return this.hash;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.batchDate == null) ? 0 : this.batchDate
								.hashCode());

				result = prime * result
						+ ((this.hash == null) ? 0 : this.hash.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.batchDate == null) {
				if (other.batchDate != null)
					return false;

			} else if (!this.batchDate.equals(other.batchDate))

				return false;

			if (this.hash == null) {
				if (other.hash != null)
					return false;

			} else if (!this.hash.equals(other.hash))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.batchDate = this.batchDate;
			other.hash = this.hash;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.batchDate = this.batchDate;
			other.hash = this.hash;

		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY.length == 0) {
						commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_SALES_DAILY_TO_MONTHLY) {

				try {

					int length = 0;

					this.batchDate = readDate(dis);

					this.hash = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.batchDate, dos);

				// String

				writeString(this.hash, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("batchDate=" + String.valueOf(batchDate));
			sb.append(",hash=" + hash);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.batchDate, other.batchDate);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.hash, other.hash);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_1 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
		final static byte[] commonByteArrayLock_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[0];
		static byte[] commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[0];

		public java.util.Date batchDate;

		public java.util.Date getBatchDate() {
			return this.batchDate;
		}

		public String hash;

		public String getHash() {
			return this.hash;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY.length == 0) {
						commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_SALES_DAILY_TO_MONTHLY) {

				try {

					int length = 0;

					this.batchDate = readDate(dis);

					this.hash = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.batchDate, dos);

				// String

				writeString(this.hash, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("batchDate=" + String.valueOf(batchDate));
			sb.append(",hash=" + hash);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[0];
		static byte[] commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[0];

		public java.util.Date batchDate;

		public java.util.Date getBatchDate() {
			return this.batchDate;
		}

		public String hash;

		public String getHash() {
			return this.hash;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY.length == 0) {
						commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_SALES_DAILY_TO_MONTHLY) {

				try {

					int length = 0;

					this.batchDate = readDate(dis);

					this.hash = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.batchDate, dos);

				// String

				writeString(this.hash, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("batchDate=" + String.valueOf(batchDate));
			sb.append(",hash=" + hash);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[0];
		static byte[] commonByteArray_DEEPSEA_SALES_DAILY_TO_MONTHLY = new byte[0];

		public java.util.Date batchDate;

		public java.util.Date getBatchDate() {
			return this.batchDate;
		}

		public Object fields;

		public Object getFields() {
			return this.fields;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_SALES_DAILY_TO_MONTHLY) {

				try {

					int length = 0;

					this.batchDate = readDate(dis);

					this.fields = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.batchDate, dos);

				// Object

				dos.writeObject(this.fields);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("batchDate=" + String.valueOf(batchDate));
			sb.append(",fields=" + String.valueOf(fields));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMongoDBInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				row3Struct row3 = new row3Struct();
				row4Struct row4 = new row4Struct();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGOUT", false);
				start_Hash.put("tAggregateRow_1_AGGOUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tAggregateRow_1_AGGOUT = 0;

				class BytesLimit65535_tAggregateRow_1_AGGOUT {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAggregateRow_1_AGGOUT().limitLog4jByte();

				// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap();

				// ------------
				class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					java.util.Date batchDate;
					String hash;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.batchDate == null) ? 0
											: this.batchDate.hashCode());

							result = prime
									* result
									+ ((this.hash == null) ? 0 : this.hash
											.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;

						if (this.batchDate == null) {
							if (other.batchDate != null)
								return false;
						} else if (!this.batchDate.equals(other.batchDate))
							return false;

						if (this.hash == null) {
							if (other.hash != null)
								return false;
						} else if (!this.hash.equals(other.hash))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
				AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
				java.util.Map<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1>();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] stop
				 */

				/**
				 * [tExtractFields_1 begin ] start
				 */

				ok_Hash.put("tExtractFields_1", false);
				start_Hash.put("tExtractFields_1", System.currentTimeMillis());

				currentComponent = "tExtractFields_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tExtractFields_1 = 0;

				class BytesLimit65535_tExtractFields_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tExtractFields_1().limitLog4jByte();
				int nb_line_tExtractFields_1 = 0;

				class tExtractFields_1Utility {
					public String UnPivot(
							java.util.List<org.bson.Document> document,
							String key, String value, String keyValue) {
						return document.stream()
								.filter(x -> keyValue.equals(x.get(key)))
								.map(x -> x.get(value).toString()).findFirst()
								.orElse(null);
					}
				}
				tExtractFields_1Utility utility_tExtractFields_1 = new tExtractFields_1Utility();

				/**
				 * [tExtractFields_1 begin ] stop
				 */

				/**
				 * [tMongoDBInput_2 begin ] start
				 */

				ok_Hash.put("tMongoDBInput_2", false);
				start_Hash.put("tMongoDBInput_2", System.currentTimeMillis());

				currentComponent = "tMongoDBInput_2";

				int tos_count_tMongoDBInput_2 = 0;

				class BytesLimit65535_tMongoDBInput_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMongoDBInput_2().limitLog4jByte();

				int nb_line_tMongoDBInput_2 = 0;

				com.mongodb.MongoClient mongo_tMongoDBInput_2 = null;
				com.mongodb.client.MongoDatabase db_tMongoDBInput_2 = null;

				mongo_tMongoDBInput_2 = (com.mongodb.MongoClient) globalMap
						.get("mongo_tMongoDBConnection_1");
				db_tMongoDBInput_2 = (com.mongodb.client.MongoDatabase) globalMap
						.get("db_tMongoDBConnection_1");

				com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBInput_2 = db_tMongoDBInput_2
						.getCollection("transactions.records");

				try {
					// Add warning if an index is not in the query.
					boolean needIndexWarning = true;
					String indexList = "";

					for (com.mongodb.DBObject index : coll_tMongoDBInput_2
							.listIndexes(com.mongodb.DBObject.class)) {

						for (String key : ((com.mongodb.DBObject) index
								.get("key")).keySet()) {
							// The regexp is:
							// - contain the db DBcolumnName between two
							// backslashed quotes
							// - is followed at some point by a colon
							// - there is no comma between the the DBcolumnName
							// and the colon
							if (("{}, {'_id':1, 'num': 1}").matches(".*" + key
									+ "[^,]*:.*")) {
								// We have an index, do not print error message
								needIndexWarning = false;
							} else {
								// This index is not in the query, add it into
								// the indexList
								indexList += ", " + key;
							}
						}
					}
					if ((!"".equals(indexList)) && (needIndexWarning)) {

						System.err
								.println("tMongoDBInput_2 - The query does not contain any reference an index.  ["
										+ indexList.substring(1) + " ]");

					}
				} catch (com.mongodb.MongoException e) {
					// caught an exception after issuing the getIndexInfo()
					// don't fail the whole job
					// maybe due to authorization
				}

				java.util.List<org.bson.Document> aggregationStages = new java.util.ArrayList<org.bson.Document>();

				aggregationStages
						.add(org.bson.Document
								.parse("{ $addFields: {'_fileRef': {$arrayToObject: {$map: {input: { $objectToArray: '$file' }, in: {k: {$cond:[{ $eq:[{'$substrCP':['$$this.k',0,1]},{$literal:'$'}] }, { $substrCP:['$$this.k',1,{$strLenCP:'$$this.k'}] }, '$$this.k'] }, v:'$$this.v'} } } } } }"));

				aggregationStages
						.add(org.bson.Document
								.parse("{ $lookup: {from: 'transactions.files', localField: '_fileRef.id', foreignField: '_id', as: '_file'} }"));

				aggregationStages
						.add(org.bson.Document
								.parse("{ $addFields: {'file': {$mergeObjects: '$_file'}} }"));

				aggregationStages.add(org.bson.Document
						.parse("{ $match : {'file.collection.name' : '"
								+ "sales.mega.monthly" + "'} }"));

				aggregationStages.add(org.bson.Document
						.parse("{ $project: { '_fileRef': 0, '_file': 0 } }"));

				com.mongodb.client.MongoCursor<org.bson.Document> cursor_tMongoDBInput_2 = coll_tMongoDBInput_2
						.aggregate(aggregationStages).allowDiskUse(false)
						.iterator();

				class DBObjectInputUtil_tMongoDBInput_2 {
					// Get the node value in embedded document,
					// If have no embedded document get root document node.

					public Object getValue(String parentNode,
							String currentName, org.bson.Document dbObject) {
						Object value = null;
						if (dbObject == null) {
							return null;
						}
						if (parentNode == null || "".equals(parentNode)) {
							if ("*".equals(currentName)) {
								value = dbObject;
							} else if (dbObject.get(currentName) != null) {
								value = dbObject.get(currentName);
							}
						} else {
							String objNames[] = objNames = parentNode
									.split("\\.");
							org.bson.Document currentObj = dbObject;
							for (int i = 0; i < objNames.length; i++) {
								currentObj = (org.bson.Document) currentObj
										.get(objNames[i]);
								if (currentObj == null) {
									break;
								}
							}
							if ("*".equals(currentName)) {
								value = currentObj;
							} else if (currentObj != null) {
								value = currentObj.get(currentName);
							}
						}
						return value;
					}
				}
				DBObjectInputUtil_tMongoDBInput_2 dbObjectInputUtil_tMongoDBInput_2 = new DBObjectInputUtil_tMongoDBInput_2();
				java.util.Map<String, String> pathMap_tMongoDBInput_2 = new java.util.HashMap<String, String>();
				pathMap_tMongoDBInput_2.put("batchDate", "file");
				pathMap_tMongoDBInput_2.put("fields", "");

				while (cursor_tMongoDBInput_2.hasNext()) {
					org.bson.Document o_tMongoDBInput_2 = cursor_tMongoDBInput_2
							.next();
					nb_line_tMongoDBInput_2++;
					Object valueObj_tMongoDBInput_2 = null;
					valueObj_tMongoDBInput_2 = dbObjectInputUtil_tMongoDBInput_2
							.getValue(pathMap_tMongoDBInput_2.get("batchDate"),
									"batchDate", o_tMongoDBInput_2);
					if (valueObj_tMongoDBInput_2 != null
							&& valueObj_tMongoDBInput_2.toString().length() > 0) {
						if (valueObj_tMongoDBInput_2 instanceof java.util.Date) {
							row2.batchDate = ParserUtils.parseTo_Date(
									(java.util.Date) valueObj_tMongoDBInput_2,
									"dd-MM-yyyy");
						} else {
							row2.batchDate = ParserUtils.parseTo_Date(
									(String) valueObj_tMongoDBInput_2,
									"dd-MM-yyyy");
						}
					} else {
						row2.batchDate = null;
					}
					valueObj_tMongoDBInput_2 = dbObjectInputUtil_tMongoDBInput_2
							.getValue(pathMap_tMongoDBInput_2.get("fields"),
									"fields", o_tMongoDBInput_2);
					row2.fields = valueObj_tMongoDBInput_2;

					/**
					 * [tMongoDBInput_2 begin ] stop
					 */

					/**
					 * [tMongoDBInput_2 main ] start
					 */

					currentComponent = "tMongoDBInput_2";

					tos_count_tMongoDBInput_2++;

					/**
					 * [tMongoDBInput_2 main ] stop
					 */

					/**
					 * [tMongoDBInput_2 process_data_begin ] start
					 */

					currentComponent = "tMongoDBInput_2";

					/**
					 * [tMongoDBInput_2 process_data_begin ] stop
					 */

					/**
					 * [tExtractFields_1 main ] start
					 */

					currentComponent = "tExtractFields_1";

					// row2
					// row2

					if (execStat) {
						runStat.updateStatOnConnection("row2" + iterateId, 1, 1);
					}

					List<org.bson.Document> doc_tExtractFields_1 = (List<org.bson.Document>) row2.fields;
					row3.batchDate = row2.batchDate;
					row3.hash = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value", "hash");
					nb_line_tExtractFields_1++;

					tos_count_tExtractFields_1++;

					/**
					 * [tExtractFields_1 main ] stop
					 */

					/**
					 * [tExtractFields_1 process_data_begin ] start
					 */

					currentComponent = "tExtractFields_1";

					/**
					 * [tExtractFields_1 process_data_begin ] stop
					 */
					// Start of branch "row3"
					if (row3 != null) {

						/**
						 * [tAggregateRow_1_AGGOUT main ] start
						 */

						currentVirtualComponent = "tAggregateRow_1";

						currentComponent = "tAggregateRow_1_AGGOUT";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						operation_finder_tAggregateRow_1.batchDate = row3.batchDate;
						operation_finder_tAggregateRow_1.hash = row3.hash;

						operation_finder_tAggregateRow_1.hashCodeDirty = true;

						operation_result_tAggregateRow_1 = hash_tAggregateRow_1
								.get(operation_finder_tAggregateRow_1);

						if (operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

							operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

							operation_result_tAggregateRow_1.batchDate = operation_finder_tAggregateRow_1.batchDate;
							operation_result_tAggregateRow_1.hash = operation_finder_tAggregateRow_1.hash;

							hash_tAggregateRow_1.put(
									operation_result_tAggregateRow_1,
									operation_result_tAggregateRow_1);

						} // G_OutMain_AggR_001

						tos_count_tAggregateRow_1_AGGOUT++;

						/**
						 * [tAggregateRow_1_AGGOUT main ] stop
						 */

						/**
						 * [tAggregateRow_1_AGGOUT process_data_begin ] start
						 */

						currentVirtualComponent = "tAggregateRow_1";

						currentComponent = "tAggregateRow_1_AGGOUT";

						/**
						 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
						 */

						/**
						 * [tAggregateRow_1_AGGOUT process_data_end ] start
						 */

						currentVirtualComponent = "tAggregateRow_1";

						currentComponent = "tAggregateRow_1_AGGOUT";

						/**
						 * [tAggregateRow_1_AGGOUT process_data_end ] stop
						 */

					} // End of branch "row3"

					/**
					 * [tExtractFields_1 process_data_end ] start
					 */

					currentComponent = "tExtractFields_1";

					/**
					 * [tExtractFields_1 process_data_end ] stop
					 */

					/**
					 * [tMongoDBInput_2 process_data_end ] start
					 */

					currentComponent = "tMongoDBInput_2";

					/**
					 * [tMongoDBInput_2 process_data_end ] stop
					 */

					/**
					 * [tMongoDBInput_2 end ] start
					 */

					currentComponent = "tMongoDBInput_2";

				}

				globalMap.put("tMongoDBInput_2_NB_LINE",
						nb_line_tMongoDBInput_2);

				ok_Hash.put("tMongoDBInput_2", true);
				end_Hash.put("tMongoDBInput_2", System.currentTimeMillis());

				/**
				 * [tMongoDBInput_2 end ] stop
				 */

				/**
				 * [tExtractFields_1 end ] start
				 */

				currentComponent = "tExtractFields_1";

				globalMap.put("tExtractFields_1_NB_LINE",
						nb_line_tExtractFields_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tExtractFields_1", true);
				end_Hash.put("tExtractFields_1", System.currentTimeMillis());

				/**
				 * [tExtractFields_1 end ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAggregateRow_1_AGGOUT", true);
				end_Hash.put("tAggregateRow_1_AGGOUT",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGOUT end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash
						.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row4 = 0;

				class BytesLimit65535_tAdvancedHash_row4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row4().limitLog4jByte();

				// connection name:row4
				// source node:tAggregateRow_1_AGGIN - inputs:(OnRowsEnd)
				// outputs:(row4,row4) | target node:tAdvancedHash_row4 -
				// inputs:(row4) outputs:()
				// linked node: tMap_1 - inputs:(row1,row4) outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct> getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGIN", false);
				start_Hash.put("tAggregateRow_1_AGGIN",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				int tos_count_tAggregateRow_1_AGGIN = 0;

				class BytesLimit65535_tAggregateRow_1_AGGIN {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAggregateRow_1_AGGIN().limitLog4jByte();

				java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1
						.values();

				globalMap.put("tAggregateRow_1_NB_LINE",
						values_tAggregateRow_1.size());

				for (AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600

					/**
					 * [tAggregateRow_1_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					row4.batchDate = aggregated_row_tAggregateRow_1.batchDate;

					row4.hash = aggregated_row_tAggregateRow_1.hash;

					tos_count_tAggregateRow_1_AGGIN++;

					/**
					 * [tAggregateRow_1_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row4 main ] start
					 */

					currentComponent = "tAdvancedHash_row4";

					// row4
					// row4

					if (execStat) {
						runStat.updateStatOnConnection("row4" + iterateId, 1, 1);
					}

					row4Struct row4_HashRow = new row4Struct();

					row4_HashRow.batchDate = row4.batchDate;

					row4_HashRow.hash = row4.hash;

					tHash_Lookup_row4.put(row4_HashRow);

					tos_count_tAdvancedHash_row4++;

					/**
					 * [tAdvancedHash_row4 main ] stop
					 */

					/**
					 * [tAdvancedHash_row4 process_data_begin ] start
					 */

					currentComponent = "tAdvancedHash_row4";

					/**
					 * [tAdvancedHash_row4 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row4 process_data_end ] start
					 */

					currentComponent = "tAdvancedHash_row4";

					/**
					 * [tAdvancedHash_row4 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_1_AGGIN", true);
				end_Hash.put("tAggregateRow_1_AGGIN",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGIN end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_1_AGGIN"
			globalMap.remove("tAggregateRow_1");

			try {

				/**
				 * [tMongoDBInput_2 finally ] start
				 */

				currentComponent = "tMongoDBInput_2";

				/**
				 * [tMongoDBInput_2 finally ] stop
				 */

				/**
				 * [tExtractFields_1 finally ] start
				 */

				currentComponent = "tExtractFields_1";

				/**
				 * [tExtractFields_1 finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				/**
				 * [tAggregateRow_1_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				/**
				 * [tAggregateRow_1_AGGIN finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBInput_2_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				class BytesLimit65535_tPostjob_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tPostjob_1().limitLog4jByte();

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tMongoDBClose_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				class BytesLimit65535_tPrejob_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tPrejob_1().limitLog4jByte();

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tMongoDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final SALES_DAILY_TO_MONTHLY SALES_DAILY_TO_MONTHLYClass = new SALES_DAILY_TO_MONTHLY();

		int exitCode = SALES_DAILY_TO_MONTHLYClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = SALES_DAILY_TO_MONTHLY.class
					.getClassLoader().getResourceAsStream(
							"deepsea/sales_daily_to_monthly_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = SALES_DAILY_TO_MONTHLY.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			context.setContextType("MONGODB_HOSTNAME", "id_String");

			context.MONGODB_HOSTNAME = (String) context
					.getProperty("MONGODB_HOSTNAME");
			context.setContextType("POSTGRES_HOSTNAME", "id_String");

			context.POSTGRES_HOSTNAME = (String) context
					.getProperty("POSTGRES_HOSTNAME");
			context.setContextType("COUNTRY", "id_String");

			context.COUNTRY = (String) context.getProperty("COUNTRY");
			context.setContextType("COLLECTION", "id_String");

			context.COLLECTION = (String) context.getProperty("COLLECTION");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("MONGODB_HOSTNAME")) {
				context.MONGODB_HOSTNAME = (String) parentContextMap
						.get("MONGODB_HOSTNAME");
			}
			if (parentContextMap.containsKey("POSTGRES_HOSTNAME")) {
				context.POSTGRES_HOSTNAME = (String) parentContextMap
						.get("POSTGRES_HOSTNAME");
			}
			if (parentContextMap.containsKey("COUNTRY")) {
				context.COUNTRY = (String) parentContextMap.get("COUNTRY");
			}
			if (parentContextMap.containsKey("COLLECTION")) {
				context.COLLECTION = (String) parentContextMap
						.get("COLLECTION");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs
		final Thread launchingThread = Thread.currentThread();
		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tMongoDBInput_1Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tMongoDBInput_1) {
					globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", -1);

					e_tMongoDBInput_1.printStackTrace();

				} catch (java.lang.Error e_tMongoDBInput_1) {
					globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", -1);
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					throw e_tMongoDBInput_1;

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					if ("true".equals(((java.util.Map) threadLocal.get())
							.get("JobInterrupted"))) {
						launchingThread.interrupt();
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		boolean interrupted = false;
		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (java.lang.InterruptedException e) {
				interrupted = true;
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		if (interrupted) {
			Thread.currentThread().interrupt();
		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : SALES_DAILY_TO_MONTHLY");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 142799 characters generated by Talend Open Studio for Big Data on the 2
 * October, 2018 6:29:02 PM SGT
 ************************************************************************************************/
