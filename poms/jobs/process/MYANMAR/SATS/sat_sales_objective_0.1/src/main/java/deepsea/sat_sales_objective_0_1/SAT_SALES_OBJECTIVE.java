// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package deepsea.sat_sales_objective_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: SAT_SALES_OBJECTIVE Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class SAT_SALES_OBJECTIVE implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(TYPE != null){
				
					this.setProperty("TYPE", TYPE.toString());
				
			}
			
			if(QUOTA_TYPE != null){
				
					this.setProperty("QUOTA_TYPE", QUOTA_TYPE.toString());
				
			}
			
			if(SOURCE != null){
				
					this.setProperty("SOURCE", SOURCE.toString());
				
			}
			
			if(TABLE != null){
				
					this.setProperty("TABLE", TABLE.toString());
				
			}
			
			if(COUNTRY != null){
				
					this.setProperty("COUNTRY", COUNTRY.toString());
				
			}
			
			if(DEEPSEA_AUTH_TOKEN != null){
				
					this.setProperty("DEEPSEA_AUTH_TOKEN", DEEPSEA_AUTH_TOKEN.toString());
				
			}
			
			if(DEEPSEA_HOSTNAME != null){
				
					this.setProperty("DEEPSEA_HOSTNAME", DEEPSEA_HOSTNAME.toString());
				
			}
			
			if(MONGODB_HOSTNAME != null){
				
					this.setProperty("MONGODB_HOSTNAME", MONGODB_HOSTNAME.toString());
				
			}
			
			if(POSTGRES_HOSTNAME != null){
				
					this.setProperty("POSTGRES_HOSTNAME", POSTGRES_HOSTNAME.toString());
				
			}
			
			if(WEBJOB_NAME != null){
				
					this.setProperty("WEBJOB_NAME", WEBJOB_NAME.toString());
				
			}
			
		}

public String TYPE;
public String getTYPE(){
	return this.TYPE;
}
public String QUOTA_TYPE;
public String getQUOTA_TYPE(){
	return this.QUOTA_TYPE;
}
public String SOURCE;
public String getSOURCE(){
	return this.SOURCE;
}
public String TABLE;
public String getTABLE(){
	return this.TABLE;
}
public String COUNTRY;
public String getCOUNTRY(){
	return this.COUNTRY;
}
public String DEEPSEA_AUTH_TOKEN;
public String getDEEPSEA_AUTH_TOKEN(){
	return this.DEEPSEA_AUTH_TOKEN;
}
public String DEEPSEA_HOSTNAME;
public String getDEEPSEA_HOSTNAME(){
	return this.DEEPSEA_HOSTNAME;
}
public String MONGODB_HOSTNAME;
public String getMONGODB_HOSTNAME(){
	return this.MONGODB_HOSTNAME;
}
public String POSTGRES_HOSTNAME;
public String getPOSTGRES_HOSTNAME(){
	return this.POSTGRES_HOSTNAME;
}
public String WEBJOB_NAME;
public String getWEBJOB_NAME(){
	return this.WEBJOB_NAME;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "SAT_SALES_OBJECTIVE";
	private final String projectName = "DEEPSEA";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	MetterCatcherUtils tFlowMeterCatcher_1 = new MetterCatcherUtils("_JBFtYPVUEei2cPDh7zbmJg", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				SAT_SALES_OBJECTIVE.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(SAT_SALES_OBJECTIVE.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tMongoDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeter_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tExtractFields_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tNormalize_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterColumns_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeter_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSchemaComplianceCheck_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMongoDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tMongoDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tSetGlobalVar_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMongoDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tMongoDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tMongoDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMongoDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tMongoDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tMongoDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMongoDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tMongoDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tChronometerStop_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tChronometerStop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeterCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMongoDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMongoDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSetGlobalVar_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMongoDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMongoDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMongoDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tChronometerStop_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFlowMeterCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];
    static byte[] commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];

	
			    public int hubId;

				public int getHubId () {
					return this.hubId;
				}
				
			    public String source;

				public String getSource () {
					return this.source;
				}
				
			    public String market;

				public String getMarket () {
					return this.market;
				}
				
			    public String sourceChannelCode;

				public String getSourceChannelCode () {
					return this.sourceChannelCode;
				}
				
			    public String geographyCode;

				public String getGeographyCode () {
					return this.geographyCode;
				}
				
			    public String customerCode;

				public String getCustomerCode () {
					return this.customerCode;
				}
				
			    public String productCode;

				public String getProductCode () {
					return this.productCode;
				}
				
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				
			    public float value;

				public float getValue () {
					return this.value;
				}
				
			    public String attribute1;

				public String getAttribute1 () {
					return this.attribute1;
				}
				
			    public String attribute2;

				public String getAttribute2 () {
					return this.attribute2;
				}
				
			    public String attribute3;

				public String getAttribute3 () {
					return this.attribute3;
				}
				
			    public String attribute4;

				public String getAttribute4 () {
					return this.attribute4;
				}
				
			    public String attribute5;

				public String getAttribute5 () {
					return this.attribute5;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length) {
				if(length < 1024 && commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length == 0) {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[1024];
				} else {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length);
			strReturn = new String(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE) {

        	try {

        		int length = 0;
		
			        this.hubId = dis.readInt();
					
					this.source = readString(dis);
					
					this.market = readString(dis);
					
					this.sourceChannelCode = readString(dis);
					
					this.geographyCode = readString(dis);
					
					this.customerCode = readString(dis);
					
					this.productCode = readString(dis);
					
					this.date = readDate(dis);
					
			        this.value = dis.readFloat();
					
					this.attribute1 = readString(dis);
					
					this.attribute2 = readString(dis);
					
					this.attribute3 = readString(dis);
					
					this.attribute4 = readString(dis);
					
					this.attribute5 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.hubId);
					
					// String
				
						writeString(this.source,dos);
					
					// String
				
						writeString(this.market,dos);
					
					// String
				
						writeString(this.sourceChannelCode,dos);
					
					// String
				
						writeString(this.geographyCode,dos);
					
					// String
				
						writeString(this.customerCode,dos);
					
					// String
				
						writeString(this.productCode,dos);
					
					// java.util.Date
				
						writeDate(this.date,dos);
					
					// float
				
		            	dos.writeFloat(this.value);
					
					// String
				
						writeString(this.attribute1,dos);
					
					// String
				
						writeString(this.attribute2,dos);
					
					// String
				
						writeString(this.attribute3,dos);
					
					// String
				
						writeString(this.attribute4,dos);
					
					// String
				
						writeString(this.attribute5,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("hubId="+String.valueOf(hubId));
		sb.append(",source="+source);
		sb.append(",market="+market);
		sb.append(",sourceChannelCode="+sourceChannelCode);
		sb.append(",geographyCode="+geographyCode);
		sb.append(",customerCode="+customerCode);
		sb.append(",productCode="+productCode);
		sb.append(",date="+String.valueOf(date));
		sb.append(",value="+String.valueOf(value));
		sb.append(",attribute1="+attribute1);
		sb.append(",attribute2="+attribute2);
		sb.append(",attribute3="+attribute3);
		sb.append(",attribute4="+attribute4);
		sb.append(",attribute5="+attribute5);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class exception1Struct implements routines.system.IPersistableRow<exception1Struct> {
    final static byte[] commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];
    static byte[] commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];

	
			    public int hubId;

				public int getHubId () {
					return this.hubId;
				}
				
			    public String source;

				public String getSource () {
					return this.source;
				}
				
			    public String market;

				public String getMarket () {
					return this.market;
				}
				
			    public String sourceChannelCode;

				public String getSourceChannelCode () {
					return this.sourceChannelCode;
				}
				
			    public String geographyCode;

				public String getGeographyCode () {
					return this.geographyCode;
				}
				
			    public String customerCode;

				public String getCustomerCode () {
					return this.customerCode;
				}
				
			    public String productCode;

				public String getProductCode () {
					return this.productCode;
				}
				
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				
			    public float value;

				public float getValue () {
					return this.value;
				}
				
			    public String attribute1;

				public String getAttribute1 () {
					return this.attribute1;
				}
				
			    public String attribute2;

				public String getAttribute2 () {
					return this.attribute2;
				}
				
			    public String attribute3;

				public String getAttribute3 () {
					return this.attribute3;
				}
				
			    public String attribute4;

				public String getAttribute4 () {
					return this.attribute4;
				}
				
			    public String attribute5;

				public String getAttribute5 () {
					return this.attribute5;
				}
				
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length) {
				if(length < 1024 && commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length == 0) {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[1024];
				} else {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length);
			strReturn = new String(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE) {

        	try {

        		int length = 0;
		
			        this.hubId = dis.readInt();
					
					this.source = readString(dis);
					
					this.market = readString(dis);
					
					this.sourceChannelCode = readString(dis);
					
					this.geographyCode = readString(dis);
					
					this.customerCode = readString(dis);
					
					this.productCode = readString(dis);
					
					this.date = readDate(dis);
					
			        this.value = dis.readFloat();
					
					this.attribute1 = readString(dis);
					
					this.attribute2 = readString(dis);
					
					this.attribute3 = readString(dis);
					
					this.attribute4 = readString(dis);
					
					this.attribute5 = readString(dis);
					
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.hubId);
					
					// String
				
						writeString(this.source,dos);
					
					// String
				
						writeString(this.market,dos);
					
					// String
				
						writeString(this.sourceChannelCode,dos);
					
					// String
				
						writeString(this.geographyCode,dos);
					
					// String
				
						writeString(this.customerCode,dos);
					
					// String
				
						writeString(this.productCode,dos);
					
					// java.util.Date
				
						writeDate(this.date,dos);
					
					// float
				
		            	dos.writeFloat(this.value);
					
					// String
				
						writeString(this.attribute1,dos);
					
					// String
				
						writeString(this.attribute2,dos);
					
					// String
				
						writeString(this.attribute3,dos);
					
					// String
				
						writeString(this.attribute4,dos);
					
					// String
				
						writeString(this.attribute5,dos);
					
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("hubId="+String.valueOf(hubId));
		sb.append(",source="+source);
		sb.append(",market="+market);
		sb.append(",sourceChannelCode="+sourceChannelCode);
		sb.append(",geographyCode="+geographyCode);
		sb.append(",customerCode="+customerCode);
		sb.append(",productCode="+productCode);
		sb.append(",date="+String.valueOf(date));
		sb.append(",value="+String.valueOf(value));
		sb.append(",attribute1="+attribute1);
		sb.append(",attribute2="+attribute2);
		sb.append(",attribute3="+attribute3);
		sb.append(",attribute4="+attribute4);
		sb.append(",attribute5="+attribute5);
		sb.append(",errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(exception1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];
    static byte[] commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];

	
			    public int hubId;

				public int getHubId () {
					return this.hubId;
				}
				
			    public String source;

				public String getSource () {
					return this.source;
				}
				
			    public String market;

				public String getMarket () {
					return this.market;
				}
				
			    public String sourceChannelCode;

				public String getSourceChannelCode () {
					return this.sourceChannelCode;
				}
				
			    public String geographyCode;

				public String getGeographyCode () {
					return this.geographyCode;
				}
				
			    public String customerCode;

				public String getCustomerCode () {
					return this.customerCode;
				}
				
			    public String productCode;

				public String getProductCode () {
					return this.productCode;
				}
				
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				
			    public float value;

				public float getValue () {
					return this.value;
				}
				
			    public String attribute1;

				public String getAttribute1 () {
					return this.attribute1;
				}
				
			    public String attribute2;

				public String getAttribute2 () {
					return this.attribute2;
				}
				
			    public String attribute3;

				public String getAttribute3 () {
					return this.attribute3;
				}
				
			    public String attribute4;

				public String getAttribute4 () {
					return this.attribute4;
				}
				
			    public String attribute5;

				public String getAttribute5 () {
					return this.attribute5;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length) {
				if(length < 1024 && commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length == 0) {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[1024];
				} else {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length);
			strReturn = new String(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE) {

        	try {

        		int length = 0;
		
			        this.hubId = dis.readInt();
					
					this.source = readString(dis);
					
					this.market = readString(dis);
					
					this.sourceChannelCode = readString(dis);
					
					this.geographyCode = readString(dis);
					
					this.customerCode = readString(dis);
					
					this.productCode = readString(dis);
					
					this.date = readDate(dis);
					
			        this.value = dis.readFloat();
					
					this.attribute1 = readString(dis);
					
					this.attribute2 = readString(dis);
					
					this.attribute3 = readString(dis);
					
					this.attribute4 = readString(dis);
					
					this.attribute5 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.hubId);
					
					// String
				
						writeString(this.source,dos);
					
					// String
				
						writeString(this.market,dos);
					
					// String
				
						writeString(this.sourceChannelCode,dos);
					
					// String
				
						writeString(this.geographyCode,dos);
					
					// String
				
						writeString(this.customerCode,dos);
					
					// String
				
						writeString(this.productCode,dos);
					
					// java.util.Date
				
						writeDate(this.date,dos);
					
					// float
				
		            	dos.writeFloat(this.value);
					
					// String
				
						writeString(this.attribute1,dos);
					
					// String
				
						writeString(this.attribute2,dos);
					
					// String
				
						writeString(this.attribute3,dos);
					
					// String
				
						writeString(this.attribute4,dos);
					
					// String
				
						writeString(this.attribute5,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("hubId="+String.valueOf(hubId));
		sb.append(",source="+source);
		sb.append(",market="+market);
		sb.append(",sourceChannelCode="+sourceChannelCode);
		sb.append(",geographyCode="+geographyCode);
		sb.append(",customerCode="+customerCode);
		sb.append(",productCode="+productCode);
		sb.append(",date="+String.valueOf(date));
		sb.append(",value="+String.valueOf(value));
		sb.append(",attribute1="+attribute1);
		sb.append(",attribute2="+attribute2);
		sb.append(",attribute3="+attribute3);
		sb.append(",attribute4="+attribute4);
		sb.append(",attribute5="+attribute5);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];
    static byte[] commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];

	
			    public int hubId;

				public int getHubId () {
					return this.hubId;
				}
				
			    public String source;

				public String getSource () {
					return this.source;
				}
				
			    public String market;

				public String getMarket () {
					return this.market;
				}
				
			    public String sourceChannelCode;

				public String getSourceChannelCode () {
					return this.sourceChannelCode;
				}
				
			    public String geographyCode;

				public String getGeographyCode () {
					return this.geographyCode;
				}
				
			    public String customerCode;

				public String getCustomerCode () {
					return this.customerCode;
				}
				
			    public String productCode;

				public String getProductCode () {
					return this.productCode;
				}
				
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				
			    public float value;

				public float getValue () {
					return this.value;
				}
				
			    public String attribute1;

				public String getAttribute1 () {
					return this.attribute1;
				}
				
			    public String attribute2;

				public String getAttribute2 () {
					return this.attribute2;
				}
				
			    public String attribute3;

				public String getAttribute3 () {
					return this.attribute3;
				}
				
			    public String attribute4;

				public String getAttribute4 () {
					return this.attribute4;
				}
				
			    public String attribute5;

				public String getAttribute5 () {
					return this.attribute5;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length) {
				if(length < 1024 && commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length == 0) {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[1024];
				} else {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length);
			strReturn = new String(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE) {

        	try {

        		int length = 0;
		
			        this.hubId = dis.readInt();
					
					this.source = readString(dis);
					
					this.market = readString(dis);
					
					this.sourceChannelCode = readString(dis);
					
					this.geographyCode = readString(dis);
					
					this.customerCode = readString(dis);
					
					this.productCode = readString(dis);
					
					this.date = readDate(dis);
					
			        this.value = dis.readFloat();
					
					this.attribute1 = readString(dis);
					
					this.attribute2 = readString(dis);
					
					this.attribute3 = readString(dis);
					
					this.attribute4 = readString(dis);
					
					this.attribute5 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.hubId);
					
					// String
				
						writeString(this.source,dos);
					
					// String
				
						writeString(this.market,dos);
					
					// String
				
						writeString(this.sourceChannelCode,dos);
					
					// String
				
						writeString(this.geographyCode,dos);
					
					// String
				
						writeString(this.customerCode,dos);
					
					// String
				
						writeString(this.productCode,dos);
					
					// java.util.Date
				
						writeDate(this.date,dos);
					
					// float
				
		            	dos.writeFloat(this.value);
					
					// String
				
						writeString(this.attribute1,dos);
					
					// String
				
						writeString(this.attribute2,dos);
					
					// String
				
						writeString(this.attribute3,dos);
					
					// String
				
						writeString(this.attribute4,dos);
					
					// String
				
						writeString(this.attribute5,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("hubId="+String.valueOf(hubId));
		sb.append(",source="+source);
		sb.append(",market="+market);
		sb.append(",sourceChannelCode="+sourceChannelCode);
		sb.append(",geographyCode="+geographyCode);
		sb.append(",customerCode="+customerCode);
		sb.append(",productCode="+productCode);
		sb.append(",date="+String.valueOf(date));
		sb.append(",value="+String.valueOf(value));
		sb.append(",attribute1="+attribute1);
		sb.append(",attribute2="+attribute2);
		sb.append(",attribute3="+attribute3);
		sb.append(",attribute4="+attribute4);
		sb.append(",attribute5="+attribute5);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfrow8Struct implements routines.system.IPersistableRow<copyOfrow8Struct> {
    final static byte[] commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];
    static byte[] commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];

	
			    public int hubId;

				public int getHubId () {
					return this.hubId;
				}
				
			    public String source;

				public String getSource () {
					return this.source;
				}
				
			    public String market;

				public String getMarket () {
					return this.market;
				}
				
			    public String sourceChannelCode;

				public String getSourceChannelCode () {
					return this.sourceChannelCode;
				}
				
			    public String geographyCode;

				public String getGeographyCode () {
					return this.geographyCode;
				}
				
			    public String customerCode;

				public String getCustomerCode () {
					return this.customerCode;
				}
				
			    public String productCode;

				public String getProductCode () {
					return this.productCode;
				}
				
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				
			    public Float value;

				public Float getValue () {
					return this.value;
				}
				
			    public String attribute1;

				public String getAttribute1 () {
					return this.attribute1;
				}
				
			    public String attribute2;

				public String getAttribute2 () {
					return this.attribute2;
				}
				
			    public String attribute3;

				public String getAttribute3 () {
					return this.attribute3;
				}
				
			    public String attribute4;

				public String getAttribute4 () {
					return this.attribute4;
				}
				
			    public String attribute5;

				public String getAttribute5 () {
					return this.attribute5;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length) {
				if(length < 1024 && commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length == 0) {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[1024];
				} else {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length);
			strReturn = new String(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE) {

        	try {

        		int length = 0;
		
			        this.hubId = dis.readInt();
					
					this.source = readString(dis);
					
					this.market = readString(dis);
					
					this.sourceChannelCode = readString(dis);
					
					this.geographyCode = readString(dis);
					
					this.customerCode = readString(dis);
					
					this.productCode = readString(dis);
					
					this.date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.value = null;
           				} else {
           			    	this.value = dis.readFloat();
           				}
					
					this.attribute1 = readString(dis);
					
					this.attribute2 = readString(dis);
					
					this.attribute3 = readString(dis);
					
					this.attribute4 = readString(dis);
					
					this.attribute5 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.hubId);
					
					// String
				
						writeString(this.source,dos);
					
					// String
				
						writeString(this.market,dos);
					
					// String
				
						writeString(this.sourceChannelCode,dos);
					
					// String
				
						writeString(this.geographyCode,dos);
					
					// String
				
						writeString(this.customerCode,dos);
					
					// String
				
						writeString(this.productCode,dos);
					
					// java.util.Date
				
						writeDate(this.date,dos);
					
					// Float
				
						if(this.value == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.value);
		            	}
					
					// String
				
						writeString(this.attribute1,dos);
					
					// String
				
						writeString(this.attribute2,dos);
					
					// String
				
						writeString(this.attribute3,dos);
					
					// String
				
						writeString(this.attribute4,dos);
					
					// String
				
						writeString(this.attribute5,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("hubId="+String.valueOf(hubId));
		sb.append(",source="+source);
		sb.append(",market="+market);
		sb.append(",sourceChannelCode="+sourceChannelCode);
		sb.append(",geographyCode="+geographyCode);
		sb.append(",customerCode="+customerCode);
		sb.append(",productCode="+productCode);
		sb.append(",date="+String.valueOf(date));
		sb.append(",value="+String.valueOf(value));
		sb.append(",attribute1="+attribute1);
		sb.append(",attribute2="+attribute2);
		sb.append(",attribute3="+attribute3);
		sb.append(",attribute4="+attribute4);
		sb.append(",attribute5="+attribute5);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfrow8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];
    static byte[] commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];

	
			    public String fiscalStartDate;

				public String getFiscalStartDate () {
					return this.fiscalStartDate;
				}
				
			    public String market;

				public String getMarket () {
					return this.market;
				}
				
			    public String sourceChannelCode;

				public String getSourceChannelCode () {
					return this.sourceChannelCode;
				}
				
			    public String geographyCode;

				public String getGeographyCode () {
					return this.geographyCode;
				}
				
			    public String customerCode;

				public String getCustomerCode () {
					return this.customerCode;
				}
				
			    public String customerName;

				public String getCustomerName () {
					return this.customerName;
				}
				
			    public String productCode;

				public String getProductCode () {
					return this.productCode;
				}
				
			    public String attribute1;

				public String getAttribute1 () {
					return this.attribute1;
				}
				
			    public String attribute2;

				public String getAttribute2 () {
					return this.attribute2;
				}
				
			    public String attribute3;

				public String getAttribute3 () {
					return this.attribute3;
				}
				
			    public String attribute4;

				public String getAttribute4 () {
					return this.attribute4;
				}
				
			    public String attribute5;

				public String getAttribute5 () {
					return this.attribute5;
				}
				
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				
			    public Float value;

				public Float getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length) {
				if(length < 1024 && commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length == 0) {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[1024];
				} else {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length);
			strReturn = new String(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE) {

        	try {

        		int length = 0;
		
					this.fiscalStartDate = readString(dis);
					
					this.market = readString(dis);
					
					this.sourceChannelCode = readString(dis);
					
					this.geographyCode = readString(dis);
					
					this.customerCode = readString(dis);
					
					this.customerName = readString(dis);
					
					this.productCode = readString(dis);
					
					this.attribute1 = readString(dis);
					
					this.attribute2 = readString(dis);
					
					this.attribute3 = readString(dis);
					
					this.attribute4 = readString(dis);
					
					this.attribute5 = readString(dis);
					
					this.date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.value = null;
           				} else {
           			    	this.value = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.fiscalStartDate,dos);
					
					// String
				
						writeString(this.market,dos);
					
					// String
				
						writeString(this.sourceChannelCode,dos);
					
					// String
				
						writeString(this.geographyCode,dos);
					
					// String
				
						writeString(this.customerCode,dos);
					
					// String
				
						writeString(this.customerName,dos);
					
					// String
				
						writeString(this.productCode,dos);
					
					// String
				
						writeString(this.attribute1,dos);
					
					// String
				
						writeString(this.attribute2,dos);
					
					// String
				
						writeString(this.attribute3,dos);
					
					// String
				
						writeString(this.attribute4,dos);
					
					// String
				
						writeString(this.attribute5,dos);
					
					// java.util.Date
				
						writeDate(this.date,dos);
					
					// Float
				
						if(this.value == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.value);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("fiscalStartDate="+fiscalStartDate);
		sb.append(",market="+market);
		sb.append(",sourceChannelCode="+sourceChannelCode);
		sb.append(",geographyCode="+geographyCode);
		sb.append(",customerCode="+customerCode);
		sb.append(",customerName="+customerName);
		sb.append(",productCode="+productCode);
		sb.append(",attribute1="+attribute1);
		sb.append(",attribute2="+attribute2);
		sb.append(",attribute3="+attribute3);
		sb.append(",attribute4="+attribute4);
		sb.append(",attribute5="+attribute5);
		sb.append(",date="+String.valueOf(date));
		sb.append(",value="+String.valueOf(value));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];
    static byte[] commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];

	
			    public String fiscalStartDate;

				public String getFiscalStartDate () {
					return this.fiscalStartDate;
				}
				
			    public String market;

				public String getMarket () {
					return this.market;
				}
				
			    public String sourceCode;

				public String getSourceCode () {
					return this.sourceCode;
				}
				
			    public String geographyCode;

				public String getGeographyCode () {
					return this.geographyCode;
				}
				
			    public String productCode;

				public String getProductCode () {
					return this.productCode;
				}
				
			    public String customerCode;

				public String getCustomerCode () {
					return this.customerCode;
				}
				
			    public String customerName;

				public String getCustomerName () {
					return this.customerName;
				}
				
			    public String attribute1;

				public String getAttribute1 () {
					return this.attribute1;
				}
				
			    public String attribute2;

				public String getAttribute2 () {
					return this.attribute2;
				}
				
			    public String attribute3;

				public String getAttribute3 () {
					return this.attribute3;
				}
				
			    public String attribute4;

				public String getAttribute4 () {
					return this.attribute4;
				}
				
			    public String attribute5;

				public String getAttribute5 () {
					return this.attribute5;
				}
				
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				
			    public String fields;

				public String getFields () {
					return this.fields;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length) {
				if(length < 1024 && commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length == 0) {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[1024];
				} else {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length);
			strReturn = new String(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE) {

        	try {

        		int length = 0;
		
					this.fiscalStartDate = readString(dis);
					
					this.market = readString(dis);
					
					this.sourceCode = readString(dis);
					
					this.geographyCode = readString(dis);
					
					this.productCode = readString(dis);
					
					this.customerCode = readString(dis);
					
					this.customerName = readString(dis);
					
					this.attribute1 = readString(dis);
					
					this.attribute2 = readString(dis);
					
					this.attribute3 = readString(dis);
					
					this.attribute4 = readString(dis);
					
					this.attribute5 = readString(dis);
					
					this.date = readDate(dis);
					
					this.fields = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.fiscalStartDate,dos);
					
					// String
				
						writeString(this.market,dos);
					
					// String
				
						writeString(this.sourceCode,dos);
					
					// String
				
						writeString(this.geographyCode,dos);
					
					// String
				
						writeString(this.productCode,dos);
					
					// String
				
						writeString(this.customerCode,dos);
					
					// String
				
						writeString(this.customerName,dos);
					
					// String
				
						writeString(this.attribute1,dos);
					
					// String
				
						writeString(this.attribute2,dos);
					
					// String
				
						writeString(this.attribute3,dos);
					
					// String
				
						writeString(this.attribute4,dos);
					
					// String
				
						writeString(this.attribute5,dos);
					
					// java.util.Date
				
						writeDate(this.date,dos);
					
					// String
				
						writeString(this.fields,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("fiscalStartDate="+fiscalStartDate);
		sb.append(",market="+market);
		sb.append(",sourceCode="+sourceCode);
		sb.append(",geographyCode="+geographyCode);
		sb.append(",productCode="+productCode);
		sb.append(",customerCode="+customerCode);
		sb.append(",customerName="+customerName);
		sb.append(",attribute1="+attribute1);
		sb.append(",attribute2="+attribute2);
		sb.append(",attribute3="+attribute3);
		sb.append(",attribute4="+attribute4);
		sb.append(",attribute5="+attribute5);
		sb.append(",date="+String.valueOf(date));
		sb.append(",fields="+fields);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];
    static byte[] commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];

	
			    public String fiscalStartDate;

				public String getFiscalStartDate () {
					return this.fiscalStartDate;
				}
				
			    public String market;

				public String getMarket () {
					return this.market;
				}
				
			    public String sourceCode;

				public String getSourceCode () {
					return this.sourceCode;
				}
				
			    public String geographyCode;

				public String getGeographyCode () {
					return this.geographyCode;
				}
				
			    public String productCode;

				public String getProductCode () {
					return this.productCode;
				}
				
			    public String customerCode;

				public String getCustomerCode () {
					return this.customerCode;
				}
				
			    public String customerName;

				public String getCustomerName () {
					return this.customerName;
				}
				
			    public String attribute1;

				public String getAttribute1 () {
					return this.attribute1;
				}
				
			    public String attribute2;

				public String getAttribute2 () {
					return this.attribute2;
				}
				
			    public String attribute3;

				public String getAttribute3 () {
					return this.attribute3;
				}
				
			    public String attribute4;

				public String getAttribute4 () {
					return this.attribute4;
				}
				
			    public String attribute5;

				public String getAttribute5 () {
					return this.attribute5;
				}
				
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				
			    public String fields;

				public String getFields () {
					return this.fields;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length) {
				if(length < 1024 && commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length == 0) {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[1024];
				} else {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length);
			strReturn = new String(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE) {

        	try {

        		int length = 0;
		
					this.fiscalStartDate = readString(dis);
					
					this.market = readString(dis);
					
					this.sourceCode = readString(dis);
					
					this.geographyCode = readString(dis);
					
					this.productCode = readString(dis);
					
					this.customerCode = readString(dis);
					
					this.customerName = readString(dis);
					
					this.attribute1 = readString(dis);
					
					this.attribute2 = readString(dis);
					
					this.attribute3 = readString(dis);
					
					this.attribute4 = readString(dis);
					
					this.attribute5 = readString(dis);
					
					this.date = readDate(dis);
					
					this.fields = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.fiscalStartDate,dos);
					
					// String
				
						writeString(this.market,dos);
					
					// String
				
						writeString(this.sourceCode,dos);
					
					// String
				
						writeString(this.geographyCode,dos);
					
					// String
				
						writeString(this.productCode,dos);
					
					// String
				
						writeString(this.customerCode,dos);
					
					// String
				
						writeString(this.customerName,dos);
					
					// String
				
						writeString(this.attribute1,dos);
					
					// String
				
						writeString(this.attribute2,dos);
					
					// String
				
						writeString(this.attribute3,dos);
					
					// String
				
						writeString(this.attribute4,dos);
					
					// String
				
						writeString(this.attribute5,dos);
					
					// java.util.Date
				
						writeDate(this.date,dos);
					
					// String
				
						writeString(this.fields,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("fiscalStartDate="+fiscalStartDate);
		sb.append(",market="+market);
		sb.append(",sourceCode="+sourceCode);
		sb.append(",geographyCode="+geographyCode);
		sb.append(",productCode="+productCode);
		sb.append(",customerCode="+customerCode);
		sb.append(",customerName="+customerName);
		sb.append(",attribute1="+attribute1);
		sb.append(",attribute2="+attribute2);
		sb.append(",attribute3="+attribute3);
		sb.append(",attribute4="+attribute4);
		sb.append(",attribute5="+attribute5);
		sb.append(",date="+String.valueOf(date));
		sb.append(",fields="+fields);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];
    static byte[] commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];

	
			    public String fiscalStartDate;

				public String getFiscalStartDate () {
					return this.fiscalStartDate;
				}
				
			    public String market;

				public String getMarket () {
					return this.market;
				}
				
			    public String sourceCode;

				public String getSourceCode () {
					return this.sourceCode;
				}
				
			    public String geographyCode;

				public String getGeographyCode () {
					return this.geographyCode;
				}
				
			    public String productCode;

				public String getProductCode () {
					return this.productCode;
				}
				
			    public String customerCode;

				public String getCustomerCode () {
					return this.customerCode;
				}
				
			    public String customerName;

				public String getCustomerName () {
					return this.customerName;
				}
				
			    public String attribute1;

				public String getAttribute1 () {
					return this.attribute1;
				}
				
			    public String attribute2;

				public String getAttribute2 () {
					return this.attribute2;
				}
				
			    public String attribute3;

				public String getAttribute3 () {
					return this.attribute3;
				}
				
			    public String attribute4;

				public String getAttribute4 () {
					return this.attribute4;
				}
				
			    public String attribute5;

				public String getAttribute5 () {
					return this.attribute5;
				}
				
			    public String m1;

				public String getM1 () {
					return this.m1;
				}
				
			    public String m2;

				public String getM2 () {
					return this.m2;
				}
				
			    public String m3;

				public String getM3 () {
					return this.m3;
				}
				
			    public String m4;

				public String getM4 () {
					return this.m4;
				}
				
			    public String m5;

				public String getM5 () {
					return this.m5;
				}
				
			    public String m6;

				public String getM6 () {
					return this.m6;
				}
				
			    public String m7;

				public String getM7 () {
					return this.m7;
				}
				
			    public String m8;

				public String getM8 () {
					return this.m8;
				}
				
			    public String m9;

				public String getM9 () {
					return this.m9;
				}
				
			    public String m10;

				public String getM10 () {
					return this.m10;
				}
				
			    public String m11;

				public String getM11 () {
					return this.m11;
				}
				
			    public String m12;

				public String getM12 () {
					return this.m12;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length) {
				if(length < 1024 && commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length == 0) {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[1024];
				} else {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length);
			strReturn = new String(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE) {

        	try {

        		int length = 0;
		
					this.fiscalStartDate = readString(dis);
					
					this.market = readString(dis);
					
					this.sourceCode = readString(dis);
					
					this.geographyCode = readString(dis);
					
					this.productCode = readString(dis);
					
					this.customerCode = readString(dis);
					
					this.customerName = readString(dis);
					
					this.attribute1 = readString(dis);
					
					this.attribute2 = readString(dis);
					
					this.attribute3 = readString(dis);
					
					this.attribute4 = readString(dis);
					
					this.attribute5 = readString(dis);
					
					this.m1 = readString(dis);
					
					this.m2 = readString(dis);
					
					this.m3 = readString(dis);
					
					this.m4 = readString(dis);
					
					this.m5 = readString(dis);
					
					this.m6 = readString(dis);
					
					this.m7 = readString(dis);
					
					this.m8 = readString(dis);
					
					this.m9 = readString(dis);
					
					this.m10 = readString(dis);
					
					this.m11 = readString(dis);
					
					this.m12 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.fiscalStartDate,dos);
					
					// String
				
						writeString(this.market,dos);
					
					// String
				
						writeString(this.sourceCode,dos);
					
					// String
				
						writeString(this.geographyCode,dos);
					
					// String
				
						writeString(this.productCode,dos);
					
					// String
				
						writeString(this.customerCode,dos);
					
					// String
				
						writeString(this.customerName,dos);
					
					// String
				
						writeString(this.attribute1,dos);
					
					// String
				
						writeString(this.attribute2,dos);
					
					// String
				
						writeString(this.attribute3,dos);
					
					// String
				
						writeString(this.attribute4,dos);
					
					// String
				
						writeString(this.attribute5,dos);
					
					// String
				
						writeString(this.m1,dos);
					
					// String
				
						writeString(this.m2,dos);
					
					// String
				
						writeString(this.m3,dos);
					
					// String
				
						writeString(this.m4,dos);
					
					// String
				
						writeString(this.m5,dos);
					
					// String
				
						writeString(this.m6,dos);
					
					// String
				
						writeString(this.m7,dos);
					
					// String
				
						writeString(this.m8,dos);
					
					// String
				
						writeString(this.m9,dos);
					
					// String
				
						writeString(this.m10,dos);
					
					// String
				
						writeString(this.m11,dos);
					
					// String
				
						writeString(this.m12,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("fiscalStartDate="+fiscalStartDate);
		sb.append(",market="+market);
		sb.append(",sourceCode="+sourceCode);
		sb.append(",geographyCode="+geographyCode);
		sb.append(",productCode="+productCode);
		sb.append(",customerCode="+customerCode);
		sb.append(",customerName="+customerName);
		sb.append(",attribute1="+attribute1);
		sb.append(",attribute2="+attribute2);
		sb.append(",attribute3="+attribute3);
		sb.append(",attribute4="+attribute4);
		sb.append(",attribute5="+attribute5);
		sb.append(",m1="+m1);
		sb.append(",m2="+m2);
		sb.append(",m3="+m3);
		sb.append(",m4="+m4);
		sb.append(",m5="+m5);
		sb.append(",m6="+m6);
		sb.append(",m7="+m7);
		sb.append(",m8="+m8);
		sb.append(",m9="+m9);
		sb.append(",m10="+m10);
		sb.append(",m11="+m11);
		sb.append(",m12="+m12);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];
    static byte[] commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];

	
			    public String fiscalStartDate;

				public String getFiscalStartDate () {
					return this.fiscalStartDate;
				}
				
			    public String productCode;

				public String getProductCode () {
					return this.productCode;
				}
				
			    public Object fields;

				public Object getFields () {
					return this.fields;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length) {
				if(length < 1024 && commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length == 0) {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[1024];
				} else {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length);
			strReturn = new String(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE) {

        	try {

        		int length = 0;
		
					this.fiscalStartDate = readString(dis);
					
					this.productCode = readString(dis);
					
						this.fields = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.fiscalStartDate,dos);
					
					// String
				
						writeString(this.productCode,dos);
					
					// Object
				
       			    	dos.writeObject(this.fields);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("fiscalStartDate="+fiscalStartDate);
		sb.append(",productCode="+productCode);
		sb.append(",fields="+String.valueOf(fields));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];
    static byte[] commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];

	
			    public String fiscalStartDate;

				public String getFiscalStartDate () {
					return this.fiscalStartDate;
				}
				
			    public String productCode;

				public String getProductCode () {
					return this.productCode;
				}
				
			    public Object fields;

				public Object getFields () {
					return this.fields;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length) {
				if(length < 1024 && commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length == 0) {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[1024];
				} else {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length);
			strReturn = new String(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE) {

        	try {

        		int length = 0;
		
					this.fiscalStartDate = readString(dis);
					
					this.productCode = readString(dis);
					
						this.fields = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.fiscalStartDate,dos);
					
					// String
				
						writeString(this.productCode,dos);
					
					// Object
				
       			    	dos.writeObject(this.fields);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("fiscalStartDate="+fiscalStartDate);
		sb.append(",productCode="+productCode);
		sb.append(",fields="+String.valueOf(fields));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];
    static byte[] commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String hash;

				public String getHash () {
					return this.hash;
				}
				
			    public String fiscalStartDate;

				public String getFiscalStartDate () {
					return this.fiscalStartDate;
				}
				
			    public String productCode;

				public String getProductCode () {
					return this.productCode;
				}
				
			    public Object fields;

				public Object getFields () {
					return this.fields;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length) {
				if(length < 1024 && commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length == 0) {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[1024];
				} else {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length);
			strReturn = new String(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.hash = readString(dis);
					
					this.fiscalStartDate = readString(dis);
					
					this.productCode = readString(dis);
					
						this.fields = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.hash,dos);
					
					// String
				
						writeString(this.fiscalStartDate,dos);
					
					// String
				
						writeString(this.productCode,dos);
					
					// Object
				
       			    	dos.writeObject(this.fields);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",hash="+hash);
		sb.append(",fiscalStartDate="+fiscalStartDate);
		sb.append(",productCode="+productCode);
		sb.append(",fields="+String.valueOf(fields));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tMongoDBInput_1Struct implements routines.system.IPersistableRow<after_tMongoDBInput_1Struct> {
    final static byte[] commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];
    static byte[] commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String hash;

				public String getHash () {
					return this.hash;
				}
				
			    public String fiscalStartDate;

				public String getFiscalStartDate () {
					return this.fiscalStartDate;
				}
				
			    public String productCode;

				public String getProductCode () {
					return this.productCode;
				}
				
			    public Object fields;

				public Object getFields () {
					return this.fields;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length) {
				if(length < 1024 && commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length == 0) {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[1024];
				} else {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length);
			strReturn = new String(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.hash = readString(dis);
					
					this.fiscalStartDate = readString(dis);
					
					this.productCode = readString(dis);
					
						this.fields = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.hash,dos);
					
					// String
				
						writeString(this.fiscalStartDate,dos);
					
					// String
				
						writeString(this.productCode,dos);
					
					// Object
				
       			    	dos.writeObject(this.fields);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",hash="+hash);
		sb.append(",fiscalStartDate="+fiscalStartDate);
		sb.append(",productCode="+productCode);
		sb.append(",fields="+String.valueOf(fields));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tMongoDBInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMongoDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_1Process(globalMap);
		tDBInput_2Process(globalMap);

		row1Struct row1 = new row1Struct();
row10Struct row10 = new row10Struct();
row10Struct row7 = row10;
row3Struct row3 = new row3Struct();
row4Struct row4 = new row4Struct();
row5Struct row5 = new row5Struct();
row8Struct row8 = new row8Struct();
copyOfrow8Struct copyOfrow8 = new copyOfrow8Struct();
row2Struct row2 = new row2Struct();
row2Struct row9 = row2;
row11Struct row11 = new row11Struct();
exception1Struct exception1 = new exception1Struct();














	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row11" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_1 = 0;
		
    	class BytesLimit65535_tDBOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBOutput_1().limitLog4jByte();





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = (String) globalMap.get("SAT_TABLE");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + (String) globalMap.get("SAT_TABLE");
}

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_1 = 10000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"hub_id\",\"source\",\"market\",\"source_channel_code\",\"geography_code\",\"customer_code\",\"product_code\",\"objective_date\",\"value\",\"attribute1\",\"attribute2\",\"attribute3\",\"attribute4\",\"attribute5\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */




	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("exception1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRunJob_1 = 0;
		
    	class BytesLimit65535_tRunJob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_1().limitLog4jByte();


 



/**
 * [tRunJob_1 begin ] stop
 */



	
	/**
	 * [tSchemaComplianceCheck_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSchemaComplianceCheck_1", false);
		start_Hash.put("tSchemaComplianceCheck_1", System.currentTimeMillis());
		
	
	currentComponent="tSchemaComplianceCheck_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSchemaComplianceCheck_1 = 0;
		
    	class BytesLimit65535_tSchemaComplianceCheck_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSchemaComplianceCheck_1().limitLog4jByte();

	class RowSetValueUtil_tSchemaComplianceCheck_1 {

		boolean ifPassedThrough = true;
		int errorCodeThrough = 0;
		String errorMessageThrough = "";
		int resultErrorCodeThrough = 0;
		String resultErrorMessageThrough = "";
		String tmpContentThrough = null;

		boolean ifPassed = true;
		int errorCode = 0;
		String errorMessage = "";

		void handleBigdecimalPrecision(String data, int iPrecision, int maxLength){
			//number of digits before the decimal point(ignoring frontend zeroes)
			int len1 = 0;
			int len2 = 0;
			ifPassed = true;
			errorCode = 0;
			errorMessage = "";
			if(data.startsWith("-")){
				data = data.substring(1);
			}
			data = org.apache.commons.lang.StringUtils.stripStart(data, "0");

			if(data.indexOf(".") >= 0){
				len1 = data.indexOf(".");
				data = org.apache.commons.lang.StringUtils.stripEnd(data, "0");
				len2 = data.length() - (len1 + 1);
			}else{
				len1 = data.length();
			}

			if (iPrecision < len2) {
				ifPassed = false;
				errorCode += 8;
				errorMessage += "|precision Non-matches";
			} else if (maxLength < len1 + iPrecision) {
				ifPassed = false;
				errorCode += 8;
				errorMessage += "|invalid Length setting is unsuitable for Precision";
			}
		}

		int handleErrorCode(int errorCode, int resultErrorCode){
			if (errorCode > 0) {
				if (resultErrorCode > 0) {
					resultErrorCode = 16;
				} else {
					resultErrorCode = errorCode;
				}
			}
			return resultErrorCode;
		}

		String handleErrorMessage(String errorMessage, String resultErrorMessage, String columnLabel){
			if (errorMessage.length() > 0) {
				if (resultErrorMessage.length() > 0) {
					resultErrorMessage += ";"+ errorMessage.replaceFirst("\\|", columnLabel);
				} else {
					resultErrorMessage = errorMessage.replaceFirst("\\|", columnLabel);
				}
			}
			return resultErrorMessage;
		}

		void reset(){
			ifPassedThrough = true;
			errorCodeThrough = 0;
			errorMessageThrough = "";
			resultErrorCodeThrough = 0;
			resultErrorMessageThrough = "";
			tmpContentThrough = null;

			ifPassed = true;
			errorCode = 0;
			errorMessage = "";
		}

		void setRowValue_0(row2Struct row9) {
			resultErrorCodeThrough = handleErrorCode(errorCodeThrough,resultErrorCodeThrough);
			errorCodeThrough = 0;
			resultErrorMessageThrough = handleErrorMessage(errorMessageThrough,resultErrorMessageThrough,"hubId:");
			errorMessageThrough = "";
	// validate nullable (empty as null)
	if ((row9.source == null) || ("".equals(row9.source))) {
		ifPassedThrough = false;
		errorCodeThrough += 4;
		errorMessageThrough += "|empty or null";
	}	try {
		if(
		row9.source != null
		) {
			String tester_tSchemaComplianceCheck_1 = String.valueOf(row9.source);
		}
	} catch(java.lang.Exception e) {
		ifPassedThrough = false;
		errorCodeThrough += 2;
		errorMessageThrough += "|wrong type";
	}
			resultErrorCodeThrough = handleErrorCode(errorCodeThrough,resultErrorCodeThrough);
			errorCodeThrough = 0;
			resultErrorMessageThrough = handleErrorMessage(errorMessageThrough,resultErrorMessageThrough,"source:");
			errorMessageThrough = "";
	// validate nullable (empty as null)
	if ((row9.market == null) || ("".equals(row9.market))) {
		ifPassedThrough = false;
		errorCodeThrough += 4;
		errorMessageThrough += "|empty or null";
	}	try {
		if(
		row9.market != null
		) {
			String tester_tSchemaComplianceCheck_1 = String.valueOf(row9.market);
		}
	} catch(java.lang.Exception e) {
		ifPassedThrough = false;
		errorCodeThrough += 2;
		errorMessageThrough += "|wrong type";
	}
			resultErrorCodeThrough = handleErrorCode(errorCodeThrough,resultErrorCodeThrough);
			errorCodeThrough = 0;
			resultErrorMessageThrough = handleErrorMessage(errorMessageThrough,resultErrorMessageThrough,"market:");
			errorMessageThrough = "";
	// validate nullable (empty as null)
	if ((row9.sourceChannelCode == null) || ("".equals(row9.sourceChannelCode))) {
		ifPassedThrough = false;
		errorCodeThrough += 4;
		errorMessageThrough += "|empty or null";
	}	try {
		if(
		row9.sourceChannelCode != null
		) {
			String tester_tSchemaComplianceCheck_1 = String.valueOf(row9.sourceChannelCode);
		}
	} catch(java.lang.Exception e) {
		ifPassedThrough = false;
		errorCodeThrough += 2;
		errorMessageThrough += "|wrong type";
	}
			resultErrorCodeThrough = handleErrorCode(errorCodeThrough,resultErrorCodeThrough);
			errorCodeThrough = 0;
			resultErrorMessageThrough = handleErrorMessage(errorMessageThrough,resultErrorMessageThrough,"sourceChannelCode:");
			errorMessageThrough = "";	try {
		if(
		row9.geographyCode != null
		&& (!"".equals(row9.geographyCode))
		) {
			String tester_tSchemaComplianceCheck_1 = String.valueOf(row9.geographyCode);
		}
	} catch(java.lang.Exception e) {
		ifPassedThrough = false;
		errorCodeThrough += 2;
		errorMessageThrough += "|wrong type";
	}
			resultErrorCodeThrough = handleErrorCode(errorCodeThrough,resultErrorCodeThrough);
			errorCodeThrough = 0;
			resultErrorMessageThrough = handleErrorMessage(errorMessageThrough,resultErrorMessageThrough,"geographyCode:");
			errorMessageThrough = "";	try {
		if(
		row9.customerCode != null
		&& (!"".equals(row9.customerCode))
		) {
			String tester_tSchemaComplianceCheck_1 = String.valueOf(row9.customerCode);
		}
	} catch(java.lang.Exception e) {
		ifPassedThrough = false;
		errorCodeThrough += 2;
		errorMessageThrough += "|wrong type";
	}
			resultErrorCodeThrough = handleErrorCode(errorCodeThrough,resultErrorCodeThrough);
			errorCodeThrough = 0;
			resultErrorMessageThrough = handleErrorMessage(errorMessageThrough,resultErrorMessageThrough,"customerCode:");
			errorMessageThrough = "";
	// validate nullable (empty as null)
	if ((row9.productCode == null) || ("".equals(row9.productCode))) {
		ifPassedThrough = false;
		errorCodeThrough += 4;
		errorMessageThrough += "|empty or null";
	}	try {
		if(
		row9.productCode != null
		) {
			String tester_tSchemaComplianceCheck_1 = String.valueOf(row9.productCode);
		}
	} catch(java.lang.Exception e) {
		ifPassedThrough = false;
		errorCodeThrough += 2;
		errorMessageThrough += "|wrong type";
	}
			resultErrorCodeThrough = handleErrorCode(errorCodeThrough,resultErrorCodeThrough);
			errorCodeThrough = 0;
			resultErrorMessageThrough = handleErrorMessage(errorMessageThrough,resultErrorMessageThrough,"productCode:");
			errorMessageThrough = "";
	// validate nullable (empty as null)
	if ((row9.date == null) || ("".equals(row9.date))) {
		ifPassedThrough = false;
		errorCodeThrough += 4;
		errorMessageThrough += "|empty or null";
	}
			resultErrorCodeThrough = handleErrorCode(errorCodeThrough,resultErrorCodeThrough);
			errorCodeThrough = 0;
			resultErrorMessageThrough = handleErrorMessage(errorMessageThrough,resultErrorMessageThrough,"date:");
			errorMessageThrough = "";
			resultErrorCodeThrough = handleErrorCode(errorCodeThrough,resultErrorCodeThrough);
			errorCodeThrough = 0;
			resultErrorMessageThrough = handleErrorMessage(errorMessageThrough,resultErrorMessageThrough,"value:");
			errorMessageThrough = "";	try {
		if(
		row9.attribute1 != null
		&& (!"".equals(row9.attribute1))
		) {
			String tester_tSchemaComplianceCheck_1 = String.valueOf(row9.attribute1);
		}
	} catch(java.lang.Exception e) {
		ifPassedThrough = false;
		errorCodeThrough += 2;
		errorMessageThrough += "|wrong type";
	}
			resultErrorCodeThrough = handleErrorCode(errorCodeThrough,resultErrorCodeThrough);
			errorCodeThrough = 0;
			resultErrorMessageThrough = handleErrorMessage(errorMessageThrough,resultErrorMessageThrough,"attribute1:");
			errorMessageThrough = "";	try {
		if(
		row9.attribute2 != null
		&& (!"".equals(row9.attribute2))
		) {
			String tester_tSchemaComplianceCheck_1 = String.valueOf(row9.attribute2);
		}
	} catch(java.lang.Exception e) {
		ifPassedThrough = false;
		errorCodeThrough += 2;
		errorMessageThrough += "|wrong type";
	}
			resultErrorCodeThrough = handleErrorCode(errorCodeThrough,resultErrorCodeThrough);
			errorCodeThrough = 0;
			resultErrorMessageThrough = handleErrorMessage(errorMessageThrough,resultErrorMessageThrough,"attribute2:");
			errorMessageThrough = "";	try {
		if(
		row9.attribute3 != null
		&& (!"".equals(row9.attribute3))
		) {
			String tester_tSchemaComplianceCheck_1 = String.valueOf(row9.attribute3);
		}
	} catch(java.lang.Exception e) {
		ifPassedThrough = false;
		errorCodeThrough += 2;
		errorMessageThrough += "|wrong type";
	}
			resultErrorCodeThrough = handleErrorCode(errorCodeThrough,resultErrorCodeThrough);
			errorCodeThrough = 0;
			resultErrorMessageThrough = handleErrorMessage(errorMessageThrough,resultErrorMessageThrough,"attribute3:");
			errorMessageThrough = "";	try {
		if(
		row9.attribute4 != null
		&& (!"".equals(row9.attribute4))
		) {
			String tester_tSchemaComplianceCheck_1 = String.valueOf(row9.attribute4);
		}
	} catch(java.lang.Exception e) {
		ifPassedThrough = false;
		errorCodeThrough += 2;
		errorMessageThrough += "|wrong type";
	}
			resultErrorCodeThrough = handleErrorCode(errorCodeThrough,resultErrorCodeThrough);
			errorCodeThrough = 0;
			resultErrorMessageThrough = handleErrorMessage(errorMessageThrough,resultErrorMessageThrough,"attribute4:");
			errorMessageThrough = "";	try {
		if(
		row9.attribute5 != null
		&& (!"".equals(row9.attribute5))
		) {
			String tester_tSchemaComplianceCheck_1 = String.valueOf(row9.attribute5);
		}
	} catch(java.lang.Exception e) {
		ifPassedThrough = false;
		errorCodeThrough += 2;
		errorMessageThrough += "|wrong type";
	}
			resultErrorCodeThrough = handleErrorCode(errorCodeThrough,resultErrorCodeThrough);
			errorCodeThrough = 0;
			resultErrorMessageThrough = handleErrorMessage(errorMessageThrough,resultErrorMessageThrough,"attribute5:");
			errorMessageThrough = "";
		}
	}
	RowSetValueUtil_tSchemaComplianceCheck_1 rsvUtil_tSchemaComplianceCheck_1 = new RowSetValueUtil_tSchemaComplianceCheck_1();

 



/**
 * [tSchemaComplianceCheck_1 begin ] stop
 */



	
	/**
	 * [tFlowMeter_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeter_11", false);
		start_Hash.put("tFlowMeter_11", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeter_11";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFlowMeter_11 = 0;
		
    	class BytesLimit65535_tFlowMeter_11{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFlowMeter_11().limitLog4jByte();

    int count_tFlowMeter_11 = 0; 
 



/**
 * [tFlowMeter_11 begin ] stop
 */



	
	/**
	 * [tFilterColumns_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterColumns_1", false);
		start_Hash.put("tFilterColumns_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterColumns_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("copyOfrow8" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterColumns_1 = 0;
		
    	class BytesLimit65535_tFilterColumns_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterColumns_1().limitLog4jByte();


 int nb_line_tFilterColumns_1 = 0;
 



/**
 * [tFilterColumns_1 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_3 = 0;
		
    	class BytesLimit65535_tMap_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_3().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
					globalMap.get( "tHash_Lookup_row13" ))
					;					
					
	

row13Struct row13HashKey = new row13Struct();
row13Struct row13Default = new row13Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfrow8Struct copyOfrow8_tmp = new copyOfrow8Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		
    	class BytesLimit65535_tMap_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_2().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
	int month;
	float value;
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
row8Struct row8_tmp = new row8Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tNormalize_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tNormalize_1", false);
		start_Hash.put("tNormalize_1", System.currentTimeMillis());
		
	
	currentComponent="tNormalize_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tNormalize_1 = 0;
		
    	class BytesLimit65535_tNormalize_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tNormalize_1().limitLog4jByte();

    int nb_line_tNormalize_1 = 0;
        String tmp_tNormalize_1 = null;
        StringBuilder currentRecord_tNormalize_1 = null;
        String [] normalizeRecord_tNormalize_1 = null;
        java.util.Set<String> recordSet_tNormalize_1 = new java.util.HashSet<String>();    

 



/**
 * [tNormalize_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_1 = 0;
		
    	class BytesLimit65535_tJavaRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_1().limitLog4jByte();

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tExtractFields_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tExtractFields_1", false);
		start_Hash.put("tExtractFields_1", System.currentTimeMillis());
		
	
	currentComponent="tExtractFields_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tExtractFields_1 = 0;
		
    	class BytesLimit65535_tExtractFields_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tExtractFields_1().limitLog4jByte();
    int nb_line_tExtractFields_1 = 0;

    class tExtractFields_1Utility
    {
        public String UnPivot(java.util.List<org.bson.Document> document, String key, String value, String keyValue) {
            return document
                    .stream()
                    .filter(x -> keyValue.equals(x.get(key)))
                    .map(x -> x.get(value).toString())
                    .findFirst()
                    .orElse(null);
        }
    }
    tExtractFields_1Utility utility_tExtractFields_1 = new tExtractFields_1Utility();

 



/**
 * [tExtractFields_1 begin ] stop
 */



	
	/**
	 * [tFlowMeter_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeter_13", false);
		start_Hash.put("tFlowMeter_13", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeter_13";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row10" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFlowMeter_13 = 0;
		
    	class BytesLimit65535_tFlowMeter_13{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFlowMeter_13().limitLog4jByte();

    int count_tFlowMeter_13 = 0; 
 



/**
 * [tFlowMeter_13 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
					globalMap.get( "tHash_Lookup_row14" ))
					;					
					
	

row14Struct row14HashKey = new row14Struct();
row14Struct row14Default = new row14Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
row10Struct row10_tmp = new row10Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tMongoDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMongoDBInput_1", false);
		start_Hash.put("tMongoDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tMongoDBInput_1";

	
		int tos_count_tMongoDBInput_1 = 0;
		
    	class BytesLimit65535_tMongoDBInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMongoDBInput_1().limitLog4jByte();

	int nb_line_tMongoDBInput_1 = 0;
	
		
		
			com.mongodb.MongoClient mongo_tMongoDBInput_1=null;
			com.mongodb.client.MongoDatabase db_tMongoDBInput_1=null;
		

			
			
				
				
				mongo_tMongoDBInput_1=(com.mongodb.MongoClient)globalMap.get("mongo_tMongoDBConnection_1");
				db_tMongoDBInput_1 = (com.mongodb.client.MongoDatabase) globalMap.get("db_tMongoDBConnection_1");
				


				
				
					com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBInput_1 = db_tMongoDBInput_1.getCollection("master.records");
				
				
				
				try{
					// Add warning if an index is not in the query.
					boolean needIndexWarning = true;
					String indexList = "";
					
					for (com.mongodb.DBObject index: coll_tMongoDBInput_1.listIndexes(com.mongodb.DBObject.class)) {
					
	                
	                    for (String key: ((com.mongodb.DBObject)index.get("key")).keySet()) {
	                        // The regexp is:
	                        // - contain the db DBcolumnName between two backslashed quotes
	                        // - is followed at some point by a colon
	                        // - there is no comma between the the DBcolumnName and the colon
	                        if  (("{{}, {_id:1, num: 1}}").matches(".*" + key + "[^,]*:.*")) {
	                            // We have an index, do not print error message
	                            needIndexWarning = false;
	                        } else {
	                            // This index is not in the query, add it into the indexList
	                            indexList += ", " + key;
	                        }
	                    }
	                }
	                if ((!"".equals(indexList)) && (needIndexWarning)) {
	                    
	                        System.err.println("tMongoDBInput_1 - The query does not contain any reference an index.  [" + indexList.substring(1) + " ]");
	                        
	                }
	            }catch(com.mongodb.MongoException e){
	            	// caught an exception after issuing the getIndexInfo()
	            	// don't fail the whole job
	            	// maybe due to authorization
	            }

	                	
							java.util.List<org.bson.Document> aggregationStages = new java.util.ArrayList<org.bson.Document>();
						
	                	
	                
	                	
							aggregationStages.add(org.bson.Document.parse("{ $addFields: {'_fileRef': {$arrayToObject: {$map: {input: { $objectToArray: '$file' }, in: {k: {$cond:[{ $eq:[{'$substrCP':['$$this.k',0,1]},{$literal:'$'}] }, { $substrCP:['$$this.k',1,{$strLenCP:'$$this.k'}] }, '$$this.k'] }, v:'$$this.v'} } } } } }"));
						
	                	
	                
	                	
							aggregationStages.add(org.bson.Document.parse("{ $lookup: {from: 'master.files', localField: '_fileRef.id', foreignField: '_id', as: 'file'} }"));
						
	                	
	                
	                	
							aggregationStages.add(org.bson.Document.parse("{ $addFields: {'file': {$mergeObjects: '$file'}} }"));
						
	                	
	                
	                	
							aggregationStages.add(org.bson.Document.parse("{ $match : {'file.metadata.type' : '" + context.getTYPE() + "', 'file.metadata.quotaType' : '" + context.getQUOTA_TYPE() + "' } }"));
						
	                	
	                
	                	
							com.mongodb.client.MongoCursor<org.bson.Document> cursor_tMongoDBInput_1 = coll_tMongoDBInput_1.aggregate(aggregationStages).allowDiskUse(false).iterator();
						
	                
	                
				
				class DBObjectInputUtil_tMongoDBInput_1{
					// Get the node value in embedded document, 
					//If have no embedded document get root document node.
					
					public Object getValue(String parentNode,String currentName,org.bson.Document dbObject){
						Object value=null;
						if(dbObject==null){
							return null;
						}
						if (parentNode == null || "".equals(parentNode)) {
						    if ("*".equals(currentName)) {
						        value = dbObject;
						    } else if (dbObject.get(currentName)!=null){
								value=dbObject.get(currentName);
							}
						}else{
							String objNames[] = objNames = parentNode.split("\\.");
							org.bson.Document currentObj=dbObject;
							for(int i=0;i<objNames.length;i++){
								currentObj=(org.bson.Document)currentObj.get(objNames[i]);
								if(currentObj==null){
									break;
								}
							}
							if ("*".equals(currentName)) {
                                value = currentObj;
                            } else if(currentObj!=null){
								value=currentObj.get(currentName);
							}
						}
						return value;
					}
				}
				DBObjectInputUtil_tMongoDBInput_1 dbObjectInputUtil_tMongoDBInput_1=new DBObjectInputUtil_tMongoDBInput_1();
				java.util.Map<String, String> pathMap_tMongoDBInput_1=new java.util.HashMap<String, String>();
				pathMap_tMongoDBInput_1.put("id","");
				pathMap_tMongoDBInput_1.put("hash","file");
				pathMap_tMongoDBInput_1.put("fiscalStartDate","file.metadata");
				pathMap_tMongoDBInput_1.put("productCode","");
				pathMap_tMongoDBInput_1.put("fields","");

						
				while (cursor_tMongoDBInput_1.hasNext()){
				org.bson.Document o_tMongoDBInput_1 = cursor_tMongoDBInput_1.next();
				nb_line_tMongoDBInput_1++;
				Object valueObj_tMongoDBInput_1=null;
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("id"),"_id",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
					row1.id = valueObj_tMongoDBInput_1.toString();
				}else{
					row1.id = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("hash"),"hash",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
					row1.hash = valueObj_tMongoDBInput_1.toString();
				}else{
					row1.hash = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("fiscalStartDate"),"fiscalStartDate",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
					row1.fiscalStartDate = valueObj_tMongoDBInput_1.toString();
				}else{
					row1.fiscalStartDate = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("productCode"),"sheetName",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
					row1.productCode = valueObj_tMongoDBInput_1.toString();
				}else{
					row1.productCode = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("fields"),"fields",o_tMongoDBInput_1);
				row1.fields = valueObj_tMongoDBInput_1;


 



/**
 * [tMongoDBInput_1 begin ] stop
 */
	
	/**
	 * [tMongoDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_1";

	

 


	tos_count_tMongoDBInput_1++;

/**
 * [tMongoDBInput_1 main ] stop
 */
	
	/**
	 * [tMongoDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_1";

	

 



/**
 * [tMongoDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row14" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow14 = false;
       		  	    	
       		  	    	
 							row14Struct row14ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row14HashKey.hash = row1.hash ;
                        		    		

								
		                        	row14HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row14.lookup( row14HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row14.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row14 != null && tHash_Lookup_row14.getCount(row14HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row14' and it contains more one result from keys :  row14.hash = '" + row14HashKey.hash + "'");
								} // G 071
							

							row14Struct row14 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row14Struct fromLookup_row14 = null;
							row14 = row14Default;
										 
							
								 
							
							
								if (tHash_Lookup_row14 !=null && tHash_Lookup_row14.hasNext()) { // G 099
								
							
								
								fromLookup_row14 = tHash_Lookup_row14.next();

							
							
								} // G 099
							
							

							if(fromLookup_row14 != null) {
								row14 = fromLookup_row14;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

row10 = null;

if(!rejectedInnerJoin_tMap_1 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'row10'
// # Filter conditions 
if( rejectedInnerJoin_tMap_1 ) {
row10_tmp.fiscalStartDate = row1.fiscalStartDate ;
row10_tmp.productCode = row1.productCode ;
row10_tmp.fields = row1.fields;
row10 = row10_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tFlowMeter_13 main ] start
	 */

	

	
	
	currentComponent="tFlowMeter_13";

	

			//row10
			//row10


			
				if(execStat){
					runStat.updateStatOnConnection("row10"+iterateId,1, 1);
				} 
			

		

    count_tFlowMeter_13++; 
 
     row7 = row10;


	tos_count_tFlowMeter_13++;

/**
 * [tFlowMeter_13 main ] stop
 */
	
	/**
	 * [tFlowMeter_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeter_13";

	

 



/**
 * [tFlowMeter_13 process_data_begin ] stop
 */

	
	/**
	 * [tExtractFields_1 main ] start
	 */

	

	
	
	currentComponent="tExtractFields_1";

	

			//row7
			//row7


			
				if(execStat){
					runStat.updateStatOnConnection("row7"+iterateId,1, 1);
				} 
			

		
    List<org.bson.Document> doc_tExtractFields_1 = (List<org.bson.Document>) row7.fields;
    row3.fiscalStartDate = row7.fiscalStartDate;
    row3.market = utility_tExtractFields_1.UnPivot(doc_tExtractFields_1, "tag", "value", "market");
    row3.sourceCode = utility_tExtractFields_1.UnPivot(doc_tExtractFields_1, "tag", "value", "sourceCode");
    row3.geographyCode = utility_tExtractFields_1.UnPivot(doc_tExtractFields_1, "tag", "value", "geographyCode");
    row3.productCode = row7.productCode;
    row3.customerCode = utility_tExtractFields_1.UnPivot(doc_tExtractFields_1, "tag", "value", "customerCode");
    row3.customerName = utility_tExtractFields_1.UnPivot(doc_tExtractFields_1, "tag", "value", "customerName");
    row3.attribute1 = utility_tExtractFields_1.UnPivot(doc_tExtractFields_1, "tag", "value", "attribute1");
    row3.attribute2 = utility_tExtractFields_1.UnPivot(doc_tExtractFields_1, "tag", "value", "attribute2");
    row3.attribute3 = utility_tExtractFields_1.UnPivot(doc_tExtractFields_1, "tag", "value", "attribute3");
    row3.attribute4 = utility_tExtractFields_1.UnPivot(doc_tExtractFields_1, "tag", "value", "attribute4");
    row3.attribute5 = utility_tExtractFields_1.UnPivot(doc_tExtractFields_1, "tag", "value", "attribute5");
    row3.m1 = utility_tExtractFields_1.UnPivot(doc_tExtractFields_1, "tag", "value", "m1");
    row3.m2 = utility_tExtractFields_1.UnPivot(doc_tExtractFields_1, "tag", "value", "m2");
    row3.m3 = utility_tExtractFields_1.UnPivot(doc_tExtractFields_1, "tag", "value", "m3");
    row3.m4 = utility_tExtractFields_1.UnPivot(doc_tExtractFields_1, "tag", "value", "m4");
    row3.m5 = utility_tExtractFields_1.UnPivot(doc_tExtractFields_1, "tag", "value", "m5");
    row3.m6 = utility_tExtractFields_1.UnPivot(doc_tExtractFields_1, "tag", "value", "m6");
    row3.m7 = utility_tExtractFields_1.UnPivot(doc_tExtractFields_1, "tag", "value", "m7");
    row3.m8 = utility_tExtractFields_1.UnPivot(doc_tExtractFields_1, "tag", "value", "m8");
    row3.m9 = utility_tExtractFields_1.UnPivot(doc_tExtractFields_1, "tag", "value", "m9");
    row3.m10 = utility_tExtractFields_1.UnPivot(doc_tExtractFields_1, "tag", "value", "m10");
    row3.m11 = utility_tExtractFields_1.UnPivot(doc_tExtractFields_1, "tag", "value", "m11");
    row3.m12 = utility_tExtractFields_1.UnPivot(doc_tExtractFields_1, "tag", "value", "m12");
    nb_line_tExtractFields_1++;

 


	tos_count_tExtractFields_1++;

/**
 * [tExtractFields_1 main ] stop
 */
	
	/**
	 * [tExtractFields_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tExtractFields_1";

	

 



/**
 * [tExtractFields_1 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

    row4.fiscalStartDate = row3.fiscalStartDate;
row4.market = row3.market;
row4.sourceCode = row3.sourceCode;
row4.geographyCode = row3.geographyCode;
row4.productCode = row3.productCode;
row4.customerCode = row3.customerCode;
row4.customerName = row3.customerName;
row4.attribute1 = row3.attribute1;
row4.attribute2 = row3.attribute2;
row4.attribute3 = row3.attribute3;
row4.attribute4 = row3.attribute4;
row4.attribute5 = row3.attribute5;
row4.date = TalendDate.parseDate("M/d/y", row3.fiscalStartDate);
row4.fields = TalendString.unionString(",", "0:" + row3.m1, "1:" + row3.m2, "2:" + row3.m3, "3:" + row3.m4, "4:" + row3.m5, "5:" + row3.m6, "6:" + row3.m7, "7:" + row3.m8, "8:" + row3.m9, "9:" + row3.m10, "10:" + row3.m11, "11:" + row3.m12);
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tNormalize_1 main ] start
	 */

	

	
	
	currentComponent="tNormalize_1";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		

            normalizeRecord_tNormalize_1 = new String[1];
            if(row4.fields != null) {
				if("".equals(row4.fields)){
		        	normalizeRecord_tNormalize_1[0] = "";
		        }else{
	                
	                		normalizeRecord_tNormalize_1 = row4.fields.split(",",-1);
	                        
                }           
            }
             		int lastNoEmptyIndex_tNormalize_1=normalizeRecord_tNormalize_1.length;
	             	
            	
            	for(int i_tNormalize_1 = 0 ; i_tNormalize_1 < lastNoEmptyIndex_tNormalize_1 ; i_tNormalize_1++) {
		  			
	                currentRecord_tNormalize_1 = new StringBuilder();
	                nb_line_tNormalize_1++;               
	                
	                        	row5.fiscalStartDate = row4.fiscalStartDate;
	                        
	                        	row5.market = row4.market;
	                        
	                        	row5.sourceCode = row4.sourceCode;
	                        
	                        	row5.geographyCode = row4.geographyCode;
	                        
	                        	row5.productCode = row4.productCode;
	                        
	                        	row5.customerCode = row4.customerCode;
	                        
	                        	row5.customerName = row4.customerName;
	                        
	                        	row5.attribute1 = row4.attribute1;
	                        
	                        	row5.attribute2 = row4.attribute2;
	                        
	                        	row5.attribute3 = row4.attribute3;
	                        
	                        	row5.attribute4 = row4.attribute4;
	                        
	                        	row5.attribute5 = row4.attribute5;
	                        
	                        	row5.date = row4.date;
	                        
	                        	row5.fields = normalizeRecord_tNormalize_1[i_tNormalize_1];
		                    

 


	tos_count_tNormalize_1++;

/**
 * [tNormalize_1 main ] stop
 */
	
	/**
	 * [tNormalize_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tNormalize_1";

	

 



/**
 * [tNormalize_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;
Var.month = Integer.valueOf(row5.fields .split(":")[0]);
Var.value = Float.valueOf(row5.fields .split(":")[1]);// ###############################
        // ###############################
        // # Output tables

row8 = null;


// # Output table : 'row8'
row8_tmp.fiscalStartDate = row5.fiscalStartDate ;
row8_tmp.market = row5.market;
row8_tmp.sourceChannelCode = row5.sourceCode;
row8_tmp.geographyCode = row5.geographyCode;
row8_tmp.customerCode = row5.customerCode;
row8_tmp.customerName = row5.customerName;
row8_tmp.productCode = row5.productCode;
row8_tmp.attribute1 = row5.attribute1;
row8_tmp.attribute2 = row5.attribute2;
row8_tmp.attribute3 = row5.attribute3;
row8_tmp.attribute4 = row5.attribute4;
row8_tmp.attribute5 = row5.attribute5;
row8_tmp.date = TalendDate.addDate(row5.date, Var.month, "MM");
row8_tmp.value = Var.value;
row8 = row8_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

			//row8
			//row8


			
				if(execStat){
					runStat.updateStatOnConnection("row8"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row13" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow13 = false;
       		  	    	
       		  	    	
 							row13Struct row13ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		row13HashKey.businessKey = TalendString.unionString("*", TalendDate.formatDate("yyyyMMdd", TalendDate.parseDate("M/d/y", row8.fiscalStartDate)), row8.productCode, row8.market, row8.sourceChannelCode, row8.geographyCode, row8.customerCode) ;
                        		    		

								
		                        	row13HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row13.lookup( row13HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row13 != null && tHash_Lookup_row13.getCount(row13HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row13' and it contains more one result from keys :  row13.businessKey = '" + row13HashKey.businessKey + "'");
								} // G 071
							

							row13Struct row13 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row13Struct fromLookup_row13 = null;
							row13 = row13Default;
										 
							
								 
							
							
								if (tHash_Lookup_row13 !=null && tHash_Lookup_row13.hasNext()) { // G 099
								
							
								
								fromLookup_row13 = tHash_Lookup_row13.next();

							
							
								} // G 099
							
							

							if(fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

copyOfrow8 = null;


// # Output table : 'copyOfrow8'
copyOfrow8_tmp.hubId = row13.id ;
copyOfrow8_tmp.source = context.getSOURCE();
copyOfrow8_tmp.market = row8.market ;
copyOfrow8_tmp.sourceChannelCode = row8.sourceChannelCode ;
copyOfrow8_tmp.geographyCode = row8.geographyCode ;
copyOfrow8_tmp.customerCode = row8.customerCode ;
copyOfrow8_tmp.productCode = row8.productCode ;
copyOfrow8_tmp.date = row8.date ;
copyOfrow8_tmp.value = row8.value;
copyOfrow8_tmp.attribute1 = row8.attribute1 ;
copyOfrow8_tmp.attribute2 = row8.attribute2 ;
copyOfrow8_tmp.attribute3 = row8.attribute3 ;
copyOfrow8_tmp.attribute4 = row8.attribute4 ;
copyOfrow8_tmp.attribute5 = row8.attribute5 ;
copyOfrow8 = copyOfrow8_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "copyOfrow8"
if(copyOfrow8 != null) { 



	
	/**
	 * [tFilterColumns_1 main ] start
	 */

	

	
	
	currentComponent="tFilterColumns_1";

	

			//copyOfrow8
			//copyOfrow8


			
				if(execStat){
					runStat.updateStatOnConnection("copyOfrow8"+iterateId,1, 1);
				} 
			

		
	

	row2.hubId = copyOfrow8.hubId;

	
	row2.source = copyOfrow8.source;

	
	row2.market = copyOfrow8.market;

	
	row2.sourceChannelCode = copyOfrow8.sourceChannelCode;

	
	row2.geographyCode = copyOfrow8.geographyCode;

	
	row2.customerCode = copyOfrow8.customerCode;

	
	row2.productCode = copyOfrow8.productCode;

	
	row2.date = copyOfrow8.date;

	
	row2.value = copyOfrow8.value;

	
	row2.attribute1 = copyOfrow8.attribute1;

	
	row2.attribute2 = copyOfrow8.attribute2;

	
	row2.attribute3 = copyOfrow8.attribute3;

	
	row2.attribute4 = copyOfrow8.attribute4;

	
	row2.attribute5 = copyOfrow8.attribute5;

	
    nb_line_tFilterColumns_1++;

 


	tos_count_tFilterColumns_1++;

/**
 * [tFilterColumns_1 main ] stop
 */
	
	/**
	 * [tFilterColumns_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterColumns_1";

	

 



/**
 * [tFilterColumns_1 process_data_begin ] stop
 */

	
	/**
	 * [tFlowMeter_11 main ] start
	 */

	

	
	
	currentComponent="tFlowMeter_11";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		

    count_tFlowMeter_11++; 
 
     row9 = row2;


	tos_count_tFlowMeter_11++;

/**
 * [tFlowMeter_11 main ] stop
 */
	
	/**
	 * [tFlowMeter_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeter_11";

	

 



/**
 * [tFlowMeter_11 process_data_begin ] stop
 */

	
	/**
	 * [tSchemaComplianceCheck_1 main ] start
	 */

	

	
	
	currentComponent="tSchemaComplianceCheck_1";

	

			//row9
			//row9


			
				if(execStat){
					runStat.updateStatOnConnection("row9"+iterateId,1, 1);
				} 
			

		
	row11 = null;	exception1 = null;
	rsvUtil_tSchemaComplianceCheck_1.setRowValue_0(row9);
	if (rsvUtil_tSchemaComplianceCheck_1.ifPassedThrough) {
		row11 = new row11Struct();
		row11.hubId = row9.hubId;
		row11.source = row9.source;
		row11.market = row9.market;
		row11.sourceChannelCode = row9.sourceChannelCode;
		row11.geographyCode = row9.geographyCode;
		row11.customerCode = row9.customerCode;
		row11.productCode = row9.productCode;
		row11.date = row9.date;
		row11.value = row9.value;
		row11.attribute1 = row9.attribute1;
		row11.attribute2 = row9.attribute2;
		row11.attribute3 = row9.attribute3;
		row11.attribute4 = row9.attribute4;
		row11.attribute5 = row9.attribute5;
	}
	if (!rsvUtil_tSchemaComplianceCheck_1.ifPassedThrough) {
		exception1 = new exception1Struct();
		exception1.hubId = row9.hubId;
		exception1.source = row9.source;
		exception1.market = row9.market;
		exception1.sourceChannelCode = row9.sourceChannelCode;
		exception1.geographyCode = row9.geographyCode;
		exception1.customerCode = row9.customerCode;
		exception1.productCode = row9.productCode;
		exception1.date = row9.date;
		exception1.value = row9.value;
		exception1.attribute1 = row9.attribute1;
		exception1.attribute2 = row9.attribute2;
		exception1.attribute3 = row9.attribute3;
		exception1.attribute4 = row9.attribute4;
		exception1.attribute5 = row9.attribute5;
		exception1.errorCode = String.valueOf(rsvUtil_tSchemaComplianceCheck_1.resultErrorCodeThrough);
		exception1.errorMessage = rsvUtil_tSchemaComplianceCheck_1.resultErrorMessageThrough;
	}
	rsvUtil_tSchemaComplianceCheck_1.reset();

 


	tos_count_tSchemaComplianceCheck_1++;

/**
 * [tSchemaComplianceCheck_1 main ] stop
 */
	
	/**
	 * [tSchemaComplianceCheck_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSchemaComplianceCheck_1";

	

 



/**
 * [tSchemaComplianceCheck_1 process_data_begin ] stop
 */
// Start of branch "row11"
if(row11 != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

			//row11
			//row11


			
				if(execStat){
					runStat.updateStatOnConnection("row11"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_1 = false;
                    pstmt_tDBOutput_1.setInt(1, row11.hubId);

                    if(row11.source == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, row11.source);
}

                    if(row11.market == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, row11.market);
}

                    if(row11.sourceChannelCode == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, row11.sourceChannelCode);
}

                    if(row11.geographyCode == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, row11.geographyCode);
}

                    if(row11.customerCode == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, row11.customerCode);
}

                    if(row11.productCode == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(7, row11.productCode);
}

                    if(row11.date != null) {
pstmt_tDBOutput_1.setTimestamp(8, new java.sql.Timestamp(row11.date.getTime()));
} else {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_1.setFloat(9, row11.value);

                    if(row11.attribute1 == null) {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(10, row11.attribute1);
}

                    if(row11.attribute2 == null) {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(11, row11.attribute2);
}

                    if(row11.attribute3 == null) {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(12, row11.attribute3);
}

                    if(row11.attribute4 == null) {
pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(13, row11.attribute4);
}

                    if(row11.attribute5 == null) {
pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(14, row11.attribute5);
}

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
            if(!whetherReject_tDBOutput_1) {
            }
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "row11"




// Start of branch "exception1"
if(exception1 != null) { 



	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

			//exception1
			//exception1


			
				if(execStat){
					runStat.updateStatOnConnection("exception1"+iterateId,1, 1);
				} 
			

		
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        			paraList_tRunJob_1.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_1.put("TYPE", context.TYPE);
			paraList_tRunJob_1.add("--context_type " + "TYPE" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("QUOTA_TYPE", context.QUOTA_TYPE);
			paraList_tRunJob_1.add("--context_type " + "QUOTA_TYPE" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("SOURCE", context.SOURCE);
			paraList_tRunJob_1.add("--context_type " + "SOURCE" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("TABLE", context.TABLE);
			paraList_tRunJob_1.add("--context_type " + "TABLE" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("COUNTRY", context.COUNTRY);
			paraList_tRunJob_1.add("--context_type " + "COUNTRY" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("DEEPSEA_AUTH_TOKEN", context.DEEPSEA_AUTH_TOKEN);
			paraList_tRunJob_1.add("--context_type " + "DEEPSEA_AUTH_TOKEN" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("DEEPSEA_HOSTNAME", context.DEEPSEA_HOSTNAME);
			paraList_tRunJob_1.add("--context_type " + "DEEPSEA_HOSTNAME" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("MONGODB_HOSTNAME", context.MONGODB_HOSTNAME);
			paraList_tRunJob_1.add("--context_type " + "MONGODB_HOSTNAME" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("POSTGRES_HOSTNAME", context.POSTGRES_HOSTNAME);
			paraList_tRunJob_1.add("--context_type " + "POSTGRES_HOSTNAME" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("WEBJOB_NAME", context.WEBJOB_NAME);
			paraList_tRunJob_1.add("--context_type " + "WEBJOB_NAME" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
			if(value_tRunJob_1!=null) {  
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
			} else {
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = globalMap.get("COUNTRY_ID");
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param COUNTRY_ID=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param COUNTRY_ID=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("COUNTRY_ID", obj_tRunJob_1);
	
		obj_tRunJob_1 = globalMap.get("WEBJOB_ID");
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param WEBJOB_ID=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param WEBJOB_ID=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("WEBJOB_ID", obj_tRunJob_1);
	
		obj_tRunJob_1 = row1.id;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param RECORD_ID=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param RECORD_ID=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("RECORD_ID", obj_tRunJob_1);
	
		obj_tRunJob_1 = exception1.errorMessage.split(":")[0];
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param FIELD_NAME=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param FIELD_NAME=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("FIELD_NAME", obj_tRunJob_1);
	
		obj_tRunJob_1 = "";
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param FIELD_VALUE=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param FIELD_VALUE=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("FIELD_VALUE", obj_tRunJob_1);
	
		obj_tRunJob_1 = "Schema invalid:" + exception1.errorMessage;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param REASON=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param REASON=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("REASON", obj_tRunJob_1);
	
	
		deepsea.dsendexception_0_1.dSendException childJob_tRunJob_1 = new deepsea.dsendexception_0_1.dSendException();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_1.getErrorCode());
			
	            
	    	if(childJob_tRunJob_1.getErrorCode() == null){
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
		    }
		    if (childJob_tRunJob_1.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_1.getException().getClass().getName() + ": " + childJob_tRunJob_1.getException().getMessage());
				}
			
	  	

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */

} // End of branch "exception1"




	
	/**
	 * [tSchemaComplianceCheck_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSchemaComplianceCheck_1";

	

 



/**
 * [tSchemaComplianceCheck_1 process_data_end ] stop
 */



	
	/**
	 * [tFlowMeter_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeter_11";

	

 



/**
 * [tFlowMeter_11 process_data_end ] stop
 */



	
	/**
	 * [tFilterColumns_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterColumns_1";

	

 



/**
 * [tFilterColumns_1 process_data_end ] stop
 */

} // End of branch "copyOfrow8"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */
		// end for
	}



	
	/**
	 * [tNormalize_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tNormalize_1";

	

 



/**
 * [tNormalize_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tExtractFields_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tExtractFields_1";

	

 



/**
 * [tExtractFields_1 process_data_end ] stop
 */



	
	/**
	 * [tFlowMeter_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeter_13";

	

 



/**
 * [tFlowMeter_13 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tMongoDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_1";

	

 



/**
 * [tMongoDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tMongoDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_1";

	

		}
		
globalMap.put("tMongoDBInput_1_NB_LINE", nb_line_tMongoDBInput_1);

 

ok_Hash.put("tMongoDBInput_1", true);
end_Hash.put("tMongoDBInput_1", System.currentTimeMillis());




/**
 * [tMongoDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row14 != null) {
						tHash_Lookup_row14.endGet();
					}
					globalMap.remove( "tHash_Lookup_row14" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFlowMeter_13 end ] start
	 */

	

	
	
	currentComponent="tFlowMeter_13";

	

	tFlowMeterCatcher_1.addMessage("row10", new Integer(count_tFlowMeter_13), "null", "", "tFlowMeter_13");

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row10"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFlowMeter_13", true);
end_Hash.put("tFlowMeter_13", System.currentTimeMillis());




/**
 * [tFlowMeter_13 end ] stop
 */

	
	/**
	 * [tExtractFields_1 end ] start
	 */

	

	
	
	currentComponent="tExtractFields_1";

	

    globalMap.put("tExtractFields_1_NB_LINE",nb_line_tExtractFields_1);


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row7"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tExtractFields_1", true);
end_Hash.put("tExtractFields_1", System.currentTimeMillis());




/**
 * [tExtractFields_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tNormalize_1 end ] start
	 */

	

	
	
	currentComponent="tNormalize_1";

	

    globalMap.put("tNormalize_1_NB_LINE", nb_line_tNormalize_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tNormalize_1", true);
end_Hash.put("tNormalize_1", System.currentTimeMillis());




/**
 * [tNormalize_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row13 != null) {
						tHash_Lookup_row13.endGet();
					}
					globalMap.remove( "tHash_Lookup_row13" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row8"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tFilterColumns_1 end ] start
	 */

	

	
	
	currentComponent="tFilterColumns_1";

	

globalMap.put("tFilterColumns_1_NB_LINE",nb_line_tFilterColumns_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("copyOfrow8"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterColumns_1", true);
end_Hash.put("tFilterColumns_1", System.currentTimeMillis());




/**
 * [tFilterColumns_1 end ] stop
 */

	
	/**
	 * [tFlowMeter_11 end ] start
	 */

	

	
	
	currentComponent="tFlowMeter_11";

	

	tFlowMeterCatcher_1.addMessage("row2", new Integer(count_tFlowMeter_11), "null", "", "tFlowMeter_11");

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFlowMeter_11", true);
end_Hash.put("tFlowMeter_11", System.currentTimeMillis());




/**
 * [tFlowMeter_11 end ] stop
 */

	
	/**
	 * [tSchemaComplianceCheck_1 end ] start
	 */

	

	
	
	currentComponent="tSchemaComplianceCheck_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row9"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSchemaComplianceCheck_1", true);
end_Hash.put("tSchemaComplianceCheck_1", System.currentTimeMillis());




/**
 * [tSchemaComplianceCheck_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			
	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
        }


	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row11"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tDBCommit_1Process(globalMap);



/**
 * [tDBOutput_1 end ] stop
 */




	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("exception1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */

































				}//end the resume

				
							tFlowMeterCatcher_1Process(globalMap);
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row13"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row14"); 
				     			
				try{
					
	
	/**
	 * [tMongoDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_1";

	

 



/**
 * [tMongoDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFlowMeter_13 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeter_13";

	

 



/**
 * [tFlowMeter_13 finally ] stop
 */

	
	/**
	 * [tExtractFields_1 finally ] start
	 */

	

	
	
	currentComponent="tExtractFields_1";

	

 



/**
 * [tExtractFields_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tNormalize_1 finally ] start
	 */

	

	
	
	currentComponent="tNormalize_1";

	

 



/**
 * [tNormalize_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tFilterColumns_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterColumns_1";

	

 



/**
 * [tFilterColumns_1 finally ] stop
 */

	
	/**
	 * [tFlowMeter_11 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeter_11";

	

 



/**
 * [tFlowMeter_11 finally ] stop
 */

	
	/**
	 * [tSchemaComplianceCheck_1 finally ] start
	 */

	

	
	
	currentComponent="tSchemaComplianceCheck_1";

	

 



/**
 * [tSchemaComplianceCheck_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	

 



/**
 * [tDBOutput_1 finally ] stop
 */




	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */

































				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBCommit_1", false);
		start_Hash.put("tDBCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tDBCommit_1";

	
		int tos_count_tDBCommit_1 = 0;
		
    	class BytesLimit65535_tDBCommit_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBCommit_1().limitLog4jByte();

 



/**
 * [tDBCommit_1 begin ] stop
 */
	
	/**
	 * [tDBCommit_1 main ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

	java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed())
	{
	
		try{
	
			
			conn_tDBCommit_1.commit();
			
	
		}finally{
			
			conn_tDBCommit_1.close();
			
	    }
	
	}

 


	tos_count_tDBCommit_1++;

/**
 * [tDBCommit_1 main ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_end ] stop
 */
	
	/**
	 * [tDBCommit_1 end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 

ok_Hash.put("tDBCommit_1", true);
end_Hash.put("tDBCommit_1", System.currentTimeMillis());




/**
 * [tDBCommit_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableComparableLookupRow<row13Struct> {
    final static byte[] commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];
    static byte[] commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String businessKey;

				public String getBusinessKey () {
					return this.businessKey;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.businessKey == null) ? 0 : this.businessKey.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row13Struct other = (row13Struct) obj;
		
						if (this.businessKey == null) {
							if (other.businessKey != null)
								return false;
						
						} else if (!this.businessKey.equals(other.businessKey))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row13Struct other) {

		other.id = this.id;
	            other.businessKey = this.businessKey;
	            
	}

	public void copyKeysDataTo(row13Struct other) {

		other.businessKey = this.businessKey;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length) {
				if(length < 1024 && commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length == 0) {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[1024];
				} else {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length);
			strReturn = new String(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE) {

        	try {

        		int length = 0;
		
					this.businessKey = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.businessKey,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.id = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.id, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",businessKey="+businessKey);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.businessKey, other.businessKey);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();




	
	/**
	 * [tAdvancedHash_row13 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row13", false);
		start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row13";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row13" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row13 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row13{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row13().limitLog4jByte();

			   		// connection name:row13
			   		// source node:tDBInput_1 - inputs:(after_tMongoDBInput_1) outputs:(row13,row13) | target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
			   		// linked node: tMap_3 - inputs:(row8,row13) outputs:(copyOfrow8)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row13Struct>getLookup(matchingModeEnum_row13);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row13 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
    	class BytesLimit65535_tDBInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBInput_1().limitLog4jByte();
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
		        conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n	id,\n	business_key\nFROM\n	" + globalMap.get("HUB_TABLE") + "\nWHERE\n	source='" + context.getSOURCE() + "'";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row13.id = null;
							} else {
		                          
            if(rs_tDBInput_1.getObject(1) != null) {
                row13.id = rs_tDBInput_1.getInt(1);
            } else {
                    row13.id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row13.businessKey = null;
							} else {
	                         		
        	row13.businessKey = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

			//row13
			//row13


			
				if(execStat){
					runStat.updateStatOnConnection("row13"+iterateId,1, 1);
				} 
			

		


			   
			   

					row13Struct row13_HashRow = new row13Struct();
		   	   	   
				
				row13_HashRow.id = row13.id;
				
				row13_HashRow.businessKey = row13.businessKey;
				
			tHash_Lookup_row13.put(row13_HashRow);
			
            




 


	tos_count_tAdvancedHash_row13++;

/**
 * [tAdvancedHash_row13 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	stmt_tDBInput_1.close();

}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

tHash_Lookup_row13.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row13"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row13", true);
end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());




/**
 * [tAdvancedHash_row13 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableComparableLookupRow<row14Struct> {
    final static byte[] commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];
    static byte[] commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String hash;

				public String getHash () {
					return this.hash;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.hash == null) ? 0 : this.hash.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row14Struct other = (row14Struct) obj;
		
						if (this.hash == null) {
							if (other.hash != null)
								return false;
						
						} else if (!this.hash.equals(other.hash))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row14Struct other) {

		other.hash = this.hash;
	            
	}

	public void copyKeysDataTo(row14Struct other) {

		other.hash = this.hash;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length) {
				if(length < 1024 && commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length == 0) {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[1024];
				} else {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length);
			strReturn = new String(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE) {

        	try {

        		int length = 0;
		
					this.hash = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.hash,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("hash="+hash);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.hash, other.hash);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();




	
	/**
	 * [tAdvancedHash_row14 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row14", false);
		start_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row14";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row14" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row14 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row14{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row14().limitLog4jByte();

			   		// connection name:row14
			   		// source node:tDBInput_2 - inputs:(after_tMongoDBInput_1) outputs:(row14,row14) | target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row14) outputs:(row10)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row14Struct>getLookup(matchingModeEnum_row14);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row14 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
    	class BytesLimit65535_tDBInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBInput_2().limitLog4jByte();
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
		        conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "select distinct\n	hash\nfrom\n	" + globalMap.get("HUB_TABLE") + " as a inner join " + globalMap.get("SAT_TABLE") + " as b on a.id=b.hub_id\nwhere\n	a.source='" + context.getSOURCE() + "'";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row14.hash = null;
							} else {
	                         		
        	row14.hash = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

			//row14
			//row14


			
				if(execStat){
					runStat.updateStatOnConnection("row14"+iterateId,1, 1);
				} 
			

		


			   
			   

					row14Struct row14_HashRow = new row14Struct();
		   	   	   
				
				row14_HashRow.hash = row14.hash;
				
			tHash_Lookup_row14.put(row14_HashRow);
			
            




 


	tos_count_tAdvancedHash_row14++;

/**
 * [tAdvancedHash_row14 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

 



/**
 * [tAdvancedHash_row14 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row14 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

 



/**
 * [tAdvancedHash_row14 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	stmt_tDBInput_2.close();

}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

tHash_Lookup_row14.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row14"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row14", true);
end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());




/**
 * [tAdvancedHash_row14 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

 



/**
 * [tAdvancedHash_row14 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		
    	class BytesLimit65535_tPrejob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPrejob_1().limitLog4jByte();

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tMongoDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tMongoDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tMongoDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMongoDBConnection_1", false);
		start_Hash.put("tMongoDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tMongoDBConnection_1";

	
		int tos_count_tMongoDBConnection_1 = 0;
		
    	class BytesLimit65535_tMongoDBConnection_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMongoDBConnection_1().limitLog4jByte();

			java.util.logging.Logger.getLogger("org.mongodb.driver").setLevel(java.util.logging.Level.SEVERE);
    // Empty client options
    com.mongodb.MongoClientOptions clientOptions_tMongoDBConnection_1 = new com.mongodb.MongoClientOptions.Builder().build();

    // Empty client credentials list
    java.util.List<com.mongodb.MongoCredential> mongoCredentialList_tMongoDBConnection_1 = new java.util.ArrayList<com.mongodb.MongoCredential>();

        com.mongodb.ServerAddress serverAddress_tMongoDBConnection_1 = new com.mongodb.ServerAddress(context.getMONGODB_HOSTNAME(), 27017);
		com.mongodb.Mongo mongo_tMongoDBConnection_1 = new com.mongodb.MongoClient(serverAddress_tMongoDBConnection_1, mongoCredentialList_tMongoDBConnection_1, clientOptions_tMongoDBConnection_1);
        
    mongo_tMongoDBConnection_1.getAddress() ;
		com.mongodb.client.MongoDatabase db_tMongoDBConnection_1 = ((com.mongodb.MongoClient)mongo_tMongoDBConnection_1).getDatabase("DEEPSEA");
	
    
    globalMap.put("mongo_tMongoDBConnection_1", mongo_tMongoDBConnection_1);
    globalMap.put("db_tMongoDBConnection_1", db_tMongoDBConnection_1);

 



/**
 * [tMongoDBConnection_1 begin ] stop
 */
	
	/**
	 * [tMongoDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tMongoDBConnection_1";

	

 


	tos_count_tMongoDBConnection_1++;

/**
 * [tMongoDBConnection_1 main ] stop
 */
	
	/**
	 * [tMongoDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMongoDBConnection_1";

	

 



/**
 * [tMongoDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tMongoDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMongoDBConnection_1";

	

 



/**
 * [tMongoDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tMongoDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tMongoDBConnection_1";

	

 

ok_Hash.put("tMongoDBConnection_1", true);
end_Hash.put("tMongoDBConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tMongoDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMongoDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tMongoDBConnection_1";

	

 



/**
 * [tMongoDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		
    	class BytesLimit65535_tDBConnection_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBConnection_1().limitLog4jByte();


	
		String url_tDBConnection_1 = "jdbc:postgresql://"+context.getPOSTGRES_HOSTNAME()+":"+"5432"+"/"+"deepsea"; 

	String dbUser_tDBConnection_1 = "postgres";
	
	
		 
	final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("8f24fd5aa89bb403f4f7aba1746784ea");
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	

	java.sql.Connection conn_tDBConnection_1 = null;
	
		java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 =  java.sql.DriverManager.getDrivers();
    while (drivers_tDBConnection_1.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
        java.util.List<String> driverList_tDBConnection_1 = java.util.Arrays.<String>asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver");
        if (driverList_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
                java.sql.DriverManager.registerDriver(d_tDBConnection_1);
            } catch (java.lang.Exception e_tDBConnection_1) {
            		//do nothing
            }
        }
    }
					String driverClass_tDBConnection_1 = "org.postgresql.Driver";
			java.lang.Class.forName(driverClass_tDBConnection_1);
		
		conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tDBConnection_1","");

	globalMap.put("conn_" + "tDBConnection_1",conn_tDBConnection_1);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tSetGlobalVar_1Process(globalMap);



/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tSetGlobalVar_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
		int tos_count_tSetGlobalVar_1 = 0;
		
    	class BytesLimit65535_tSetGlobalVar_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSetGlobalVar_1().limitLog4jByte();

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

globalMap.put("HUB_TABLE", "hub_sales_objective");
globalMap.put("SAT_TABLE", "sat_" + context.getTABLE());

 


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_end ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tMongoDBInput_2Process(globalMap);



/**
 * [tSetGlobalVar_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];
    static byte[] commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length) {
				if(length < 1024 && commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length == 0) {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[1024];
				} else {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length);
			strReturn = new String(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMongoDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMongoDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();




	
	/**
	 * [tSetGlobalVar_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_2", false);
		start_Hash.put("tSetGlobalVar_2", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row12" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSetGlobalVar_2 = 0;
		
    	class BytesLimit65535_tSetGlobalVar_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSetGlobalVar_2().limitLog4jByte();

 



/**
 * [tSetGlobalVar_2 begin ] stop
 */



	
	/**
	 * [tMongoDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMongoDBInput_2", false);
		start_Hash.put("tMongoDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tMongoDBInput_2";

	
		int tos_count_tMongoDBInput_2 = 0;
		
    	class BytesLimit65535_tMongoDBInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMongoDBInput_2().limitLog4jByte();

	int nb_line_tMongoDBInput_2 = 0;
	
		
		
			com.mongodb.MongoClient mongo_tMongoDBInput_2=null;
			com.mongodb.client.MongoDatabase db_tMongoDBInput_2=null;
		

			
			
				
				
				mongo_tMongoDBInput_2=(com.mongodb.MongoClient)globalMap.get("mongo_tMongoDBConnection_1");
				db_tMongoDBInput_2 = (com.mongodb.client.MongoDatabase) globalMap.get("db_tMongoDBConnection_1");
				


				
				
					com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBInput_2 = db_tMongoDBInput_2.getCollection("countries");
				
				
				
				try{
					// Add warning if an index is not in the query.
					boolean needIndexWarning = true;
					String indexList = "";
					
					for (com.mongodb.DBObject index: coll_tMongoDBInput_2.listIndexes(com.mongodb.DBObject.class)) {
					
	                
	                    for (String key: ((com.mongodb.DBObject)index.get("key")).keySet()) {
	                        // The regexp is:
	                        // - contain the db DBcolumnName between two backslashed quotes
	                        // - is followed at some point by a colon
	                        // - there is no comma between the the DBcolumnName and the colon
	                        if  (("{'name': '" + context.getCOUNTRY() + "'}, {'_id':1}").matches(".*" + key + "[^,]*:.*")) {
	                            // We have an index, do not print error message
	                            needIndexWarning = false;
	                        } else {
	                            // This index is not in the query, add it into the indexList
	                            indexList += ", " + key;
	                        }
	                    }
	                }
	                if ((!"".equals(indexList)) && (needIndexWarning)) {
	                    
	                        System.err.println("tMongoDBInput_2 - The query does not contain any reference an index.  [" + indexList.substring(1) + " ]");
	                        
	                }
	            }catch(com.mongodb.MongoException e){
	            	// caught an exception after issuing the getIndexInfo()
	            	// don't fail the whole job
	            	// maybe due to authorization
	            }

	                
	                
					org.bson.Document myQuery_tMongoDBInput_2 = org.bson.Document.parse("{'name': '" + context.getCOUNTRY() + "'}, {'_id':1}");
	                com.mongodb.client.FindIterable<org.bson.Document> fi_tMongoDBInput_2 = coll_tMongoDBInput_2.find(myQuery_tMongoDBInput_2).noCursorTimeout(false);
					
	                
		  			
		  			

		  			 
	                
				
				class DBObjectInputUtil_tMongoDBInput_2{
					// Get the node value in embedded document, 
					//If have no embedded document get root document node.
					
					public Object getValue(String parentNode,String currentName,org.bson.Document dbObject){
						Object value=null;
						if(dbObject==null){
							return null;
						}
						if (parentNode == null || "".equals(parentNode)) {
						    if ("*".equals(currentName)) {
						        value = dbObject;
						    } else if (dbObject.get(currentName)!=null){
								value=dbObject.get(currentName);
							}
						}else{
							String objNames[] = objNames = parentNode.split("\\.");
							org.bson.Document currentObj=dbObject;
							for(int i=0;i<objNames.length;i++){
								currentObj=(org.bson.Document)currentObj.get(objNames[i]);
								if(currentObj==null){
									break;
								}
							}
							if ("*".equals(currentName)) {
                                value = currentObj;
                            } else if(currentObj!=null){
								value=currentObj.get(currentName);
							}
						}
						return value;
					}
				}
				DBObjectInputUtil_tMongoDBInput_2 dbObjectInputUtil_tMongoDBInput_2=new DBObjectInputUtil_tMongoDBInput_2();
				java.util.Map<String, String> pathMap_tMongoDBInput_2=new java.util.HashMap<String, String>();
				pathMap_tMongoDBInput_2.put("id","");
						
					com.mongodb.BasicDBObject orderBy_tMongoDBInput_2 = new com.mongodb.BasicDBObject();
						
		  		
		  		orderBy_tMongoDBInput_2.put("num",1);
						
					fi_tMongoDBInput_2.sort(orderBy_tMongoDBInput_2);
						
				

						
					com.mongodb.client.MongoCursor<org.bson.Document> cursor_tMongoDBInput_2 = fi_tMongoDBInput_2.iterator();
						
				while (cursor_tMongoDBInput_2.hasNext()){
				org.bson.Document o_tMongoDBInput_2 = cursor_tMongoDBInput_2.next();
				nb_line_tMongoDBInput_2++;
				Object valueObj_tMongoDBInput_2=null;
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("id"),"_id",o_tMongoDBInput_2);
				if(valueObj_tMongoDBInput_2!=null && valueObj_tMongoDBInput_2.toString().length() > 0) {
					row12.id = valueObj_tMongoDBInput_2.toString();
				}else{
					row12.id = null;
				}


 



/**
 * [tMongoDBInput_2 begin ] stop
 */
	
	/**
	 * [tMongoDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_2";

	

 


	tos_count_tMongoDBInput_2++;

/**
 * [tMongoDBInput_2 main ] stop
 */
	
	/**
	 * [tMongoDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_2";

	

 



/**
 * [tMongoDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tSetGlobalVar_2 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

			//row12
			//row12


			
				if(execStat){
					runStat.updateStatOnConnection("row12"+iterateId,1, 1);
				} 
			

		

globalMap.put("COUNTRY_ID", row12.id);

 


	tos_count_tSetGlobalVar_2++;

/**
 * [tSetGlobalVar_2 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

 



/**
 * [tSetGlobalVar_2 process_data_begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

 



/**
 * [tSetGlobalVar_2 process_data_end ] stop
 */



	
	/**
	 * [tMongoDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_2";

	

 



/**
 * [tMongoDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tMongoDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_2";

	

		}
		
globalMap.put("tMongoDBInput_2_NB_LINE", nb_line_tMongoDBInput_2);

 

ok_Hash.put("tMongoDBInput_2", true);
end_Hash.put("tMongoDBInput_2", System.currentTimeMillis());




/**
 * [tMongoDBInput_2 end ] stop
 */

	
	/**
	 * [tSetGlobalVar_2 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row12"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSetGlobalVar_2", true);
end_Hash.put("tSetGlobalVar_2", System.currentTimeMillis());




/**
 * [tSetGlobalVar_2 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMongoDBInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tMongoDBInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMongoDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_2";

	

 



/**
 * [tMongoDBInput_2 finally ] stop
 */

	
	/**
	 * [tSetGlobalVar_2 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

 



/**
 * [tSetGlobalVar_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMongoDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];
    static byte[] commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length) {
				if(length < 1024 && commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length == 0) {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[1024];
				} else {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length);
			strReturn = new String(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMongoDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMongoDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();




	
	/**
	 * [tSetGlobalVar_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_3", false);
		start_Hash.put("tSetGlobalVar_3", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row16" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSetGlobalVar_3 = 0;
		
    	class BytesLimit65535_tSetGlobalVar_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSetGlobalVar_3().limitLog4jByte();

 



/**
 * [tSetGlobalVar_3 begin ] stop
 */



	
	/**
	 * [tMongoDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMongoDBInput_3", false);
		start_Hash.put("tMongoDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tMongoDBInput_3";

	
		int tos_count_tMongoDBInput_3 = 0;
		
    	class BytesLimit65535_tMongoDBInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMongoDBInput_3().limitLog4jByte();

	int nb_line_tMongoDBInput_3 = 0;
	
		
		
			com.mongodb.MongoClient mongo_tMongoDBInput_3=null;
			com.mongodb.client.MongoDatabase db_tMongoDBInput_3=null;
		

			
			
				
				
				mongo_tMongoDBInput_3=(com.mongodb.MongoClient)globalMap.get("mongo_tMongoDBConnection_1");
				db_tMongoDBInput_3 = (com.mongodb.client.MongoDatabase) globalMap.get("db_tMongoDBConnection_1");
				


				
				
					com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBInput_3 = db_tMongoDBInput_3.getCollection("webjobs");
				
				
				
				try{
					// Add warning if an index is not in the query.
					boolean needIndexWarning = true;
					String indexList = "";
					
					for (com.mongodb.DBObject index: coll_tMongoDBInput_3.listIndexes(com.mongodb.DBObject.class)) {
					
	                
	                    for (String key: ((com.mongodb.DBObject)index.get("key")).keySet()) {
	                        // The regexp is:
	                        // - contain the db DBcolumnName between two backslashed quotes
	                        // - is followed at some point by a colon
	                        // - there is no comma between the the DBcolumnName and the colon
	                        if  (("{'name': '" + context.getWEBJOB_NAME() + "'}, {'_id':1}").matches(".*" + key + "[^,]*:.*")) {
	                            // We have an index, do not print error message
	                            needIndexWarning = false;
	                        } else {
	                            // This index is not in the query, add it into the indexList
	                            indexList += ", " + key;
	                        }
	                    }
	                }
	                if ((!"".equals(indexList)) && (needIndexWarning)) {
	                    
	                        System.err.println("tMongoDBInput_3 - The query does not contain any reference an index.  [" + indexList.substring(1) + " ]");
	                        
	                }
	            }catch(com.mongodb.MongoException e){
	            	// caught an exception after issuing the getIndexInfo()
	            	// don't fail the whole job
	            	// maybe due to authorization
	            }

	                
	                
					org.bson.Document myQuery_tMongoDBInput_3 = org.bson.Document.parse("{'name': '" + context.getWEBJOB_NAME() + "'}, {'_id':1}");
	                com.mongodb.client.FindIterable<org.bson.Document> fi_tMongoDBInput_3 = coll_tMongoDBInput_3.find(myQuery_tMongoDBInput_3).noCursorTimeout(false);
					
	                
		  			
		  			

		  			 
	                
				
				class DBObjectInputUtil_tMongoDBInput_3{
					// Get the node value in embedded document, 
					//If have no embedded document get root document node.
					
					public Object getValue(String parentNode,String currentName,org.bson.Document dbObject){
						Object value=null;
						if(dbObject==null){
							return null;
						}
						if (parentNode == null || "".equals(parentNode)) {
						    if ("*".equals(currentName)) {
						        value = dbObject;
						    } else if (dbObject.get(currentName)!=null){
								value=dbObject.get(currentName);
							}
						}else{
							String objNames[] = objNames = parentNode.split("\\.");
							org.bson.Document currentObj=dbObject;
							for(int i=0;i<objNames.length;i++){
								currentObj=(org.bson.Document)currentObj.get(objNames[i]);
								if(currentObj==null){
									break;
								}
							}
							if ("*".equals(currentName)) {
                                value = currentObj;
                            } else if(currentObj!=null){
								value=currentObj.get(currentName);
							}
						}
						return value;
					}
				}
				DBObjectInputUtil_tMongoDBInput_3 dbObjectInputUtil_tMongoDBInput_3=new DBObjectInputUtil_tMongoDBInput_3();
				java.util.Map<String, String> pathMap_tMongoDBInput_3=new java.util.HashMap<String, String>();
				pathMap_tMongoDBInput_3.put("id","");

						
					com.mongodb.client.MongoCursor<org.bson.Document> cursor_tMongoDBInput_3 = fi_tMongoDBInput_3.iterator();
						
				while (cursor_tMongoDBInput_3.hasNext()){
				org.bson.Document o_tMongoDBInput_3 = cursor_tMongoDBInput_3.next();
				nb_line_tMongoDBInput_3++;
				Object valueObj_tMongoDBInput_3=null;
                    valueObj_tMongoDBInput_3=dbObjectInputUtil_tMongoDBInput_3.getValue(pathMap_tMongoDBInput_3.get("id"),"_id",o_tMongoDBInput_3);
				if(valueObj_tMongoDBInput_3!=null && valueObj_tMongoDBInput_3.toString().length() > 0) {
					row16.id = valueObj_tMongoDBInput_3.toString();
				}else{
					row16.id = null;
				}


 



/**
 * [tMongoDBInput_3 begin ] stop
 */
	
	/**
	 * [tMongoDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_3";

	

 


	tos_count_tMongoDBInput_3++;

/**
 * [tMongoDBInput_3 main ] stop
 */
	
	/**
	 * [tMongoDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_3";

	

 



/**
 * [tMongoDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tSetGlobalVar_3 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_3";

	

			//row16
			//row16


			
				if(execStat){
					runStat.updateStatOnConnection("row16"+iterateId,1, 1);
				} 
			

		

globalMap.put("WEBJOB_ID", row16.id);

 


	tos_count_tSetGlobalVar_3++;

/**
 * [tSetGlobalVar_3 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_3";

	

 



/**
 * [tSetGlobalVar_3 process_data_begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_3";

	

 



/**
 * [tSetGlobalVar_3 process_data_end ] stop
 */



	
	/**
	 * [tMongoDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_3";

	

 



/**
 * [tMongoDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tMongoDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_3";

	

		}
		
globalMap.put("tMongoDBInput_3_NB_LINE", nb_line_tMongoDBInput_3);

 

ok_Hash.put("tMongoDBInput_3", true);
end_Hash.put("tMongoDBInput_3", System.currentTimeMillis());




/**
 * [tMongoDBInput_3 end ] stop
 */

	
	/**
	 * [tSetGlobalVar_3 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_3";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row16"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSetGlobalVar_3", true);
end_Hash.put("tSetGlobalVar_3", System.currentTimeMillis());




/**
 * [tSetGlobalVar_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMongoDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_3";

	

 



/**
 * [tMongoDBInput_3 finally ] stop
 */

	
	/**
	 * [tSetGlobalVar_3 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_3";

	

 



/**
 * [tSetGlobalVar_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMongoDBInput_3_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		
    	class BytesLimit65535_tPostjob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostjob_1().limitLog4jByte();

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tMongoDBClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tMongoDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMongoDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tMongoDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMongoDBClose_1", false);
		start_Hash.put("tMongoDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tMongoDBClose_1";

	
		int tos_count_tMongoDBClose_1 = 0;
		
    	class BytesLimit65535_tMongoDBClose_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMongoDBClose_1().limitLog4jByte();

 



/**
 * [tMongoDBClose_1 begin ] stop
 */
	
	/**
	 * [tMongoDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tMongoDBClose_1";

	
	com.mongodb.Mongo mongo_tMongoDBClose_1=(com.mongodb.Mongo)globalMap.get("mongo_tMongoDBConnection_1");
	if(mongo_tMongoDBClose_1 != null )
	{
		
			mongo_tMongoDBClose_1.close();
		
	}
	
 


	tos_count_tMongoDBClose_1++;

/**
 * [tMongoDBClose_1 main ] stop
 */
	
	/**
	 * [tMongoDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMongoDBClose_1";

	

 



/**
 * [tMongoDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tMongoDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMongoDBClose_1";

	

 



/**
 * [tMongoDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tMongoDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tMongoDBClose_1";

	

 

ok_Hash.put("tMongoDBClose_1", true);
end_Hash.put("tMongoDBClose_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tDBClose_1Process(globalMap);



/**
 * [tMongoDBClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMongoDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tMongoDBClose_1";

	

 



/**
 * [tMongoDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMongoDBClose_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";

	
		int tos_count_tDBClose_1 = 0;
		
    	class BytesLimit65535_tDBClose_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBClose_1().limitLog4jByte();

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	



	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
        conn_tDBClose_1.close();
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tChronometerStop_1Process(globalMap);



/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	

public void tChronometerStop_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tChronometerStop_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tChronometerStop_1", false);
		start_Hash.put("tChronometerStop_1", System.currentTimeMillis());
		
	
	currentComponent="tChronometerStop_1";

	
		int tos_count_tChronometerStop_1 = 0;
		
    	class BytesLimit65535_tChronometerStop_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tChronometerStop_1().limitLog4jByte();
	
	long timetChronometerStop_1;
	
		timetChronometerStop_1 = System.currentTimeMillis() - startTime;
		
	   		System.out.print("[ tChronometerStop_1 ]  ");
		
	  	System.out.println("" + "  " + timetChronometerStop_1 + " milliseconds");
	  	 
	
	Long currentTimetChronometerStop_1 = System.currentTimeMillis();
	globalMap.put("tChronometerStop_1", currentTimetChronometerStop_1);
	
	globalMap.put("tChronometerStop_1_STOPTIME", currentTimetChronometerStop_1);
	globalMap.put("tChronometerStop_1_DURATION", timetChronometerStop_1);
 



/**
 * [tChronometerStop_1 begin ] stop
 */
	
	/**
	 * [tChronometerStop_1 main ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 


	tos_count_tChronometerStop_1++;

/**
 * [tChronometerStop_1 main ] stop
 */
	
	/**
	 * [tChronometerStop_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 



/**
 * [tChronometerStop_1 process_data_begin ] stop
 */
	
	/**
	 * [tChronometerStop_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 



/**
 * [tChronometerStop_1 process_data_end ] stop
 */
	
	/**
	 * [tChronometerStop_1 end ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 

ok_Hash.put("tChronometerStop_1", true);
end_Hash.put("tChronometerStop_1", System.currentTimeMillis());




/**
 * [tChronometerStop_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tChronometerStop_1 finally ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 



/**
 * [tChronometerStop_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];
    static byte[] commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length) {
				if(length < 1024 && commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE.length == 0) {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[1024];
				} else {
   					commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length);
			strReturn = new String(commonByteArray_DEEPSEA_SAT_SALES_OBJECTIVE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEEPSEA_SAT_SALES_OBJECTIVE) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFlowMeterCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tLogRow_1 = 0;
		
    	class BytesLimit65535_tLogRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tLogRow_1().limitLog4jByte();

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
		java.io.PrintStream consoleOut_tLogRow_1 = null;	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeterCatcher_1", false);
		start_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeterCatcher_1";

	
		int tos_count_tFlowMeterCatcher_1 = 0;
		
    	class BytesLimit65535_tFlowMeterCatcher_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFlowMeterCatcher_1().limitLog4jByte();

	for (MetterCatcherUtils.MetterCatcherMessage mcm : tFlowMeterCatcher_1.getMessages()) {
		row6.pid = pid;
		row6.root_pid = rootPid;
		row6.father_pid = fatherPid;	
        row6.project = projectName;
        row6.job = jobName;
        row6.context = contextStr;
		row6.origin = (mcm.getOrigin()==null || mcm.getOrigin().length()<1 ? null : mcm.getOrigin());
		row6.moment = mcm.getMoment();
		row6.job_version = mcm.getJobVersion();
		row6.job_repository_id = mcm.getJobId();
		row6.system_pid = mcm.getSystemPid();
		row6.label = mcm.getLabel();
		row6.count = mcm.getCount();
		row6.reference = tFlowMeterCatcher_1.getConnLinesCount(mcm.getReferense()+"_count");
		row6.thresholds = mcm.getThresholds();
		

 



/**
 * [tFlowMeterCatcher_1 begin ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 


	tos_count_tFlowMeterCatcher_1++;

/**
 * [tFlowMeterCatcher_1 main ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

			//row6
			//row6


			
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				} 
			

		
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(row6.moment != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
								FormatterUtils.format_Date(row6.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row6.pid != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row6.pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row6.father_pid != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row6.father_pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row6.root_pid != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row6.root_pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row6.system_pid != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row6.system_pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row6.project != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row6.project)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row6.job != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row6.job)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row6.job_repository_id != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row6.job_repository_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row6.job_version != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row6.job_version)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row6.context != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row6.context)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row6.origin != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row6.origin)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row6.label != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row6.label)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row6.count != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row6.count)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row6.reference != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row6.reference)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row6.thresholds != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row6.thresholds)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

	}


 

ok_Hash.put("tFlowMeterCatcher_1", true);
end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());




/**
 * [tFlowMeterCatcher_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFlowMeterCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final SAT_SALES_OBJECTIVE SAT_SALES_OBJECTIVEClass = new SAT_SALES_OBJECTIVE();

        int exitCode = SAT_SALES_OBJECTIVEClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = SAT_SALES_OBJECTIVE.class.getClassLoader().getResourceAsStream("deepsea/sat_sales_objective_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = SAT_SALES_OBJECTIVE.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("TYPE", "id_String");
				
                context.TYPE=(String) context.getProperty("TYPE");
				    context.setContextType("QUOTA_TYPE", "id_String");
				
                context.QUOTA_TYPE=(String) context.getProperty("QUOTA_TYPE");
				    context.setContextType("SOURCE", "id_String");
				
                context.SOURCE=(String) context.getProperty("SOURCE");
				    context.setContextType("TABLE", "id_String");
				
                context.TABLE=(String) context.getProperty("TABLE");
				    context.setContextType("COUNTRY", "id_String");
				
                context.COUNTRY=(String) context.getProperty("COUNTRY");
				    context.setContextType("DEEPSEA_AUTH_TOKEN", "id_String");
				
                context.DEEPSEA_AUTH_TOKEN=(String) context.getProperty("DEEPSEA_AUTH_TOKEN");
				    context.setContextType("DEEPSEA_HOSTNAME", "id_String");
				
                context.DEEPSEA_HOSTNAME=(String) context.getProperty("DEEPSEA_HOSTNAME");
				    context.setContextType("MONGODB_HOSTNAME", "id_String");
				
                context.MONGODB_HOSTNAME=(String) context.getProperty("MONGODB_HOSTNAME");
				    context.setContextType("POSTGRES_HOSTNAME", "id_String");
				
                context.POSTGRES_HOSTNAME=(String) context.getProperty("POSTGRES_HOSTNAME");
				    context.setContextType("WEBJOB_NAME", "id_String");
				
                context.WEBJOB_NAME=(String) context.getProperty("WEBJOB_NAME");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("TYPE")) {
                context.TYPE = (String) parentContextMap.get("TYPE");
            }if (parentContextMap.containsKey("QUOTA_TYPE")) {
                context.QUOTA_TYPE = (String) parentContextMap.get("QUOTA_TYPE");
            }if (parentContextMap.containsKey("SOURCE")) {
                context.SOURCE = (String) parentContextMap.get("SOURCE");
            }if (parentContextMap.containsKey("TABLE")) {
                context.TABLE = (String) parentContextMap.get("TABLE");
            }if (parentContextMap.containsKey("COUNTRY")) {
                context.COUNTRY = (String) parentContextMap.get("COUNTRY");
            }if (parentContextMap.containsKey("DEEPSEA_AUTH_TOKEN")) {
                context.DEEPSEA_AUTH_TOKEN = (String) parentContextMap.get("DEEPSEA_AUTH_TOKEN");
            }if (parentContextMap.containsKey("DEEPSEA_HOSTNAME")) {
                context.DEEPSEA_HOSTNAME = (String) parentContextMap.get("DEEPSEA_HOSTNAME");
            }if (parentContextMap.containsKey("MONGODB_HOSTNAME")) {
                context.MONGODB_HOSTNAME = (String) parentContextMap.get("MONGODB_HOSTNAME");
            }if (parentContextMap.containsKey("POSTGRES_HOSTNAME")) {
                context.POSTGRES_HOSTNAME = (String) parentContextMap.get("POSTGRES_HOSTNAME");
            }if (parentContextMap.containsKey("WEBJOB_NAME")) {
                context.WEBJOB_NAME = (String) parentContextMap.get("WEBJOB_NAME");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tMongoDBInput_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tMongoDBInput_1) {
globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", -1);

e_tMongoDBInput_1.printStackTrace();

}catch (java.lang.Error e_tMongoDBInput_1) {
globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tMongoDBInput_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : SAT_SALES_OBJECTIVE");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     316251 characters generated by Talend Open Studio for Big Data 
 *     on the 1 December, 2018 11:54:01 PM CST
 ************************************************************************************************/