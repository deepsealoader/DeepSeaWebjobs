// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package deepsea.build_customer_list_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: BUILD_CUSTOMER_LIST Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class BUILD_CUSTOMER_LIST implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "BUILD_CUSTOMER_LIST";
	private final String projectName = "DEEPSEA";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					BUILD_CUSTOMER_LIST.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(BUILD_CUSTOMER_LIST.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tReplace_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputExcel_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAggregateRow_1_AGGOUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_1_AGGIN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDenormalize_1_DenormalizeOut_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tDenormalize_1_ArrayIn_error(exception, errorComponent, globalMap);

	}

	public void tDenormalize_1_ArrayIn_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[0];
		static byte[] commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[0];

		public String customerCode;

		public String getCustomerCode() {
			return this.customerCode;
		}

		public String customerName;

		public String getCustomerName() {
			return this.customerName;
		}

		public String customerType;

		public String getCustomerType() {
			return this.customerType;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST.length == 0) {
						commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST, 0,
						length);
				strReturn = new String(
						commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_BUILD_CUSTOMER_LIST) {

				try {

					int length = 0;

					this.customerCode = readString(dis);

					this.customerName = readString(dis);

					this.customerType = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.customerCode, dos);

				// String

				writeString(this.customerName, dos);

				// String

				writeString(this.customerType, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("customerCode=" + customerCode);
			sb.append(",customerName=" + customerName);
			sb.append(",customerType=" + customerType);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[0];
		static byte[] commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[0];

		public String customerCode;

		public String getCustomerCode() {
			return this.customerCode;
		}

		public String customerName;

		public String getCustomerName() {
			return this.customerName;
		}

		public String customerType;

		public String getCustomerType() {
			return this.customerType;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST.length == 0) {
						commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST, 0,
						length);
				strReturn = new String(
						commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_BUILD_CUSTOMER_LIST) {

				try {

					int length = 0;

					this.customerCode = readString(dis);

					this.customerName = readString(dis);

					this.customerType = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.customerCode, dos);

				// String

				writeString(this.customerName, dos);

				// String

				writeString(this.customerType, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("customerCode=" + customerCode);
			sb.append(",customerName=" + customerName);
			sb.append(",customerType=" + customerType);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtDenormalize_1 implements
			routines.system.IPersistableRow<OnRowsEndStructtDenormalize_1> {
		final static byte[] commonByteArrayLock_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[0];
		static byte[] commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[0];

		public String customerCode;

		public String getCustomerCode() {
			return this.customerCode;
		}

		public String customerName;

		public String getCustomerName() {
			return this.customerName;
		}

		public String customerType;

		public String getCustomerType() {
			return this.customerType;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST.length == 0) {
						commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST, 0,
						length);
				strReturn = new String(
						commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_BUILD_CUSTOMER_LIST) {

				try {

					int length = 0;

					this.customerCode = readString(dis);

					this.customerName = readString(dis);

					this.customerType = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.customerCode, dos);

				// String

				writeString(this.customerName, dos);

				// String

				writeString(this.customerType, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("customerCode=" + customerCode);
			sb.append(",customerName=" + customerName);
			sb.append(",customerType=" + customerType);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtDenormalize_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[0];
		static byte[] commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[0];

		public String customerCode;

		public String getCustomerCode() {
			return this.customerCode;
		}

		public String customerName;

		public String getCustomerName() {
			return this.customerName;
		}

		public String customerType;

		public String getCustomerType() {
			return this.customerType;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST.length == 0) {
						commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST, 0,
						length);
				strReturn = new String(
						commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_BUILD_CUSTOMER_LIST) {

				try {

					int length = 0;

					this.customerCode = readString(dis);

					this.customerName = readString(dis);

					this.customerType = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.customerCode, dos);

				// String

				writeString(this.customerName, dos);

				// String

				writeString(this.customerType, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("customerCode=" + customerCode);
			sb.append(",customerName=" + customerName);
			sb.append(",customerType=" + customerType);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[0];
		static byte[] commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[0];

		public String customerCode;

		public String getCustomerCode() {
			return this.customerCode;
		}

		public String customerName;

		public String getCustomerName() {
			return this.customerName;
		}

		public String customerType;

		public String getCustomerType() {
			return this.customerType;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST.length == 0) {
						commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST, 0,
						length);
				strReturn = new String(
						commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_BUILD_CUSTOMER_LIST) {

				try {

					int length = 0;

					this.customerCode = readString(dis);

					this.customerName = readString(dis);

					this.customerType = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.customerCode, dos);

				// String

				writeString(this.customerName, dos);

				// String

				writeString(this.customerType, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("customerCode=" + customerCode);
			sb.append(",customerName=" + customerName);
			sb.append(",customerType=" + customerType);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_1 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
		final static byte[] commonByteArrayLock_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[0];
		static byte[] commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[0];

		public String customerCode;

		public String getCustomerCode() {
			return this.customerCode;
		}

		public String customerName;

		public String getCustomerName() {
			return this.customerName;
		}

		public String customerType;

		public String getCustomerType() {
			return this.customerType;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST.length == 0) {
						commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST, 0,
						length);
				strReturn = new String(
						commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_BUILD_CUSTOMER_LIST) {

				try {

					int length = 0;

					this.customerCode = readString(dis);

					this.customerName = readString(dis);

					this.customerType = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.customerCode, dos);

				// String

				writeString(this.customerName, dos);

				// String

				writeString(this.customerType, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("customerCode=" + customerCode);
			sb.append(",customerName=" + customerName);
			sb.append(",customerType=" + customerType);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[0];
		static byte[] commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[0];

		public String customerCode;

		public String getCustomerCode() {
			return this.customerCode;
		}

		public String customerName;

		public String getCustomerName() {
			return this.customerName;
		}

		public String customerType;

		public String getCustomerType() {
			return this.customerType;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST.length == 0) {
						commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST, 0,
						length);
				strReturn = new String(
						commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_BUILD_CUSTOMER_LIST) {

				try {

					int length = 0;

					this.customerCode = readString(dis);

					this.customerName = readString(dis);

					this.customerType = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.customerCode, dos);

				// String

				writeString(this.customerName, dos);

				// String

				writeString(this.customerType, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("customerCode=" + customerCode);
			sb.append(",customerName=" + customerName);
			sb.append(",customerType=" + customerType);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[0];
		static byte[] commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[0];

		public String customerCode;

		public String getCustomerCode() {
			return this.customerCode;
		}

		public String customerName;

		public String getCustomerName() {
			return this.customerName;
		}

		public String customerType;

		public String getCustomerType() {
			return this.customerType;
		}

		public String value1;

		public String getValue1() {
			return this.value1;
		}

		public String value2;

		public String getValue2() {
			return this.value2;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST.length == 0) {
						commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST, 0,
						length);
				strReturn = new String(
						commonByteArray_DEEPSEA_BUILD_CUSTOMER_LIST, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_BUILD_CUSTOMER_LIST) {

				try {

					int length = 0;

					this.customerCode = readString(dis);

					this.customerName = readString(dis);

					this.customerType = readString(dis);

					this.value1 = readString(dis);

					this.value2 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.customerCode, dos);

				// String

				writeString(this.customerName, dos);

				// String

				writeString(this.customerType, dos);

				// String

				writeString(this.value1, dos);

				// String

				writeString(this.value2, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("customerCode=" + customerCode);
			sb.append(",customerName=" + customerName);
			sb.append(",customerType=" + customerType);
			sb.append(",value1=" + value1);
			sb.append(",value2=" + value2);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				row3Struct row3 = new row3Struct();
				row5Struct row5 = new row5Struct();
				row4Struct row4 = new row4Struct();
				row4Struct row6 = row4;

				/**
				 * [tAggregateRow_1_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGOUT", false);
				start_Hash.put("tAggregateRow_1_AGGOUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tAggregateRow_1_AGGOUT = 0;

				class BytesLimit65535_tAggregateRow_1_AGGOUT {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAggregateRow_1_AGGOUT().limitLog4jByte();

				// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap();

				// ------------
				class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String customerCode;
					String customerName;
					String customerType;
					String value;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.customerCode == null) ? 0
											: this.customerCode.hashCode());

							result = prime
									* result
									+ ((this.customerName == null) ? 0
											: this.customerName.hashCode());

							result = prime
									* result
									+ ((this.customerType == null) ? 0
											: this.customerType.hashCode());

							result = prime
									* result
									+ ((this.value == null) ? 0 : this.value
											.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;

						if (this.customerCode == null) {
							if (other.customerCode != null)
								return false;
						} else if (!this.customerCode
								.equals(other.customerCode))
							return false;

						if (this.customerName == null) {
							if (other.customerName != null)
								return false;
						} else if (!this.customerName
								.equals(other.customerName))
							return false;

						if (this.customerType == null) {
							if (other.customerType != null)
								return false;
						} else if (!this.customerType
								.equals(other.customerType))
							return false;

						if (this.value == null) {
							if (other.value != null)
								return false;
						} else if (!this.value.equals(other.value))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
				AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
				java.util.Map<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1>();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				class BytesLimit65535_tMap_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_1().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				row2Struct row2_tmp = new row2Struct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				class BytesLimit65535_tFileInputDelimited_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = "C:/Users/rru_sg1/Desktop/EXTRACT_CUSTOMER_SECTOR-20190121_0342-output.txt";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/rru_sg1/Desktop/EXTRACT_CUSTOMER_SECTOR-20190121_0342-output.txt",
								"ISO-8859-15", "|", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row1.customerCode = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.customerName = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row1.customerType = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row1.value1 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row1.value2 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							// row1
							// row1

							if (execStat) {
								runStat.updateStatOnConnection("row1"
										+ iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								row2 = null;

								// # Output table : 'row2'
								row2_tmp.customerCode = row1.customerCode;
								row2_tmp.customerName = row1.customerName;
								row2_tmp.customerType = row1.customerType;
								row2_tmp.value = row1.value1.equals("") ? row1.value2
										: row1.value1;
								row2 = row2_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
							// Start of branch "row2"
							if (row2 != null) {

								/**
								 * [tAggregateRow_1_AGGOUT main ] start
								 */

								currentVirtualComponent = "tAggregateRow_1";

								currentComponent = "tAggregateRow_1_AGGOUT";

								// row2
								// row2

								if (execStat) {
									runStat.updateStatOnConnection("row2"
											+ iterateId, 1, 1);
								}

								operation_finder_tAggregateRow_1.customerCode = row2.customerCode;
								operation_finder_tAggregateRow_1.customerName = row2.customerName;
								operation_finder_tAggregateRow_1.customerType = row2.customerType;
								operation_finder_tAggregateRow_1.value = row2.value;

								operation_finder_tAggregateRow_1.hashCodeDirty = true;

								operation_result_tAggregateRow_1 = hash_tAggregateRow_1
										.get(operation_finder_tAggregateRow_1);

								if (operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

									operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

									operation_result_tAggregateRow_1.customerCode = operation_finder_tAggregateRow_1.customerCode;
									operation_result_tAggregateRow_1.customerName = operation_finder_tAggregateRow_1.customerName;
									operation_result_tAggregateRow_1.customerType = operation_finder_tAggregateRow_1.customerType;
									operation_result_tAggregateRow_1.value = operation_finder_tAggregateRow_1.value;

									hash_tAggregateRow_1.put(
											operation_result_tAggregateRow_1,
											operation_result_tAggregateRow_1);

								} // G_OutMain_AggR_001

								tos_count_tAggregateRow_1_AGGOUT++;

								/**
								 * [tAggregateRow_1_AGGOUT main ] stop
								 */

								/**
								 * [tAggregateRow_1_AGGOUT process_data_begin ]
								 * start
								 */

								currentVirtualComponent = "tAggregateRow_1";

								currentComponent = "tAggregateRow_1_AGGOUT";

								/**
								 * [tAggregateRow_1_AGGOUT process_data_begin ]
								 * stop
								 */

								/**
								 * [tAggregateRow_1_AGGOUT process_data_end ]
								 * start
								 */

								currentVirtualComponent = "tAggregateRow_1";

								currentComponent = "tAggregateRow_1_AGGOUT";

								/**
								 * [tAggregateRow_1_AGGOUT process_data_end ]
								 * stop
								 */

							} // End of branch "row2"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/Users/rru_sg1/Desktop/EXTRACT_CUSTOMER_SECTOR-20190121_0342-output.txt") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAggregateRow_1_AGGOUT", true);
				end_Hash.put("tAggregateRow_1_AGGOUT",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGOUT end ] stop
				 */

				/**
				 * [tDenormalize_1_DenormalizeOut begin ] start
				 */

				ok_Hash.put("tDenormalize_1_DenormalizeOut", false);
				start_Hash.put("tDenormalize_1_DenormalizeOut",
						System.currentTimeMillis());

				currentVirtualComponent = "tDenormalize_1";

				currentComponent = "tDenormalize_1_DenormalizeOut";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tDenormalize_1_DenormalizeOut = 0;

				class BytesLimit65535_tDenormalize_1_DenormalizeOut {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDenormalize_1_DenormalizeOut()
						.limitLog4jByte();

				class DenormalizeStructtDenormalize_1_DenormalizeOut {
					java.util.List<String> value = new java.util.ArrayList<String>();
				}
				DenormalizeStructtDenormalize_1_DenormalizeOut denormalize_result_tDenormalize_1_DenormalizeOut = null;
				java.util.Map<String, java.util.Map<String, java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>> hash_customerCode_tDenormalize_1_DenormalizeOut = new java.util.HashMap<String, java.util.Map<String, java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>();
				java.util.Map<String, java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>> hash_customerName_tDenormalize_1_DenormalizeOut = null;
				java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut> hash_customerType_tDenormalize_1_DenormalizeOut = null;

				/**
				 * [tDenormalize_1_DenormalizeOut begin ] stop
				 */

				/**
				 * [tReplace_1 begin ] start
				 */

				ok_Hash.put("tReplace_1", false);
				start_Hash.put("tReplace_1", System.currentTimeMillis());

				currentComponent = "tReplace_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tReplace_1 = 0;

				class BytesLimit65535_tReplace_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tReplace_1().limitLog4jByte();

				int nb_line_tReplace_1 = 0;

				/**
				 * [tReplace_1 begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGIN", false);
				start_Hash.put("tAggregateRow_1_AGGIN",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				int tos_count_tAggregateRow_1_AGGIN = 0;

				class BytesLimit65535_tAggregateRow_1_AGGIN {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAggregateRow_1_AGGIN().limitLog4jByte();

				java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1
						.values();

				globalMap.put("tAggregateRow_1_NB_LINE",
						values_tAggregateRow_1.size());

				for (AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600

					/**
					 * [tAggregateRow_1_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					row3.customerCode = aggregated_row_tAggregateRow_1.customerCode;

					row3.customerName = aggregated_row_tAggregateRow_1.customerName;

					row3.customerType = aggregated_row_tAggregateRow_1.customerType;

					row3.value = aggregated_row_tAggregateRow_1.value;

					tos_count_tAggregateRow_1_AGGIN++;

					/**
					 * [tAggregateRow_1_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tReplace_1 main ] start
					 */

					currentComponent = "tReplace_1";

					// row3
					// row3

					if (execStat) {
						runStat.updateStatOnConnection("row3" + iterateId, 1, 1);
					}

					String searchStr_tReplace_1_1 = "" + "";
					row3.value = StringUtils.replaceAllStrictly(row3.value,
							searchStr_tReplace_1_1, "SF4" + "", true, false);
					row3.value = StringUtils.replaceAll(row3.value,
							"^\\d{1,3}$", "SF4" + "");
					row3.value = StringUtils.replaceAll(row3.value,
							"^[a-zA-Z]{3}$", "SF4" + "");
					row5.customerCode = row3.customerCode;

					row5.customerName = row3.customerName;

					row5.customerType = row3.customerType;

					row5.value = row3.value;

					nb_line_tReplace_1++;

					tos_count_tReplace_1++;

					/**
					 * [tReplace_1 main ] stop
					 */

					/**
					 * [tReplace_1 process_data_begin ] start
					 */

					currentComponent = "tReplace_1";

					/**
					 * [tReplace_1 process_data_begin ] stop
					 */

					/**
					 * [tDenormalize_1_DenormalizeOut main ] start
					 */

					currentVirtualComponent = "tDenormalize_1";

					currentComponent = "tDenormalize_1_DenormalizeOut";

					// row5
					// row5

					if (execStat) {
						runStat.updateStatOnConnection("row5" + iterateId, 1, 1);
					}

					if (hash_customerCode_tDenormalize_1_DenormalizeOut
							.containsKey(row5.customerCode)) {
						hash_customerName_tDenormalize_1_DenormalizeOut = hash_customerCode_tDenormalize_1_DenormalizeOut
								.get(row5.customerCode);
					} else {
						hash_customerName_tDenormalize_1_DenormalizeOut = new java.util.HashMap<String, java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>();
						hash_customerCode_tDenormalize_1_DenormalizeOut
								.put(row5.customerCode,
										hash_customerName_tDenormalize_1_DenormalizeOut);
					}
					if (hash_customerName_tDenormalize_1_DenormalizeOut
							.containsKey(row5.customerName)) {
						hash_customerType_tDenormalize_1_DenormalizeOut = hash_customerName_tDenormalize_1_DenormalizeOut
								.get(row5.customerName);
					} else {
						hash_customerType_tDenormalize_1_DenormalizeOut = new java.util.HashMap<String, DenormalizeStructtDenormalize_1_DenormalizeOut>();
						hash_customerName_tDenormalize_1_DenormalizeOut
								.put(row5.customerName,
										hash_customerType_tDenormalize_1_DenormalizeOut);
					}
					if (hash_customerType_tDenormalize_1_DenormalizeOut
							.containsKey(row5.customerType)) {
						denormalize_result_tDenormalize_1_DenormalizeOut = hash_customerType_tDenormalize_1_DenormalizeOut
								.get(row5.customerType);
						if (!denormalize_result_tDenormalize_1_DenormalizeOut.value
								.contains(row5.value)) {
							denormalize_result_tDenormalize_1_DenormalizeOut.value
									.add(row5.value);
						}
					} else {
						denormalize_result_tDenormalize_1_DenormalizeOut = new DenormalizeStructtDenormalize_1_DenormalizeOut();
						if (!denormalize_result_tDenormalize_1_DenormalizeOut.value
								.contains(row5.value)) {
							denormalize_result_tDenormalize_1_DenormalizeOut.value
									.add(row5.value);
						}
						hash_customerType_tDenormalize_1_DenormalizeOut
								.put(row5.customerType,
										denormalize_result_tDenormalize_1_DenormalizeOut);
					}

					tos_count_tDenormalize_1_DenormalizeOut++;

					/**
					 * [tDenormalize_1_DenormalizeOut main ] stop
					 */

					/**
					 * [tDenormalize_1_DenormalizeOut process_data_begin ] start
					 */

					currentVirtualComponent = "tDenormalize_1";

					currentComponent = "tDenormalize_1_DenormalizeOut";

					/**
					 * [tDenormalize_1_DenormalizeOut process_data_begin ] stop
					 */

					/**
					 * [tDenormalize_1_DenormalizeOut process_data_end ] start
					 */

					currentVirtualComponent = "tDenormalize_1";

					currentComponent = "tDenormalize_1_DenormalizeOut";

					/**
					 * [tDenormalize_1_DenormalizeOut process_data_end ] stop
					 */

					/**
					 * [tReplace_1 process_data_end ] start
					 */

					currentComponent = "tReplace_1";

					/**
					 * [tReplace_1 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_1_AGGIN", true);
				end_Hash.put("tAggregateRow_1_AGGIN",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGIN end ] stop
				 */

				/**
				 * [tReplace_1 end ] start
				 */

				currentComponent = "tReplace_1";

				globalMap.put("tReplace_1_NB_LINE", nb_line_tReplace_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tReplace_1", true);
				end_Hash.put("tReplace_1", System.currentTimeMillis());

				/**
				 * [tReplace_1 end ] stop
				 */

				/**
				 * [tDenormalize_1_DenormalizeOut end ] start
				 */

				currentVirtualComponent = "tDenormalize_1";

				currentComponent = "tDenormalize_1_DenormalizeOut";

				java.util.List<OnRowsEndStructtDenormalize_1> result_list_tDenormalize_1_DenormalizeOut = new java.util.ArrayList<OnRowsEndStructtDenormalize_1>();
				if (denormalize_result_tDenormalize_1_DenormalizeOut != null) {
					StringBuilder sb_tDenormalize_1_DenormalizeOut = null;

					// generate result begin
					java.util.Iterator<String> customerCode_iterator_tDenormalize_1_DenormalizeOut = hash_customerCode_tDenormalize_1_DenormalizeOut
							.keySet().iterator();

					while (customerCode_iterator_tDenormalize_1_DenormalizeOut
							.hasNext()) {

						String key_customerCode_tDenormalize_1_DenormalizeOut = customerCode_iterator_tDenormalize_1_DenormalizeOut
								.next();

						hash_customerName_tDenormalize_1_DenormalizeOut = hash_customerCode_tDenormalize_1_DenormalizeOut
								.get(key_customerCode_tDenormalize_1_DenormalizeOut);

						java.util.Iterator<String> customerName_iterator_tDenormalize_1_DenormalizeOut = hash_customerName_tDenormalize_1_DenormalizeOut
								.keySet().iterator();

						while (customerName_iterator_tDenormalize_1_DenormalizeOut
								.hasNext()) {

							String key_customerName_tDenormalize_1_DenormalizeOut = customerName_iterator_tDenormalize_1_DenormalizeOut
									.next();

							hash_customerType_tDenormalize_1_DenormalizeOut = hash_customerName_tDenormalize_1_DenormalizeOut
									.get(key_customerName_tDenormalize_1_DenormalizeOut);

							java.util.Iterator<String> customerType_iterator_tDenormalize_1_DenormalizeOut = hash_customerType_tDenormalize_1_DenormalizeOut
									.keySet().iterator();

							while (customerType_iterator_tDenormalize_1_DenormalizeOut
									.hasNext()) {

								String key_customerType_tDenormalize_1_DenormalizeOut = customerType_iterator_tDenormalize_1_DenormalizeOut
										.next();

								denormalize_result_tDenormalize_1_DenormalizeOut = hash_customerType_tDenormalize_1_DenormalizeOut
										.get(key_customerType_tDenormalize_1_DenormalizeOut);

								OnRowsEndStructtDenormalize_1 denormalize_row_tDenormalize_1_DenormalizeOut = new OnRowsEndStructtDenormalize_1();

								denormalize_row_tDenormalize_1_DenormalizeOut.customerCode = key_customerCode_tDenormalize_1_DenormalizeOut;
								denormalize_row_tDenormalize_1_DenormalizeOut.customerName = key_customerName_tDenormalize_1_DenormalizeOut;
								denormalize_row_tDenormalize_1_DenormalizeOut.customerType = key_customerType_tDenormalize_1_DenormalizeOut;
								for (String temp_tDenormalize_1_DenormalizeOut : denormalize_result_tDenormalize_1_DenormalizeOut.value) {

									if (sb_tDenormalize_1_DenormalizeOut == null) {

										sb_tDenormalize_1_DenormalizeOut = new StringBuilder();
										sb_tDenormalize_1_DenormalizeOut
												.append(temp_tDenormalize_1_DenormalizeOut);

									} else {
										sb_tDenormalize_1_DenormalizeOut
												.append(";")
												.append(temp_tDenormalize_1_DenormalizeOut);

									}

								}

								denormalize_row_tDenormalize_1_DenormalizeOut.value = sb_tDenormalize_1_DenormalizeOut
										.toString();

								sb_tDenormalize_1_DenormalizeOut = null;

								// in the deepest end

								result_list_tDenormalize_1_DenormalizeOut
										.add(denormalize_row_tDenormalize_1_DenormalizeOut);

							}

						}

					}

				}
				// generate result end
				globalMap.put("tDenormalize_1",
						result_list_tDenormalize_1_DenormalizeOut);
				globalMap.put("tDenormalize_1_DenormalizeOut_NB_LINE",
						result_list_tDenormalize_1_DenormalizeOut.size());

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDenormalize_1_DenormalizeOut", true);
				end_Hash.put("tDenormalize_1_DenormalizeOut",
						System.currentTimeMillis());

				/**
				 * [tDenormalize_1_DenormalizeOut end ] stop
				 */

				/**
				 * [tFileOutputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_1", false);
				start_Hash
						.put("tFileOutputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputExcel_1 = 0;

				class BytesLimit65535_tFileOutputExcel_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputExcel_1().limitLog4jByte();

				int columnIndex_tFileOutputExcel_1 = 0;

				String fileName_tFileOutputExcel_1 = "C:/Users/rru_sg1/Desktop/out.xlsx";
				int nb_line_tFileOutputExcel_1 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();
				xlsxTool_tFileOutputExcel_1.setSheet("Sheet1");
				xlsxTool_tFileOutputExcel_1.setAppend(false, false);
				xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_1.setXY(false, 0, 0, false);

				xlsxTool_tFileOutputExcel_1
						.prepareXlsxFile(fileName_tFileOutputExcel_1);

				xlsxTool_tFileOutputExcel_1.setFont("");

				if (xlsxTool_tFileOutputExcel_1.getStartRow() == 0) {

					xlsxTool_tFileOutputExcel_1.addRow();

					xlsxTool_tFileOutputExcel_1.addCellValue("customerCode");

					xlsxTool_tFileOutputExcel_1.addCellValue("customerName");

					xlsxTool_tFileOutputExcel_1.addCellValue("customerType");

					xlsxTool_tFileOutputExcel_1.addCellValue("value");

					nb_line_tFileOutputExcel_1++;

				}

				/**
				 * [tFileOutputExcel_1 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_1 = 0;

				class BytesLimit65535_tLogRow_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tLogRow_1().limitLog4jByte();

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tDenormalize_1_ArrayIn begin ] start
				 */

				ok_Hash.put("tDenormalize_1_ArrayIn", false);
				start_Hash.put("tDenormalize_1_ArrayIn",
						System.currentTimeMillis());

				currentVirtualComponent = "tDenormalize_1";

				currentComponent = "tDenormalize_1_ArrayIn";

				int tos_count_tDenormalize_1_ArrayIn = 0;

				class BytesLimit65535_tDenormalize_1_ArrayIn {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDenormalize_1_ArrayIn().limitLog4jByte();

				int nb_line_tDenormalize_1_ArrayIn = 0;
				java.util.List<OnRowsEndStructtDenormalize_1> list_tDenormalize_1_ArrayIn = (java.util.List<OnRowsEndStructtDenormalize_1>) globalMap
						.get("tDenormalize_1");
				if (list_tDenormalize_1_ArrayIn == null) {
					list_tDenormalize_1_ArrayIn = new java.util.ArrayList<OnRowsEndStructtDenormalize_1>();
				}
				for (OnRowsEndStructtDenormalize_1 row_tDenormalize_1_ArrayIn : list_tDenormalize_1_ArrayIn) {

					row4.customerCode = row_tDenormalize_1_ArrayIn.customerCode;

					row4.customerName = row_tDenormalize_1_ArrayIn.customerName;

					row4.customerType = row_tDenormalize_1_ArrayIn.customerType;

					row4.value = row_tDenormalize_1_ArrayIn.value;

					/**
					 * [tDenormalize_1_ArrayIn begin ] stop
					 */

					/**
					 * [tDenormalize_1_ArrayIn main ] start
					 */

					currentVirtualComponent = "tDenormalize_1";

					currentComponent = "tDenormalize_1_ArrayIn";

					tos_count_tDenormalize_1_ArrayIn++;

					/**
					 * [tDenormalize_1_ArrayIn main ] stop
					 */

					/**
					 * [tDenormalize_1_ArrayIn process_data_begin ] start
					 */

					currentVirtualComponent = "tDenormalize_1";

					currentComponent = "tDenormalize_1_ArrayIn";

					/**
					 * [tDenormalize_1_ArrayIn process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					// row4
					// row4

					if (execStat) {
						runStat.updateStatOnConnection("row4" + iterateId, 1, 1);
					}

					// /////////////////////

					strBuffer_tLogRow_1 = new StringBuilder();

					if (row4.customerCode != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row4.customerCode));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row4.customerName != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row4.customerName));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row4.customerType != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row4.customerType));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row4.value != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row4.value));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
								.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_1 = new java.io.PrintStream(
								new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
					}
					consoleOut_tLogRow_1
							.println(strBuffer_tLogRow_1.toString());
					consoleOut_tLogRow_1.flush();
					nb_line_tLogRow_1++;
					// ////

					// ////

					// /////////////////////

					row6 = row4;

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

					/**
					 * [tLogRow_1 process_data_begin ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputExcel_1 main ] start
					 */

					currentComponent = "tFileOutputExcel_1";

					// row6
					// row6

					if (execStat) {
						runStat.updateStatOnConnection("row6" + iterateId, 1, 1);
					}

					xlsxTool_tFileOutputExcel_1.addRow();

					if (row6.customerCode != null) {

						xlsxTool_tFileOutputExcel_1.addCellValue(String
								.valueOf(row6.customerCode));
					} else {
						xlsxTool_tFileOutputExcel_1.addCellNullValue();
					}

					if (row6.customerName != null) {

						xlsxTool_tFileOutputExcel_1.addCellValue(String
								.valueOf(row6.customerName));
					} else {
						xlsxTool_tFileOutputExcel_1.addCellNullValue();
					}

					if (row6.customerType != null) {

						xlsxTool_tFileOutputExcel_1.addCellValue(String
								.valueOf(row6.customerType));
					} else {
						xlsxTool_tFileOutputExcel_1.addCellNullValue();
					}

					if (row6.value != null) {

						xlsxTool_tFileOutputExcel_1.addCellValue(String
								.valueOf(row6.value));
					} else {
						xlsxTool_tFileOutputExcel_1.addCellNullValue();
					}

					nb_line_tFileOutputExcel_1++;

					tos_count_tFileOutputExcel_1++;

					/**
					 * [tFileOutputExcel_1 main ] stop
					 */

					/**
					 * [tFileOutputExcel_1 process_data_begin ] start
					 */

					currentComponent = "tFileOutputExcel_1";

					/**
					 * [tFileOutputExcel_1 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputExcel_1 process_data_end ] start
					 */

					currentComponent = "tFileOutputExcel_1";

					/**
					 * [tFileOutputExcel_1 process_data_end ] stop
					 */

					/**
					 * [tLogRow_1 process_data_end ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_end ] stop
					 */

					/**
					 * [tDenormalize_1_ArrayIn process_data_end ] start
					 */

					currentVirtualComponent = "tDenormalize_1";

					currentComponent = "tDenormalize_1_ArrayIn";

					/**
					 * [tDenormalize_1_ArrayIn process_data_end ] stop
					 */

					/**
					 * [tDenormalize_1_ArrayIn end ] start
					 */

					currentVirtualComponent = "tDenormalize_1";

					currentComponent = "tDenormalize_1_ArrayIn";

					nb_line_tDenormalize_1_ArrayIn++;
				}
				globalMap.put("tDenormalize_1_ArrayIn_NB_LINE",
						nb_line_tDenormalize_1_ArrayIn);

				ok_Hash.put("tDenormalize_1_ArrayIn", true);
				end_Hash.put("tDenormalize_1_ArrayIn",
						System.currentTimeMillis());

				/**
				 * [tDenormalize_1_ArrayIn end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tFileOutputExcel_1 end ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				xlsxTool_tFileOutputExcel_1.writeExcel(
						fileName_tFileOutputExcel_1, true);

				nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 - 1;

				globalMap.put("tFileOutputExcel_1_NB_LINE",
						nb_line_tFileOutputExcel_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputExcel_1", true);
				end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tDenormalize_1_ArrayIn"
			globalMap.remove("tDenormalize_1");

			// free memory for "tAggregateRow_1_AGGIN"
			globalMap.remove("tAggregateRow_1");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				/**
				 * [tAggregateRow_1_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				/**
				 * [tAggregateRow_1_AGGIN finally ] stop
				 */

				/**
				 * [tReplace_1 finally ] start
				 */

				currentComponent = "tReplace_1";

				/**
				 * [tReplace_1 finally ] stop
				 */

				/**
				 * [tDenormalize_1_DenormalizeOut finally ] start
				 */

				currentVirtualComponent = "tDenormalize_1";

				currentComponent = "tDenormalize_1_DenormalizeOut";

				/**
				 * [tDenormalize_1_DenormalizeOut finally ] stop
				 */

				/**
				 * [tDenormalize_1_ArrayIn finally ] start
				 */

				currentVirtualComponent = "tDenormalize_1";

				currentComponent = "tDenormalize_1_ArrayIn";

				/**
				 * [tDenormalize_1_ArrayIn finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_1 finally ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				/**
				 * [tFileOutputExcel_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final BUILD_CUSTOMER_LIST BUILD_CUSTOMER_LISTClass = new BUILD_CUSTOMER_LIST();

		int exitCode = BUILD_CUSTOMER_LISTClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = BUILD_CUSTOMER_LIST.class
					.getClassLoader().getResourceAsStream(
							"deepsea/build_customer_list_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = BUILD_CUSTOMER_LIST.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : BUILD_CUSTOMER_LIST");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 99068 characters generated by Talend Open Studio for Big Data on the 21
 * January, 2019 4:06:19 AM GMT
 ************************************************************************************************/
