// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package deepsea.build_raw_data_from_file_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: BUILD_RAW_DATA_FROM_FILE Purpose: <br>
 * Description:  <br>
 * @author 
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class BUILD_RAW_DATA_FROM_FILE implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "BUILD_RAW_DATA_FROM_FILE";
	private final String projectName = "DEEPSEA";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					BUILD_RAW_DATA_FROM_FILE.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(BUILD_RAW_DATA_FROM_FILE.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileDelete_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterColumns_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterColumns_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterColumns_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAggregateRow_1_AGGOUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_1_AGGIN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileDelete_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_1 begin ] start
				 */

				ok_Hash.put("tFileDelete_1", false);
				start_Hash.put("tFileDelete_1", System.currentTimeMillis());

				currentComponent = "tFileDelete_1";

				int tos_count_tFileDelete_1 = 0;

				class BytesLimit65535_tFileDelete_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileDelete_1().limitLog4jByte();

				/**
				 * [tFileDelete_1 begin ] stop
				 */

				/**
				 * [tFileDelete_1 main ] start
				 */

				currentComponent = "tFileDelete_1";

				class DeleteFoldertFileDelete_1 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_1 = new java.io.File(
						"C:/Users/RRU_CN1/Desktop/Daily Sales 10-2017 to 3-2018.csv");
				if (file_tFileDelete_1.exists() && file_tFileDelete_1.isFile()) {
					if (file_tFileDelete_1.delete()) {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"File deleted.");
					} else {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_1_CURRENT_STATUS",
							"File does not exist or is invalid.");
				}
				globalMap
						.put("tFileDelete_1_DELETE_PATH",
								"C:/Users/RRU_CN1/Desktop/Daily Sales 10-2017 to 3-2018.csv");

				tos_count_tFileDelete_1++;

				/**
				 * [tFileDelete_1 main ] stop
				 */

				/**
				 * [tFileDelete_1 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_1 process_data_end ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_1 end ] start
				 */

				currentComponent = "tFileDelete_1";

				ok_Hash.put("tFileDelete_1", true);
				end_Hash.put("tFileDelete_1", System.currentTimeMillis());

				/**
				 * [tFileDelete_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileDelete_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
			}

			tFileList_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_1 finally ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[0];
		static byte[] commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[0];

		public String InvoiceLineNumber;

		public String getInvoiceLineNumber() {
			return this.InvoiceLineNumber;
		}

		public String InvoiceNumber;

		public String getInvoiceNumber() {
			return this.InvoiceNumber;
		}

		public String InvoiceDate;

		public String getInvoiceDate() {
			return this.InvoiceDate;
		}

		public String ProductCode;

		public String getProductCode() {
			return this.ProductCode;
		}

		public String Quantity;

		public String getQuantity() {
			return this.Quantity;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE.length == 0) {
						commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_BUILD_RAW_DATA_FROM_FILE) {

				try {

					int length = 0;

					this.InvoiceLineNumber = readString(dis);

					this.InvoiceNumber = readString(dis);

					this.InvoiceDate = readString(dis);

					this.ProductCode = readString(dis);

					this.Quantity = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.InvoiceLineNumber, dos);

				// String

				writeString(this.InvoiceNumber, dos);

				// String

				writeString(this.InvoiceDate, dos);

				// String

				writeString(this.ProductCode, dos);

				// String

				writeString(this.Quantity, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("InvoiceLineNumber=" + InvoiceLineNumber);
			sb.append(",InvoiceNumber=" + InvoiceNumber);
			sb.append(",InvoiceDate=" + InvoiceDate);
			sb.append(",ProductCode=" + ProductCode);
			sb.append(",Quantity=" + Quantity);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[0];
		static byte[] commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[0];

		public String newColumn;

		public String getNewColumn() {
			return this.newColumn;
		}

		public String newColumn1;

		public String getNewColumn1() {
			return this.newColumn1;
		}

		public String newColumn2;

		public String getNewColumn2() {
			return this.newColumn2;
		}

		public String newColumn3;

		public String getNewColumn3() {
			return this.newColumn3;
		}

		public String newColumn4;

		public String getNewColumn4() {
			return this.newColumn4;
		}

		public String newColumn5;

		public String getNewColumn5() {
			return this.newColumn5;
		}

		public String newColumn6;

		public String getNewColumn6() {
			return this.newColumn6;
		}

		public String newColumn7;

		public String getNewColumn7() {
			return this.newColumn7;
		}

		public String newColumn8;

		public String getNewColumn8() {
			return this.newColumn8;
		}

		public String newColumn9;

		public String getNewColumn9() {
			return this.newColumn9;
		}

		public String newColumn10;

		public String getNewColumn10() {
			return this.newColumn10;
		}

		public String newColumn11;

		public String getNewColumn11() {
			return this.newColumn11;
		}

		public String newColumn12;

		public String getNewColumn12() {
			return this.newColumn12;
		}

		public String InvoiceLineNumber;

		public String getInvoiceLineNumber() {
			return this.InvoiceLineNumber;
		}

		public String InvoiceNumber;

		public String getInvoiceNumber() {
			return this.InvoiceNumber;
		}

		public String InvoiceDate;

		public String getInvoiceDate() {
			return this.InvoiceDate;
		}

		public String ProductCode;

		public String getProductCode() {
			return this.ProductCode;
		}

		public String newColumn17;

		public String getNewColumn17() {
			return this.newColumn17;
		}

		public String newColumn18;

		public String getNewColumn18() {
			return this.newColumn18;
		}

		public String newColumn19;

		public String getNewColumn19() {
			return this.newColumn19;
		}

		public String newColumn20;

		public String getNewColumn20() {
			return this.newColumn20;
		}

		public String newColumn21;

		public String getNewColumn21() {
			return this.newColumn21;
		}

		public String newColumn22;

		public String getNewColumn22() {
			return this.newColumn22;
		}

		public String newColumn23;

		public String getNewColumn23() {
			return this.newColumn23;
		}

		public String newColumn24;

		public String getNewColumn24() {
			return this.newColumn24;
		}

		public String Quantity;

		public String getQuantity() {
			return this.Quantity;
		}

		public String newColumn26;

		public String getNewColumn26() {
			return this.newColumn26;
		}

		public String newColumn27;

		public String getNewColumn27() {
			return this.newColumn27;
		}

		public String newColumn28;

		public String getNewColumn28() {
			return this.newColumn28;
		}

		public String newColumn29;

		public String getNewColumn29() {
			return this.newColumn29;
		}

		public String newColumn30;

		public String getNewColumn30() {
			return this.newColumn30;
		}

		public String newColumn31;

		public String getNewColumn31() {
			return this.newColumn31;
		}

		public String newColumn32;

		public String getNewColumn32() {
			return this.newColumn32;
		}

		public String newColumn33;

		public String getNewColumn33() {
			return this.newColumn33;
		}

		public String newColumn34;

		public String getNewColumn34() {
			return this.newColumn34;
		}

		public String newColumn35;

		public String getNewColumn35() {
			return this.newColumn35;
		}

		public String newColumn36;

		public String getNewColumn36() {
			return this.newColumn36;
		}

		public String newColumn37;

		public String getNewColumn37() {
			return this.newColumn37;
		}

		public String newColumn38;

		public String getNewColumn38() {
			return this.newColumn38;
		}

		public String newColumn39;

		public String getNewColumn39() {
			return this.newColumn39;
		}

		public String newColumn40;

		public String getNewColumn40() {
			return this.newColumn40;
		}

		public String newColumn41;

		public String getNewColumn41() {
			return this.newColumn41;
		}

		public String newColumn42;

		public String getNewColumn42() {
			return this.newColumn42;
		}

		public String newColumn43;

		public String getNewColumn43() {
			return this.newColumn43;
		}

		public String newColumn44;

		public String getNewColumn44() {
			return this.newColumn44;
		}

		public String newColumn45;

		public String getNewColumn45() {
			return this.newColumn45;
		}

		public String newColumn46;

		public String getNewColumn46() {
			return this.newColumn46;
		}

		public String newColumn47;

		public String getNewColumn47() {
			return this.newColumn47;
		}

		public String newColumn48;

		public String getNewColumn48() {
			return this.newColumn48;
		}

		public String newColumn49;

		public String getNewColumn49() {
			return this.newColumn49;
		}

		public String newColumn50;

		public String getNewColumn50() {
			return this.newColumn50;
		}

		public String newColumn51;

		public String getNewColumn51() {
			return this.newColumn51;
		}

		public String newColumn52;

		public String getNewColumn52() {
			return this.newColumn52;
		}

		public String newColumn53;

		public String getNewColumn53() {
			return this.newColumn53;
		}

		public String newColumn54;

		public String getNewColumn54() {
			return this.newColumn54;
		}

		public String newColumn55;

		public String getNewColumn55() {
			return this.newColumn55;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE.length == 0) {
						commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_BUILD_RAW_DATA_FROM_FILE) {

				try {

					int length = 0;

					this.newColumn = readString(dis);

					this.newColumn1 = readString(dis);

					this.newColumn2 = readString(dis);

					this.newColumn3 = readString(dis);

					this.newColumn4 = readString(dis);

					this.newColumn5 = readString(dis);

					this.newColumn6 = readString(dis);

					this.newColumn7 = readString(dis);

					this.newColumn8 = readString(dis);

					this.newColumn9 = readString(dis);

					this.newColumn10 = readString(dis);

					this.newColumn11 = readString(dis);

					this.newColumn12 = readString(dis);

					this.InvoiceLineNumber = readString(dis);

					this.InvoiceNumber = readString(dis);

					this.InvoiceDate = readString(dis);

					this.ProductCode = readString(dis);

					this.newColumn17 = readString(dis);

					this.newColumn18 = readString(dis);

					this.newColumn19 = readString(dis);

					this.newColumn20 = readString(dis);

					this.newColumn21 = readString(dis);

					this.newColumn22 = readString(dis);

					this.newColumn23 = readString(dis);

					this.newColumn24 = readString(dis);

					this.Quantity = readString(dis);

					this.newColumn26 = readString(dis);

					this.newColumn27 = readString(dis);

					this.newColumn28 = readString(dis);

					this.newColumn29 = readString(dis);

					this.newColumn30 = readString(dis);

					this.newColumn31 = readString(dis);

					this.newColumn32 = readString(dis);

					this.newColumn33 = readString(dis);

					this.newColumn34 = readString(dis);

					this.newColumn35 = readString(dis);

					this.newColumn36 = readString(dis);

					this.newColumn37 = readString(dis);

					this.newColumn38 = readString(dis);

					this.newColumn39 = readString(dis);

					this.newColumn40 = readString(dis);

					this.newColumn41 = readString(dis);

					this.newColumn42 = readString(dis);

					this.newColumn43 = readString(dis);

					this.newColumn44 = readString(dis);

					this.newColumn45 = readString(dis);

					this.newColumn46 = readString(dis);

					this.newColumn47 = readString(dis);

					this.newColumn48 = readString(dis);

					this.newColumn49 = readString(dis);

					this.newColumn50 = readString(dis);

					this.newColumn51 = readString(dis);

					this.newColumn52 = readString(dis);

					this.newColumn53 = readString(dis);

					this.newColumn54 = readString(dis);

					this.newColumn55 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.newColumn, dos);

				// String

				writeString(this.newColumn1, dos);

				// String

				writeString(this.newColumn2, dos);

				// String

				writeString(this.newColumn3, dos);

				// String

				writeString(this.newColumn4, dos);

				// String

				writeString(this.newColumn5, dos);

				// String

				writeString(this.newColumn6, dos);

				// String

				writeString(this.newColumn7, dos);

				// String

				writeString(this.newColumn8, dos);

				// String

				writeString(this.newColumn9, dos);

				// String

				writeString(this.newColumn10, dos);

				// String

				writeString(this.newColumn11, dos);

				// String

				writeString(this.newColumn12, dos);

				// String

				writeString(this.InvoiceLineNumber, dos);

				// String

				writeString(this.InvoiceNumber, dos);

				// String

				writeString(this.InvoiceDate, dos);

				// String

				writeString(this.ProductCode, dos);

				// String

				writeString(this.newColumn17, dos);

				// String

				writeString(this.newColumn18, dos);

				// String

				writeString(this.newColumn19, dos);

				// String

				writeString(this.newColumn20, dos);

				// String

				writeString(this.newColumn21, dos);

				// String

				writeString(this.newColumn22, dos);

				// String

				writeString(this.newColumn23, dos);

				// String

				writeString(this.newColumn24, dos);

				// String

				writeString(this.Quantity, dos);

				// String

				writeString(this.newColumn26, dos);

				// String

				writeString(this.newColumn27, dos);

				// String

				writeString(this.newColumn28, dos);

				// String

				writeString(this.newColumn29, dos);

				// String

				writeString(this.newColumn30, dos);

				// String

				writeString(this.newColumn31, dos);

				// String

				writeString(this.newColumn32, dos);

				// String

				writeString(this.newColumn33, dos);

				// String

				writeString(this.newColumn34, dos);

				// String

				writeString(this.newColumn35, dos);

				// String

				writeString(this.newColumn36, dos);

				// String

				writeString(this.newColumn37, dos);

				// String

				writeString(this.newColumn38, dos);

				// String

				writeString(this.newColumn39, dos);

				// String

				writeString(this.newColumn40, dos);

				// String

				writeString(this.newColumn41, dos);

				// String

				writeString(this.newColumn42, dos);

				// String

				writeString(this.newColumn43, dos);

				// String

				writeString(this.newColumn44, dos);

				// String

				writeString(this.newColumn45, dos);

				// String

				writeString(this.newColumn46, dos);

				// String

				writeString(this.newColumn47, dos);

				// String

				writeString(this.newColumn48, dos);

				// String

				writeString(this.newColumn49, dos);

				// String

				writeString(this.newColumn50, dos);

				// String

				writeString(this.newColumn51, dos);

				// String

				writeString(this.newColumn52, dos);

				// String

				writeString(this.newColumn53, dos);

				// String

				writeString(this.newColumn54, dos);

				// String

				writeString(this.newColumn55, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("newColumn=" + newColumn);
			sb.append(",newColumn1=" + newColumn1);
			sb.append(",newColumn2=" + newColumn2);
			sb.append(",newColumn3=" + newColumn3);
			sb.append(",newColumn4=" + newColumn4);
			sb.append(",newColumn5=" + newColumn5);
			sb.append(",newColumn6=" + newColumn6);
			sb.append(",newColumn7=" + newColumn7);
			sb.append(",newColumn8=" + newColumn8);
			sb.append(",newColumn9=" + newColumn9);
			sb.append(",newColumn10=" + newColumn10);
			sb.append(",newColumn11=" + newColumn11);
			sb.append(",newColumn12=" + newColumn12);
			sb.append(",InvoiceLineNumber=" + InvoiceLineNumber);
			sb.append(",InvoiceNumber=" + InvoiceNumber);
			sb.append(",InvoiceDate=" + InvoiceDate);
			sb.append(",ProductCode=" + ProductCode);
			sb.append(",newColumn17=" + newColumn17);
			sb.append(",newColumn18=" + newColumn18);
			sb.append(",newColumn19=" + newColumn19);
			sb.append(",newColumn20=" + newColumn20);
			sb.append(",newColumn21=" + newColumn21);
			sb.append(",newColumn22=" + newColumn22);
			sb.append(",newColumn23=" + newColumn23);
			sb.append(",newColumn24=" + newColumn24);
			sb.append(",Quantity=" + Quantity);
			sb.append(",newColumn26=" + newColumn26);
			sb.append(",newColumn27=" + newColumn27);
			sb.append(",newColumn28=" + newColumn28);
			sb.append(",newColumn29=" + newColumn29);
			sb.append(",newColumn30=" + newColumn30);
			sb.append(",newColumn31=" + newColumn31);
			sb.append(",newColumn32=" + newColumn32);
			sb.append(",newColumn33=" + newColumn33);
			sb.append(",newColumn34=" + newColumn34);
			sb.append(",newColumn35=" + newColumn35);
			sb.append(",newColumn36=" + newColumn36);
			sb.append(",newColumn37=" + newColumn37);
			sb.append(",newColumn38=" + newColumn38);
			sb.append(",newColumn39=" + newColumn39);
			sb.append(",newColumn40=" + newColumn40);
			sb.append(",newColumn41=" + newColumn41);
			sb.append(",newColumn42=" + newColumn42);
			sb.append(",newColumn43=" + newColumn43);
			sb.append(",newColumn44=" + newColumn44);
			sb.append(",newColumn45=" + newColumn45);
			sb.append(",newColumn46=" + newColumn46);
			sb.append(",newColumn47=" + newColumn47);
			sb.append(",newColumn48=" + newColumn48);
			sb.append(",newColumn49=" + newColumn49);
			sb.append(",newColumn50=" + newColumn50);
			sb.append(",newColumn51=" + newColumn51);
			sb.append(",newColumn52=" + newColumn52);
			sb.append(",newColumn53=" + newColumn53);
			sb.append(",newColumn54=" + newColumn54);
			sb.append(",newColumn55=" + newColumn55);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileList_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();

				/**
				 * [tFileList_1 begin ] start
				 */

				int NB_ITERATE_tFileInputExcel_1 = 0; // for statistics

				ok_Hash.put("tFileList_1", false);
				start_Hash.put("tFileList_1", System.currentTimeMillis());

				currentComponent = "tFileList_1";

				int tos_count_tFileList_1 = 0;

				class BytesLimit65535_tFileList_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileList_1().limitLog4jByte();

				String directory_tFileList_1 = "C:/Users/RRU_CN1/Desktop/Servier (Oct 2017 - Mar 2018)";
				final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
				final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>();
				maskList_tFileList_1.add("*_DailySalesData_NW.xlsx");
				for (final String filemask_tFileList_1 : maskList_tFileList_1) {
					String filemask_compile_tFileList_1 = filemask_tFileList_1;

					filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler
							.globToPerl5(
									filemask_tFileList_1.toCharArray(),
									org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

					java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern
							.compile(filemask_compile_tFileList_1);
					patternList_tFileList_1.add(fileNamePattern_tFileList_1);
				}
				int NB_FILEtFileList_1 = 0;

				final boolean case_sensitive_tFileList_1 = true;
				final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
				final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
				java.io.File file_tFileList_1 = new java.io.File(
						directory_tFileList_1);

				file_tFileList_1.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_1 = file.getName();
							for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
								if (fileNamePattern_tFileList_1.matcher(
										fileName_tFileList_1).matches()) {
									if (!filePath_tFileList_1.contains(file
											.getAbsolutePath())) {
										list_tFileList_1.add(file);
										filePath_tFileList_1.add(file
												.getAbsolutePath());
									}
								}
							}
						}
						return true;
					}
				});
				java.util.Collections.sort(list_tFileList_1);

				for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1
						.size(); i_tFileList_1++) {
					java.io.File files_tFileList_1 = list_tFileList_1
							.get(i_tFileList_1);
					String fileName_tFileList_1 = files_tFileList_1.getName();

					String currentFileName_tFileList_1 = files_tFileList_1
							.getName();
					String currentFilePath_tFileList_1 = files_tFileList_1
							.getAbsolutePath();
					String currentFileDirectory_tFileList_1 = files_tFileList_1
							.getParent();
					String currentFileExtension_tFileList_1 = null;

					if (files_tFileList_1.getName().contains(".")
							&& files_tFileList_1.isFile()) {
						currentFileExtension_tFileList_1 = files_tFileList_1
								.getName().substring(
										files_tFileList_1.getName()
												.lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_1 = "";
					}

					NB_FILEtFileList_1++;
					globalMap.put("tFileList_1_CURRENT_FILE",
							currentFileName_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEPATH",
							currentFilePath_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY",
							currentFileDirectory_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEEXTENSION",
							currentFileExtension_tFileList_1);
					globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

					/**
					 * [tFileList_1 begin ] stop
					 */

					/**
					 * [tFileList_1 main ] start
					 */

					currentComponent = "tFileList_1";

					tos_count_tFileList_1++;

					/**
					 * [tFileList_1 main ] stop
					 */

					/**
					 * [tFileList_1 process_data_begin ] start
					 */

					currentComponent = "tFileList_1";

					/**
					 * [tFileList_1 process_data_begin ] stop
					 */
					NB_ITERATE_tFileInputExcel_1++;

					if (execStat) {
						runStat.updateStatOnConnection("row2", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row1", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("iterate1", 1, "exec"
								+ NB_ITERATE_tFileInputExcel_1);
						// Thread.sleep(1000);
					}

					/**
					 * [tFileOutputDelimited_1 begin ] start
					 */

					ok_Hash.put("tFileOutputDelimited_1", false);
					start_Hash.put("tFileOutputDelimited_1",
							System.currentTimeMillis());

					currentComponent = "tFileOutputDelimited_1";

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null) {

							runStat.updateStatOnConnection("row2" + iterateId,
									0, 0);

						}
					}

					int tos_count_tFileOutputDelimited_1 = 0;

					class BytesLimit65535_tFileOutputDelimited_1 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tFileOutputDelimited_1()
							.limitLog4jByte();

					String fileName_tFileOutputDelimited_1 = "";
					fileName_tFileOutputDelimited_1 = (new java.io.File(
							"C:/Users/RRU_CN1/Desktop/Daily Sales 10-2017 to 3-2018.csv"))
							.getAbsolutePath().replace("\\", "/");
					String fullName_tFileOutputDelimited_1 = null;
					String extension_tFileOutputDelimited_1 = null;
					String directory_tFileOutputDelimited_1 = null;
					if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
						if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
								.lastIndexOf("/")) {
							fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
							extension_tFileOutputDelimited_1 = "";
						} else {
							fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(0,
											fileName_tFileOutputDelimited_1
													.lastIndexOf("."));
							extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(fileName_tFileOutputDelimited_1
											.lastIndexOf("."));
						}
						directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("/"));
					} else {
						if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
							fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(0,
											fileName_tFileOutputDelimited_1
													.lastIndexOf("."));
							extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(fileName_tFileOutputDelimited_1
											.lastIndexOf("."));
						} else {
							fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
							extension_tFileOutputDelimited_1 = "";
						}
						directory_tFileOutputDelimited_1 = "";
					}
					boolean isFileGenerated_tFileOutputDelimited_1 = true;
					java.io.File filetFileOutputDelimited_1 = new java.io.File(
							fileName_tFileOutputDelimited_1);
					globalMap.put("tFileOutputDelimited_1_FILE_NAME",
							fileName_tFileOutputDelimited_1);
					if (filetFileOutputDelimited_1.exists()) {
						isFileGenerated_tFileOutputDelimited_1 = false;
					}
					int nb_line_tFileOutputDelimited_1 = 0;
					int splitedFileNo_tFileOutputDelimited_1 = 0;
					int currentRow_tFileOutputDelimited_1 = 0;

					final String OUT_DELIM_tFileOutputDelimited_1 = /**
					 * Start
					 * field tFileOutputDelimited_1:FIELDSEPARATOR
					 */
					","/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
					;

					final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
					 * 
					 * Start field tFileOutputDelimited_1:ROWSEPARATOR
					 */
					"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
					;

					// create directory only if not exists
					if (directory_tFileOutputDelimited_1 != null
							&& directory_tFileOutputDelimited_1.trim().length() != 0) {
						java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
								directory_tFileOutputDelimited_1);
						if (!dir_tFileOutputDelimited_1.exists()) {
							dir_tFileOutputDelimited_1.mkdirs();
						}
					}

					// routines.system.Row
					java.io.Writer outtFileOutputDelimited_1 = null;

					outtFileOutputDelimited_1 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_1,
											true), "UTF-8"));
					if (filetFileOutputDelimited_1.length() == 0) {
						outtFileOutputDelimited_1.write("InvoiceLineNumber");
						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.write("InvoiceNumber");
						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.write("InvoiceDate");
						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.write("ProductCode");
						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.write("Quantity");
						outtFileOutputDelimited_1
								.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.flush();
					}

					resourceMap.put("out_tFileOutputDelimited_1",
							outtFileOutputDelimited_1);
					resourceMap.put("nb_line_tFileOutputDelimited_1",
							nb_line_tFileOutputDelimited_1);

					/**
					 * [tFileOutputDelimited_1 begin ] stop
					 */

					/**
					 * [tFilterColumns_1 begin ] start
					 */

					ok_Hash.put("tFilterColumns_1", false);
					start_Hash.put("tFilterColumns_1",
							System.currentTimeMillis());

					currentComponent = "tFilterColumns_1";

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null) {

							runStat.updateStatOnConnection("row1" + iterateId,
									0, 0);

						}
					}

					int tos_count_tFilterColumns_1 = 0;

					class BytesLimit65535_tFilterColumns_1 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tFilterColumns_1().limitLog4jByte();

					int nb_line_tFilterColumns_1 = 0;

					/**
					 * [tFilterColumns_1 begin ] stop
					 */

					/**
					 * [tFileInputExcel_1 begin ] start
					 */

					ok_Hash.put("tFileInputExcel_1", false);
					start_Hash.put("tFileInputExcel_1",
							System.currentTimeMillis());

					currentComponent = "tFileInputExcel_1";

					int tos_count_tFileInputExcel_1 = 0;

					class BytesLimit65535_tFileInputExcel_1 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tFileInputExcel_1().limitLog4jByte();

					Object source_tFileInputExcel_1 = globalMap
							.get("tFileList_1_CURRENT_FILEPATH");
					com.talend.excel.xssf.event.ExcelReader excelReader_tFileInputExcel_1 = null;

					if (source_tFileInputExcel_1 instanceof java.io.InputStream
							|| source_tFileInputExcel_1 instanceof String) {
						excelReader_tFileInputExcel_1 = new com.talend.excel.xssf.event.ExcelReader();
					} else {
						throw new java.lang.Exception(
								"The data source should be specified as Inputstream or File Path!");
					}

					try {
						excelReader_tFileInputExcel_1.addSheetName(".*", true);
						int start_column_tFileInputExcel_1 = 1 - 1;
						int end_column_tFileInputExcel_1 = -1;
						if (start_column_tFileInputExcel_1 >= 0) {// follow
																	// start
																	// column

							end_column_tFileInputExcel_1 = start_column_tFileInputExcel_1 + 56 - 1;

						} else if (end_column_tFileInputExcel_1 >= 0) {// follow
																		// end
																		// column
							start_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 - 56 + 1;
						}

						if (end_column_tFileInputExcel_1 < 0
								|| start_column_tFileInputExcel_1 < 0) {
							throw new RuntimeException(
									"Error start column and end column.");
						}
						int actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1;

						int header_tFileInputExcel_1 = 7;
						int limit_tFileInputExcel_1 = -1;

						int nb_line_tFileInputExcel_1 = 0;

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1
								.getDecimalFormatSymbols()
								.getDecimalSeparator();

						if (source_tFileInputExcel_1 instanceof String) {
							excelReader_tFileInputExcel_1.parse(
									(String) source_tFileInputExcel_1, "UTF-8");
						} else if (source_tFileInputExcel_1 instanceof java.io.InputStream) {
							excelReader_tFileInputExcel_1
									.parse((java.io.InputStream) source_tFileInputExcel_1,
											"UTF-8");
						}

						while ((header_tFileInputExcel_1--) > 0
								&& excelReader_tFileInputExcel_1.hasNext()) {// skip
																				// the
																				// header
							excelReader_tFileInputExcel_1.next();
						}

						while (excelReader_tFileInputExcel_1.hasNext()) {
							int emptyColumnCount_tFileInputExcel_1 = 0;

							if (limit_tFileInputExcel_1 != -1
									&& nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
								excelReader_tFileInputExcel_1.stopRead();
								break;
							}

							java.util.List<String> row_tFileInputExcel_1 = excelReader_tFileInputExcel_1
									.next();
							row1 = null;
							int tempRowLength_tFileInputExcel_1 = 56;

							int columnIndex_tFileInputExcel_1 = 0;

							String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];

							for (int i_tFileInputExcel_1 = 0; i_tFileInputExcel_1 < tempRowLength_tFileInputExcel_1; i_tFileInputExcel_1++) {
								int current_tFileInputExcel_1 = i_tFileInputExcel_1
										+ start_column_tFileInputExcel_1;
								if (current_tFileInputExcel_1 <= actual_end_column_tFileInputExcel_1) {
									if (current_tFileInputExcel_1 < row_tFileInputExcel_1
											.size()) {
										String column_tFileInputExcel_1 = row_tFileInputExcel_1
												.get(current_tFileInputExcel_1);
										if (column_tFileInputExcel_1 != null) {
											temp_row_tFileInputExcel_1[i_tFileInputExcel_1] = column_tFileInputExcel_1;
										} else {
											temp_row_tFileInputExcel_1[i_tFileInputExcel_1] = "";
										}
									} else {
										temp_row_tFileInputExcel_1[i_tFileInputExcel_1] = "";
									}
								} else {
									temp_row_tFileInputExcel_1[i_tFileInputExcel_1] = "";
								}
							}

							boolean whetherReject_tFileInputExcel_1 = false;
							row1 = new row1Struct();
							int curColNum_tFileInputExcel_1 = -1;
							String curColName_tFileInputExcel_1 = "";

							try {
								columnIndex_tFileInputExcel_1 = 0;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn";

									row1.newColumn = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 1;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn1";

									row1.newColumn1 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn1 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 2;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn2";

									row1.newColumn2 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn2 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 3;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn3";

									row1.newColumn3 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn3 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 4;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn4";

									row1.newColumn4 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn4 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 5;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn5";

									row1.newColumn5 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn5 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 6;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn6";

									row1.newColumn6 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn6 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 7;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn7";

									row1.newColumn7 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn7 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 8;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn8";

									row1.newColumn8 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn8 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 9;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn9";

									row1.newColumn9 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn9 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 10;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn10";

									row1.newColumn10 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn10 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 11;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn11";

									row1.newColumn11 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn11 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 12;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn12";

									row1.newColumn12 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn12 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 13;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "InvoiceLineNumber";

									row1.InvoiceLineNumber = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.InvoiceLineNumber = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 14;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "InvoiceNumber";

									row1.InvoiceNumber = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.InvoiceNumber = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 15;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "InvoiceDate";

									row1.InvoiceDate = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.InvoiceDate = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 16;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "ProductCode";

									row1.ProductCode = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.ProductCode = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 17;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn17";

									row1.newColumn17 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn17 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 18;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn18";

									row1.newColumn18 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn18 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 19;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn19";

									row1.newColumn19 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn19 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 20;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn20";

									row1.newColumn20 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn20 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 21;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn21";

									row1.newColumn21 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn21 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 22;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn22";

									row1.newColumn22 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn22 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 23;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn23";

									row1.newColumn23 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn23 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 24;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn24";

									row1.newColumn24 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn24 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 25;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "Quantity";

									row1.Quantity = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.Quantity = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 26;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn26";

									row1.newColumn26 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn26 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 27;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn27";

									row1.newColumn27 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn27 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 28;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn28";

									row1.newColumn28 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn28 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 29;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn29";

									row1.newColumn29 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn29 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 30;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn30";

									row1.newColumn30 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn30 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 31;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn31";

									row1.newColumn31 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn31 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 32;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn32";

									row1.newColumn32 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn32 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 33;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn33";

									row1.newColumn33 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn33 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 34;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn34";

									row1.newColumn34 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn34 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 35;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn35";

									row1.newColumn35 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn35 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 36;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn36";

									row1.newColumn36 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn36 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 37;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn37";

									row1.newColumn37 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn37 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 38;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn38";

									row1.newColumn38 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn38 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 39;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn39";

									row1.newColumn39 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn39 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 40;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn40";

									row1.newColumn40 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn40 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 41;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn41";

									row1.newColumn41 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn41 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 42;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn42";

									row1.newColumn42 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn42 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 43;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn43";

									row1.newColumn43 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn43 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 44;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn44";

									row1.newColumn44 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn44 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 45;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn45";

									row1.newColumn45 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn45 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 46;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn46";

									row1.newColumn46 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn46 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 47;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn47";

									row1.newColumn47 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn47 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 48;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn48";

									row1.newColumn48 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn48 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 49;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn49";

									row1.newColumn49 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn49 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 50;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn50";

									row1.newColumn50 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn50 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 51;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn51";

									row1.newColumn51 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn51 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 52;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn52";

									row1.newColumn52 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn52 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 53;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn53";

									row1.newColumn53 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn53 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 54;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn54";

									row1.newColumn54 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn54 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 55;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1
											+ 1;
									curColName_tFileInputExcel_1 = "newColumn55";

									row1.newColumn55 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
											.trim();
								} else {
									row1.newColumn55 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								nb_line_tFileInputExcel_1++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_1 = true;
								System.err.println(e.getMessage());
								row1 = null;
							}

							/**
							 * [tFileInputExcel_1 begin ] stop
							 */

							/**
							 * [tFileInputExcel_1 main ] start
							 */

							currentComponent = "tFileInputExcel_1";

							tos_count_tFileInputExcel_1++;

							/**
							 * [tFileInputExcel_1 main ] stop
							 */

							/**
							 * [tFileInputExcel_1 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_begin ] stop
							 */
							// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tFilterColumns_1 main ] start
								 */

								currentComponent = "tFilterColumns_1";

								// row1
								// row1

								if (execStat) {
									runStat.updateStatOnConnection("row1"
											+ iterateId, 1, 1);
								}

								row2.InvoiceLineNumber = row1.InvoiceLineNumber;

								row2.InvoiceNumber = row1.InvoiceNumber;

								row2.InvoiceDate = row1.InvoiceDate;

								row2.ProductCode = row1.ProductCode;

								row2.Quantity = row1.Quantity;

								nb_line_tFilterColumns_1++;

								tos_count_tFilterColumns_1++;

								/**
								 * [tFilterColumns_1 main ] stop
								 */

								/**
								 * [tFilterColumns_1 process_data_begin ] start
								 */

								currentComponent = "tFilterColumns_1";

								/**
								 * [tFilterColumns_1 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_1 main ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								// row2
								// row2

								if (execStat) {
									runStat.updateStatOnConnection("row2"
											+ iterateId, 1, 1);
								}

								StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
								if (row2.InvoiceLineNumber != null) {
									sb_tFileOutputDelimited_1
											.append(row2.InvoiceLineNumber);
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row2.InvoiceNumber != null) {
									sb_tFileOutputDelimited_1
											.append(row2.InvoiceNumber);
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row2.InvoiceDate != null) {
									sb_tFileOutputDelimited_1
											.append(row2.InvoiceDate);
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row2.ProductCode != null) {
									sb_tFileOutputDelimited_1
											.append(row2.ProductCode);
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row2.Quantity != null) {
									sb_tFileOutputDelimited_1
											.append(row2.Quantity);
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

								nb_line_tFileOutputDelimited_1++;
								resourceMap.put(
										"nb_line_tFileOutputDelimited_1",
										nb_line_tFileOutputDelimited_1);

								outtFileOutputDelimited_1
										.write(sb_tFileOutputDelimited_1
												.toString());

								tos_count_tFileOutputDelimited_1++;

								/**
								 * [tFileOutputDelimited_1 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_1 process_data_begin ]
								 * start
								 */

								currentComponent = "tFileOutputDelimited_1";

								/**
								 * [tFileOutputDelimited_1 process_data_begin ]
								 * stop
								 */

								/**
								 * [tFileOutputDelimited_1 process_data_end ]
								 * start
								 */

								currentComponent = "tFileOutputDelimited_1";

								/**
								 * [tFileOutputDelimited_1 process_data_end ]
								 * stop
								 */

								/**
								 * [tFilterColumns_1 process_data_end ] start
								 */

								currentComponent = "tFilterColumns_1";

								/**
								 * [tFilterColumns_1 process_data_end ] stop
								 */

							} // End of branch "row1"

							/**
							 * [tFileInputExcel_1 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_1 end ] start
							 */

							currentComponent = "tFileInputExcel_1";

						}

						try {
							if (excelReader_tFileInputExcel_1 != null) {
								excelReader_tFileInputExcel_1.handleException();
							}
						} catch (java.lang.Exception e_tFileInputExcel_1) {
							if (!(e_tFileInputExcel_1.getCause() instanceof com.talend.excel.xssf.event.EnoughDataException)) {

								System.err.println(e_tFileInputExcel_1
										.getMessage());

							}
						}

						globalMap.put("tFileInputExcel_1_NB_LINE",
								nb_line_tFileInputExcel_1);

					} finally {

					}

					ok_Hash.put("tFileInputExcel_1", true);
					end_Hash.put("tFileInputExcel_1",
							System.currentTimeMillis());

					/**
					 * [tFileInputExcel_1 end ] stop
					 */

					/**
					 * [tFilterColumns_1 end ] start
					 */

					currentComponent = "tFilterColumns_1";

					globalMap.put("tFilterColumns_1_NB_LINE",
							nb_line_tFilterColumns_1);
					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null
								|| !((Boolean) resourceMap
										.get("inIterateVComp"))) {
							runStat.updateStatOnConnection("row1" + iterateId,
									2, 0);
						}
					}

					ok_Hash.put("tFilterColumns_1", true);
					end_Hash.put("tFilterColumns_1", System.currentTimeMillis());

					/**
					 * [tFilterColumns_1 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 end ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

					globalMap.put("tFileOutputDelimited_1_NB_LINE",
							nb_line_tFileOutputDelimited_1);
					globalMap.put("tFileOutputDelimited_1_FILE_NAME",
							fileName_tFileOutputDelimited_1);

					resourceMap.put("finish_tFileOutputDelimited_1", true);

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null
								|| !((Boolean) resourceMap
										.get("inIterateVComp"))) {
							runStat.updateStatOnConnection("row2" + iterateId,
									2, 0);
						}
					}

					ok_Hash.put("tFileOutputDelimited_1", true);
					end_Hash.put("tFileOutputDelimited_1",
							System.currentTimeMillis());

					/**
					 * [tFileOutputDelimited_1 end ] stop
					 */

					if (execStat) {
						runStat.updateStatOnConnection("iterate1", 2, "exec"
								+ NB_ITERATE_tFileInputExcel_1);
					}

					/**
					 * [tFileList_1 process_data_end ] start
					 */

					currentComponent = "tFileList_1";

					/**
					 * [tFileList_1 process_data_end ] stop
					 */

					/**
					 * [tFileList_1 end ] start
					 */

					currentComponent = "tFileList_1";

				}
				globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

				ok_Hash.put("tFileList_1", true);
				end_Hash.put("tFileList_1", System.currentTimeMillis());

				/**
				 * [tFileList_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileList_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tFileList_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileList_1 finally ] start
				 */

				currentComponent = "tFileList_1";

				/**
				 * [tFileList_1 finally ] stop
				 */

				/**
				 * [tFileInputExcel_1 finally ] start
				 */

				currentComponent = "tFileInputExcel_1";

				/**
				 * [tFileInputExcel_1 finally ] stop
				 */

				/**
				 * [tFilterColumns_1 finally ] start
				 */

				currentComponent = "tFilterColumns_1";

				/**
				 * [tFilterColumns_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[0];
		static byte[] commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[0];

		public String InvoiceLineNumber;

		public String getInvoiceLineNumber() {
			return this.InvoiceLineNumber;
		}

		public String InvoiceNumber;

		public String getInvoiceNumber() {
			return this.InvoiceNumber;
		}

		public String InvoiceDate;

		public String getInvoiceDate() {
			return this.InvoiceDate;
		}

		public String ProductCode;

		public String getProductCode() {
			return this.ProductCode;
		}

		public String Quantity;

		public String getQuantity() {
			return this.Quantity;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE.length == 0) {
						commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_BUILD_RAW_DATA_FROM_FILE) {

				try {

					int length = 0;

					this.InvoiceLineNumber = readString(dis);

					this.InvoiceNumber = readString(dis);

					this.InvoiceDate = readString(dis);

					this.ProductCode = readString(dis);

					this.Quantity = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.InvoiceLineNumber, dos);

				// String

				writeString(this.InvoiceNumber, dos);

				// String

				writeString(this.InvoiceDate, dos);

				// String

				writeString(this.ProductCode, dos);

				// String

				writeString(this.Quantity, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("InvoiceLineNumber=" + InvoiceLineNumber);
			sb.append(",InvoiceNumber=" + InvoiceNumber);
			sb.append(",InvoiceDate=" + InvoiceDate);
			sb.append(",ProductCode=" + ProductCode);
			sb.append(",Quantity=" + Quantity);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[0];
		static byte[] commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[0];

		public String newColumn;

		public String getNewColumn() {
			return this.newColumn;
		}

		public String newColumn1;

		public String getNewColumn1() {
			return this.newColumn1;
		}

		public String newColumn2;

		public String getNewColumn2() {
			return this.newColumn2;
		}

		public String newColumn3;

		public String getNewColumn3() {
			return this.newColumn3;
		}

		public String newColumn4;

		public String getNewColumn4() {
			return this.newColumn4;
		}

		public String newColumn5;

		public String getNewColumn5() {
			return this.newColumn5;
		}

		public String newColumn6;

		public String getNewColumn6() {
			return this.newColumn6;
		}

		public String newColumn7;

		public String getNewColumn7() {
			return this.newColumn7;
		}

		public String newColumn8;

		public String getNewColumn8() {
			return this.newColumn8;
		}

		public String newColumn9;

		public String getNewColumn9() {
			return this.newColumn9;
		}

		public String newColumn10;

		public String getNewColumn10() {
			return this.newColumn10;
		}

		public String InvoiceLineNumber;

		public String getInvoiceLineNumber() {
			return this.InvoiceLineNumber;
		}

		public String InvoiceNumber;

		public String getInvoiceNumber() {
			return this.InvoiceNumber;
		}

		public String InvoiceDate;

		public String getInvoiceDate() {
			return this.InvoiceDate;
		}

		public String ProductCode;

		public String getProductCode() {
			return this.ProductCode;
		}

		public String newColumn15;

		public String getNewColumn15() {
			return this.newColumn15;
		}

		public String newColumn16;

		public String getNewColumn16() {
			return this.newColumn16;
		}

		public String newColumn17;

		public String getNewColumn17() {
			return this.newColumn17;
		}

		public String newColumn18;

		public String getNewColumn18() {
			return this.newColumn18;
		}

		public String newColumn19;

		public String getNewColumn19() {
			return this.newColumn19;
		}

		public String newColumn20;

		public String getNewColumn20() {
			return this.newColumn20;
		}

		public String newColumn21;

		public String getNewColumn21() {
			return this.newColumn21;
		}

		public String Quantity;

		public String getQuantity() {
			return this.Quantity;
		}

		public String newColumn23;

		public String getNewColumn23() {
			return this.newColumn23;
		}

		public String newColumn24;

		public String getNewColumn24() {
			return this.newColumn24;
		}

		public String newColumn25;

		public String getNewColumn25() {
			return this.newColumn25;
		}

		public String newColumn26;

		public String getNewColumn26() {
			return this.newColumn26;
		}

		public String newColumn27;

		public String getNewColumn27() {
			return this.newColumn27;
		}

		public String newColumn28;

		public String getNewColumn28() {
			return this.newColumn28;
		}

		public String newColumn29;

		public String getNewColumn29() {
			return this.newColumn29;
		}

		public String newColumn30;

		public String getNewColumn30() {
			return this.newColumn30;
		}

		public String newColumn31;

		public String getNewColumn31() {
			return this.newColumn31;
		}

		public String newColumn32;

		public String getNewColumn32() {
			return this.newColumn32;
		}

		public String newColumn33;

		public String getNewColumn33() {
			return this.newColumn33;
		}

		public String newColumn34;

		public String getNewColumn34() {
			return this.newColumn34;
		}

		public String newColumn35;

		public String getNewColumn35() {
			return this.newColumn35;
		}

		public String newColumn36;

		public String getNewColumn36() {
			return this.newColumn36;
		}

		public String newColumn37;

		public String getNewColumn37() {
			return this.newColumn37;
		}

		public String newColumn38;

		public String getNewColumn38() {
			return this.newColumn38;
		}

		public String newColumn39;

		public String getNewColumn39() {
			return this.newColumn39;
		}

		public String newColumn40;

		public String getNewColumn40() {
			return this.newColumn40;
		}

		public String newColumn41;

		public String getNewColumn41() {
			return this.newColumn41;
		}

		public String newColumn42;

		public String getNewColumn42() {
			return this.newColumn42;
		}

		public String newColumn43;

		public String getNewColumn43() {
			return this.newColumn43;
		}

		public String newColumn44;

		public String getNewColumn44() {
			return this.newColumn44;
		}

		public String newColumn45;

		public String getNewColumn45() {
			return this.newColumn45;
		}

		public String newColumn46;

		public String getNewColumn46() {
			return this.newColumn46;
		}

		public String newColumn47;

		public String getNewColumn47() {
			return this.newColumn47;
		}

		public String newColumn48;

		public String getNewColumn48() {
			return this.newColumn48;
		}

		public String newColumn49;

		public String getNewColumn49() {
			return this.newColumn49;
		}

		public String newColumn50;

		public String getNewColumn50() {
			return this.newColumn50;
		}

		public String newColumn51;

		public String getNewColumn51() {
			return this.newColumn51;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE.length == 0) {
						commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_BUILD_RAW_DATA_FROM_FILE) {

				try {

					int length = 0;

					this.newColumn = readString(dis);

					this.newColumn1 = readString(dis);

					this.newColumn2 = readString(dis);

					this.newColumn3 = readString(dis);

					this.newColumn4 = readString(dis);

					this.newColumn5 = readString(dis);

					this.newColumn6 = readString(dis);

					this.newColumn7 = readString(dis);

					this.newColumn8 = readString(dis);

					this.newColumn9 = readString(dis);

					this.newColumn10 = readString(dis);

					this.InvoiceLineNumber = readString(dis);

					this.InvoiceNumber = readString(dis);

					this.InvoiceDate = readString(dis);

					this.ProductCode = readString(dis);

					this.newColumn15 = readString(dis);

					this.newColumn16 = readString(dis);

					this.newColumn17 = readString(dis);

					this.newColumn18 = readString(dis);

					this.newColumn19 = readString(dis);

					this.newColumn20 = readString(dis);

					this.newColumn21 = readString(dis);

					this.Quantity = readString(dis);

					this.newColumn23 = readString(dis);

					this.newColumn24 = readString(dis);

					this.newColumn25 = readString(dis);

					this.newColumn26 = readString(dis);

					this.newColumn27 = readString(dis);

					this.newColumn28 = readString(dis);

					this.newColumn29 = readString(dis);

					this.newColumn30 = readString(dis);

					this.newColumn31 = readString(dis);

					this.newColumn32 = readString(dis);

					this.newColumn33 = readString(dis);

					this.newColumn34 = readString(dis);

					this.newColumn35 = readString(dis);

					this.newColumn36 = readString(dis);

					this.newColumn37 = readString(dis);

					this.newColumn38 = readString(dis);

					this.newColumn39 = readString(dis);

					this.newColumn40 = readString(dis);

					this.newColumn41 = readString(dis);

					this.newColumn42 = readString(dis);

					this.newColumn43 = readString(dis);

					this.newColumn44 = readString(dis);

					this.newColumn45 = readString(dis);

					this.newColumn46 = readString(dis);

					this.newColumn47 = readString(dis);

					this.newColumn48 = readString(dis);

					this.newColumn49 = readString(dis);

					this.newColumn50 = readString(dis);

					this.newColumn51 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.newColumn, dos);

				// String

				writeString(this.newColumn1, dos);

				// String

				writeString(this.newColumn2, dos);

				// String

				writeString(this.newColumn3, dos);

				// String

				writeString(this.newColumn4, dos);

				// String

				writeString(this.newColumn5, dos);

				// String

				writeString(this.newColumn6, dos);

				// String

				writeString(this.newColumn7, dos);

				// String

				writeString(this.newColumn8, dos);

				// String

				writeString(this.newColumn9, dos);

				// String

				writeString(this.newColumn10, dos);

				// String

				writeString(this.InvoiceLineNumber, dos);

				// String

				writeString(this.InvoiceNumber, dos);

				// String

				writeString(this.InvoiceDate, dos);

				// String

				writeString(this.ProductCode, dos);

				// String

				writeString(this.newColumn15, dos);

				// String

				writeString(this.newColumn16, dos);

				// String

				writeString(this.newColumn17, dos);

				// String

				writeString(this.newColumn18, dos);

				// String

				writeString(this.newColumn19, dos);

				// String

				writeString(this.newColumn20, dos);

				// String

				writeString(this.newColumn21, dos);

				// String

				writeString(this.Quantity, dos);

				// String

				writeString(this.newColumn23, dos);

				// String

				writeString(this.newColumn24, dos);

				// String

				writeString(this.newColumn25, dos);

				// String

				writeString(this.newColumn26, dos);

				// String

				writeString(this.newColumn27, dos);

				// String

				writeString(this.newColumn28, dos);

				// String

				writeString(this.newColumn29, dos);

				// String

				writeString(this.newColumn30, dos);

				// String

				writeString(this.newColumn31, dos);

				// String

				writeString(this.newColumn32, dos);

				// String

				writeString(this.newColumn33, dos);

				// String

				writeString(this.newColumn34, dos);

				// String

				writeString(this.newColumn35, dos);

				// String

				writeString(this.newColumn36, dos);

				// String

				writeString(this.newColumn37, dos);

				// String

				writeString(this.newColumn38, dos);

				// String

				writeString(this.newColumn39, dos);

				// String

				writeString(this.newColumn40, dos);

				// String

				writeString(this.newColumn41, dos);

				// String

				writeString(this.newColumn42, dos);

				// String

				writeString(this.newColumn43, dos);

				// String

				writeString(this.newColumn44, dos);

				// String

				writeString(this.newColumn45, dos);

				// String

				writeString(this.newColumn46, dos);

				// String

				writeString(this.newColumn47, dos);

				// String

				writeString(this.newColumn48, dos);

				// String

				writeString(this.newColumn49, dos);

				// String

				writeString(this.newColumn50, dos);

				// String

				writeString(this.newColumn51, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("newColumn=" + newColumn);
			sb.append(",newColumn1=" + newColumn1);
			sb.append(",newColumn2=" + newColumn2);
			sb.append(",newColumn3=" + newColumn3);
			sb.append(",newColumn4=" + newColumn4);
			sb.append(",newColumn5=" + newColumn5);
			sb.append(",newColumn6=" + newColumn6);
			sb.append(",newColumn7=" + newColumn7);
			sb.append(",newColumn8=" + newColumn8);
			sb.append(",newColumn9=" + newColumn9);
			sb.append(",newColumn10=" + newColumn10);
			sb.append(",InvoiceLineNumber=" + InvoiceLineNumber);
			sb.append(",InvoiceNumber=" + InvoiceNumber);
			sb.append(",InvoiceDate=" + InvoiceDate);
			sb.append(",ProductCode=" + ProductCode);
			sb.append(",newColumn15=" + newColumn15);
			sb.append(",newColumn16=" + newColumn16);
			sb.append(",newColumn17=" + newColumn17);
			sb.append(",newColumn18=" + newColumn18);
			sb.append(",newColumn19=" + newColumn19);
			sb.append(",newColumn20=" + newColumn20);
			sb.append(",newColumn21=" + newColumn21);
			sb.append(",Quantity=" + Quantity);
			sb.append(",newColumn23=" + newColumn23);
			sb.append(",newColumn24=" + newColumn24);
			sb.append(",newColumn25=" + newColumn25);
			sb.append(",newColumn26=" + newColumn26);
			sb.append(",newColumn27=" + newColumn27);
			sb.append(",newColumn28=" + newColumn28);
			sb.append(",newColumn29=" + newColumn29);
			sb.append(",newColumn30=" + newColumn30);
			sb.append(",newColumn31=" + newColumn31);
			sb.append(",newColumn32=" + newColumn32);
			sb.append(",newColumn33=" + newColumn33);
			sb.append(",newColumn34=" + newColumn34);
			sb.append(",newColumn35=" + newColumn35);
			sb.append(",newColumn36=" + newColumn36);
			sb.append(",newColumn37=" + newColumn37);
			sb.append(",newColumn38=" + newColumn38);
			sb.append(",newColumn39=" + newColumn39);
			sb.append(",newColumn40=" + newColumn40);
			sb.append(",newColumn41=" + newColumn41);
			sb.append(",newColumn42=" + newColumn42);
			sb.append(",newColumn43=" + newColumn43);
			sb.append(",newColumn44=" + newColumn44);
			sb.append(",newColumn45=" + newColumn45);
			sb.append(",newColumn46=" + newColumn46);
			sb.append(",newColumn47=" + newColumn47);
			sb.append(",newColumn48=" + newColumn48);
			sb.append(",newColumn49=" + newColumn49);
			sb.append(",newColumn50=" + newColumn50);
			sb.append(",newColumn51=" + newColumn51);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileList_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileList_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				row4Struct row4 = new row4Struct();

				/**
				 * [tFileList_2 begin ] start
				 */

				int NB_ITERATE_tFileInputExcel_2 = 0; // for statistics

				ok_Hash.put("tFileList_2", false);
				start_Hash.put("tFileList_2", System.currentTimeMillis());

				currentComponent = "tFileList_2";

				int tos_count_tFileList_2 = 0;

				class BytesLimit65535_tFileList_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileList_2().limitLog4jByte();

				String directory_tFileList_2 = "C:/Users/RRU_CN1/Desktop/Servier (Oct 2017 - Mar 2018)";
				final java.util.List<String> maskList_tFileList_2 = new java.util.ArrayList<String>();
				final java.util.List<java.util.regex.Pattern> patternList_tFileList_2 = new java.util.ArrayList<java.util.regex.Pattern>();
				maskList_tFileList_2.add("*DailyReturnData_NW.xlsx");
				for (final String filemask_tFileList_2 : maskList_tFileList_2) {
					String filemask_compile_tFileList_2 = filemask_tFileList_2;

					filemask_compile_tFileList_2 = org.apache.oro.text.GlobCompiler
							.globToPerl5(
									filemask_tFileList_2.toCharArray(),
									org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

					java.util.regex.Pattern fileNamePattern_tFileList_2 = java.util.regex.Pattern
							.compile(filemask_compile_tFileList_2);
					patternList_tFileList_2.add(fileNamePattern_tFileList_2);
				}
				int NB_FILEtFileList_2 = 0;

				final boolean case_sensitive_tFileList_2 = true;
				final java.util.List<java.io.File> list_tFileList_2 = new java.util.ArrayList<java.io.File>();
				final java.util.Set<String> filePath_tFileList_2 = new java.util.HashSet<String>();
				java.io.File file_tFileList_2 = new java.io.File(
						directory_tFileList_2);

				file_tFileList_2.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_2 = file.getName();
							for (final java.util.regex.Pattern fileNamePattern_tFileList_2 : patternList_tFileList_2) {
								if (fileNamePattern_tFileList_2.matcher(
										fileName_tFileList_2).matches()) {
									if (!filePath_tFileList_2.contains(file
											.getAbsolutePath())) {
										list_tFileList_2.add(file);
										filePath_tFileList_2.add(file
												.getAbsolutePath());
									}
								}
							}
						}
						return true;
					}
				});
				java.util.Collections.sort(list_tFileList_2);

				for (int i_tFileList_2 = 0; i_tFileList_2 < list_tFileList_2
						.size(); i_tFileList_2++) {
					java.io.File files_tFileList_2 = list_tFileList_2
							.get(i_tFileList_2);
					String fileName_tFileList_2 = files_tFileList_2.getName();

					String currentFileName_tFileList_2 = files_tFileList_2
							.getName();
					String currentFilePath_tFileList_2 = files_tFileList_2
							.getAbsolutePath();
					String currentFileDirectory_tFileList_2 = files_tFileList_2
							.getParent();
					String currentFileExtension_tFileList_2 = null;

					if (files_tFileList_2.getName().contains(".")
							&& files_tFileList_2.isFile()) {
						currentFileExtension_tFileList_2 = files_tFileList_2
								.getName().substring(
										files_tFileList_2.getName()
												.lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_2 = "";
					}

					NB_FILEtFileList_2++;
					globalMap.put("tFileList_2_CURRENT_FILE",
							currentFileName_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEPATH",
							currentFilePath_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEDIRECTORY",
							currentFileDirectory_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEEXTENSION",
							currentFileExtension_tFileList_2);
					globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);

					/**
					 * [tFileList_2 begin ] stop
					 */

					/**
					 * [tFileList_2 main ] start
					 */

					currentComponent = "tFileList_2";

					tos_count_tFileList_2++;

					/**
					 * [tFileList_2 main ] stop
					 */

					/**
					 * [tFileList_2 process_data_begin ] start
					 */

					currentComponent = "tFileList_2";

					/**
					 * [tFileList_2 process_data_begin ] stop
					 */
					NB_ITERATE_tFileInputExcel_2++;

					if (execStat) {
						runStat.updateStatOnConnection("row3", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row4", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("iterate2", 1, "exec"
								+ NB_ITERATE_tFileInputExcel_2);
						// Thread.sleep(1000);
					}

					/**
					 * [tFileOutputDelimited_2 begin ] start
					 */

					ok_Hash.put("tFileOutputDelimited_2", false);
					start_Hash.put("tFileOutputDelimited_2",
							System.currentTimeMillis());

					currentComponent = "tFileOutputDelimited_2";

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null) {

							runStat.updateStatOnConnection("row4" + iterateId,
									0, 0);

						}
					}

					int tos_count_tFileOutputDelimited_2 = 0;

					class BytesLimit65535_tFileOutputDelimited_2 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tFileOutputDelimited_2()
							.limitLog4jByte();

					String fileName_tFileOutputDelimited_2 = "";
					fileName_tFileOutputDelimited_2 = (new java.io.File(
							"C:/Users/RRU_CN1/Desktop/Daily Sales 10-2017 to 3-2018.csv"))
							.getAbsolutePath().replace("\\", "/");
					String fullName_tFileOutputDelimited_2 = null;
					String extension_tFileOutputDelimited_2 = null;
					String directory_tFileOutputDelimited_2 = null;
					if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
						if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
								.lastIndexOf("/")) {
							fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
							extension_tFileOutputDelimited_2 = "";
						} else {
							fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
									.substring(0,
											fileName_tFileOutputDelimited_2
													.lastIndexOf("."));
							extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
									.substring(fileName_tFileOutputDelimited_2
											.lastIndexOf("."));
						}
						directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("/"));
					} else {
						if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
							fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
									.substring(0,
											fileName_tFileOutputDelimited_2
													.lastIndexOf("."));
							extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
									.substring(fileName_tFileOutputDelimited_2
											.lastIndexOf("."));
						} else {
							fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
							extension_tFileOutputDelimited_2 = "";
						}
						directory_tFileOutputDelimited_2 = "";
					}
					boolean isFileGenerated_tFileOutputDelimited_2 = true;
					java.io.File filetFileOutputDelimited_2 = new java.io.File(
							fileName_tFileOutputDelimited_2);
					globalMap.put("tFileOutputDelimited_2_FILE_NAME",
							fileName_tFileOutputDelimited_2);
					if (filetFileOutputDelimited_2.exists()) {
						isFileGenerated_tFileOutputDelimited_2 = false;
					}
					int nb_line_tFileOutputDelimited_2 = 0;
					int splitedFileNo_tFileOutputDelimited_2 = 0;
					int currentRow_tFileOutputDelimited_2 = 0;

					final String OUT_DELIM_tFileOutputDelimited_2 = /**
					 * Start
					 * field tFileOutputDelimited_2:FIELDSEPARATOR
					 */
					","/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
					;

					final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
					 * 
					 * Start field tFileOutputDelimited_2:ROWSEPARATOR
					 */
					"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
					;

					// create directory only if not exists
					if (directory_tFileOutputDelimited_2 != null
							&& directory_tFileOutputDelimited_2.trim().length() != 0) {
						java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
								directory_tFileOutputDelimited_2);
						if (!dir_tFileOutputDelimited_2.exists()) {
							dir_tFileOutputDelimited_2.mkdirs();
						}
					}

					// routines.system.Row
					java.io.Writer outtFileOutputDelimited_2 = null;

					outtFileOutputDelimited_2 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_2,
											true), "UTF-8"));
					if (filetFileOutputDelimited_2.length() == 0) {
						outtFileOutputDelimited_2.write("InvoiceLineNumber");
						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);
						outtFileOutputDelimited_2.write("InvoiceNumber");
						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);
						outtFileOutputDelimited_2.write("InvoiceDate");
						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);
						outtFileOutputDelimited_2.write("ProductCode");
						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);
						outtFileOutputDelimited_2.write("Quantity");
						outtFileOutputDelimited_2
								.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
						outtFileOutputDelimited_2.flush();
					}

					resourceMap.put("out_tFileOutputDelimited_2",
							outtFileOutputDelimited_2);
					resourceMap.put("nb_line_tFileOutputDelimited_2",
							nb_line_tFileOutputDelimited_2);

					/**
					 * [tFileOutputDelimited_2 begin ] stop
					 */

					/**
					 * [tFilterColumns_2 begin ] start
					 */

					ok_Hash.put("tFilterColumns_2", false);
					start_Hash.put("tFilterColumns_2",
							System.currentTimeMillis());

					currentComponent = "tFilterColumns_2";

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null) {

							runStat.updateStatOnConnection("row3" + iterateId,
									0, 0);

						}
					}

					int tos_count_tFilterColumns_2 = 0;

					class BytesLimit65535_tFilterColumns_2 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tFilterColumns_2().limitLog4jByte();

					int nb_line_tFilterColumns_2 = 0;

					/**
					 * [tFilterColumns_2 begin ] stop
					 */

					/**
					 * [tFileInputExcel_2 begin ] start
					 */

					ok_Hash.put("tFileInputExcel_2", false);
					start_Hash.put("tFileInputExcel_2",
							System.currentTimeMillis());

					currentComponent = "tFileInputExcel_2";

					int tos_count_tFileInputExcel_2 = 0;

					class BytesLimit65535_tFileInputExcel_2 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tFileInputExcel_2().limitLog4jByte();

					Object source_tFileInputExcel_2 = globalMap
							.get("tFileList_2_CURRENT_FILEPATH");
					com.talend.excel.xssf.event.ExcelReader excelReader_tFileInputExcel_2 = null;

					if (source_tFileInputExcel_2 instanceof java.io.InputStream
							|| source_tFileInputExcel_2 instanceof String) {
						excelReader_tFileInputExcel_2 = new com.talend.excel.xssf.event.ExcelReader();
					} else {
						throw new java.lang.Exception(
								"The data source should be specified as Inputstream or File Path!");
					}

					try {
						excelReader_tFileInputExcel_2.addSheetName(".*", true);
						int start_column_tFileInputExcel_2 = 1 - 1;
						int end_column_tFileInputExcel_2 = -1;
						if (start_column_tFileInputExcel_2 >= 0) {// follow
																	// start
																	// column

							end_column_tFileInputExcel_2 = start_column_tFileInputExcel_2 + 52 - 1;

						} else if (end_column_tFileInputExcel_2 >= 0) {// follow
																		// end
																		// column
							start_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 - 52 + 1;
						}

						if (end_column_tFileInputExcel_2 < 0
								|| start_column_tFileInputExcel_2 < 0) {
							throw new RuntimeException(
									"Error start column and end column.");
						}
						int actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2;

						int header_tFileInputExcel_2 = 7;
						int limit_tFileInputExcel_2 = -1;

						int nb_line_tFileInputExcel_2 = 0;

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_2 = df_tFileInputExcel_2
								.getDecimalFormatSymbols()
								.getDecimalSeparator();

						if (source_tFileInputExcel_2 instanceof String) {
							excelReader_tFileInputExcel_2.parse(
									(String) source_tFileInputExcel_2, "UTF-8");
						} else if (source_tFileInputExcel_2 instanceof java.io.InputStream) {
							excelReader_tFileInputExcel_2
									.parse((java.io.InputStream) source_tFileInputExcel_2,
											"UTF-8");
						}

						while ((header_tFileInputExcel_2--) > 0
								&& excelReader_tFileInputExcel_2.hasNext()) {// skip
																				// the
																				// header
							excelReader_tFileInputExcel_2.next();
						}

						while (excelReader_tFileInputExcel_2.hasNext()) {
							int emptyColumnCount_tFileInputExcel_2 = 0;

							if (limit_tFileInputExcel_2 != -1
									&& nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
								excelReader_tFileInputExcel_2.stopRead();
								break;
							}

							java.util.List<String> row_tFileInputExcel_2 = excelReader_tFileInputExcel_2
									.next();
							row3 = null;
							int tempRowLength_tFileInputExcel_2 = 52;

							int columnIndex_tFileInputExcel_2 = 0;

							String[] temp_row_tFileInputExcel_2 = new String[tempRowLength_tFileInputExcel_2];

							for (int i_tFileInputExcel_2 = 0; i_tFileInputExcel_2 < tempRowLength_tFileInputExcel_2; i_tFileInputExcel_2++) {
								int current_tFileInputExcel_2 = i_tFileInputExcel_2
										+ start_column_tFileInputExcel_2;
								if (current_tFileInputExcel_2 <= actual_end_column_tFileInputExcel_2) {
									if (current_tFileInputExcel_2 < row_tFileInputExcel_2
											.size()) {
										String column_tFileInputExcel_2 = row_tFileInputExcel_2
												.get(current_tFileInputExcel_2);
										if (column_tFileInputExcel_2 != null) {
											temp_row_tFileInputExcel_2[i_tFileInputExcel_2] = column_tFileInputExcel_2;
										} else {
											temp_row_tFileInputExcel_2[i_tFileInputExcel_2] = "";
										}
									} else {
										temp_row_tFileInputExcel_2[i_tFileInputExcel_2] = "";
									}
								} else {
									temp_row_tFileInputExcel_2[i_tFileInputExcel_2] = "";
								}
							}

							boolean whetherReject_tFileInputExcel_2 = false;
							row3 = new row3Struct();
							int curColNum_tFileInputExcel_2 = -1;
							String curColName_tFileInputExcel_2 = "";

							try {
								columnIndex_tFileInputExcel_2 = 0;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn";

									row3.newColumn = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 1;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn1";

									row3.newColumn1 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn1 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 2;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn2";

									row3.newColumn2 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn2 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 3;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn3";

									row3.newColumn3 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn3 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 4;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn4";

									row3.newColumn4 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn4 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 5;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn5";

									row3.newColumn5 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn5 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 6;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn6";

									row3.newColumn6 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn6 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 7;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn7";

									row3.newColumn7 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn7 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 8;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn8";

									row3.newColumn8 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn8 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 9;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn9";

									row3.newColumn9 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn9 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 10;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn10";

									row3.newColumn10 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn10 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 11;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "InvoiceLineNumber";

									row3.InvoiceLineNumber = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.InvoiceLineNumber = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 12;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "InvoiceNumber";

									row3.InvoiceNumber = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.InvoiceNumber = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 13;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "InvoiceDate";

									row3.InvoiceDate = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.InvoiceDate = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 14;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "ProductCode";

									row3.ProductCode = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.ProductCode = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 15;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn15";

									row3.newColumn15 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn15 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 16;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn16";

									row3.newColumn16 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn16 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 17;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn17";

									row3.newColumn17 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn17 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 18;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn18";

									row3.newColumn18 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn18 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 19;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn19";

									row3.newColumn19 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn19 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 20;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn20";

									row3.newColumn20 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn20 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 21;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn21";

									row3.newColumn21 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn21 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 22;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "Quantity";

									row3.Quantity = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.Quantity = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 23;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn23";

									row3.newColumn23 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn23 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 24;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn24";

									row3.newColumn24 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn24 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 25;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn25";

									row3.newColumn25 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn25 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 26;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn26";

									row3.newColumn26 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn26 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 27;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn27";

									row3.newColumn27 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn27 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 28;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn28";

									row3.newColumn28 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn28 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 29;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn29";

									row3.newColumn29 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn29 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 30;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn30";

									row3.newColumn30 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn30 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 31;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn31";

									row3.newColumn31 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn31 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 32;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn32";

									row3.newColumn32 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn32 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 33;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn33";

									row3.newColumn33 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn33 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 34;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn34";

									row3.newColumn34 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn34 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 35;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn35";

									row3.newColumn35 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn35 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 36;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn36";

									row3.newColumn36 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn36 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 37;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn37";

									row3.newColumn37 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn37 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 38;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn38";

									row3.newColumn38 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn38 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 39;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn39";

									row3.newColumn39 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn39 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 40;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn40";

									row3.newColumn40 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn40 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 41;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn41";

									row3.newColumn41 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn41 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 42;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn42";

									row3.newColumn42 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn42 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 43;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn43";

									row3.newColumn43 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn43 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 44;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn44";

									row3.newColumn44 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn44 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 45;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn45";

									row3.newColumn45 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn45 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 46;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn46";

									row3.newColumn46 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn46 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 47;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn47";

									row3.newColumn47 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn47 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 48;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn48";

									row3.newColumn48 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn48 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 49;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn49";

									row3.newColumn49 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn49 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 50;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn50";

									row3.newColumn50 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn50 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 51;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim().length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2
											+ 1;
									curColName_tFileInputExcel_2 = "newColumn51";

									row3.newColumn51 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
											.trim();
								} else {
									row3.newColumn51 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								nb_line_tFileInputExcel_2++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_2 = true;
								System.err.println(e.getMessage());
								row3 = null;
							}

							/**
							 * [tFileInputExcel_2 begin ] stop
							 */

							/**
							 * [tFileInputExcel_2 main ] start
							 */

							currentComponent = "tFileInputExcel_2";

							tos_count_tFileInputExcel_2++;

							/**
							 * [tFileInputExcel_2 main ] stop
							 */

							/**
							 * [tFileInputExcel_2 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_2";

							/**
							 * [tFileInputExcel_2 process_data_begin ] stop
							 */
							// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tFilterColumns_2 main ] start
								 */

								currentComponent = "tFilterColumns_2";

								// row3
								// row3

								if (execStat) {
									runStat.updateStatOnConnection("row3"
											+ iterateId, 1, 1);
								}

								row4.InvoiceLineNumber = row3.InvoiceLineNumber;

								row4.InvoiceNumber = row3.InvoiceNumber;

								row4.InvoiceDate = row3.InvoiceDate;

								row4.ProductCode = row3.ProductCode;

								row4.Quantity = row3.Quantity;

								nb_line_tFilterColumns_2++;

								tos_count_tFilterColumns_2++;

								/**
								 * [tFilterColumns_2 main ] stop
								 */

								/**
								 * [tFilterColumns_2 process_data_begin ] start
								 */

								currentComponent = "tFilterColumns_2";

								/**
								 * [tFilterColumns_2 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_2 main ] start
								 */

								currentComponent = "tFileOutputDelimited_2";

								// row4
								// row4

								if (execStat) {
									runStat.updateStatOnConnection("row4"
											+ iterateId, 1, 1);
								}

								StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
								if (row4.InvoiceLineNumber != null) {
									sb_tFileOutputDelimited_2
											.append(row4.InvoiceLineNumber);
								}
								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);
								if (row4.InvoiceNumber != null) {
									sb_tFileOutputDelimited_2
											.append(row4.InvoiceNumber);
								}
								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);
								if (row4.InvoiceDate != null) {
									sb_tFileOutputDelimited_2
											.append(row4.InvoiceDate);
								}
								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);
								if (row4.ProductCode != null) {
									sb_tFileOutputDelimited_2
											.append(row4.ProductCode);
								}
								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);
								if (row4.Quantity != null) {
									sb_tFileOutputDelimited_2
											.append(row4.Quantity);
								}
								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

								nb_line_tFileOutputDelimited_2++;
								resourceMap.put(
										"nb_line_tFileOutputDelimited_2",
										nb_line_tFileOutputDelimited_2);

								outtFileOutputDelimited_2
										.write(sb_tFileOutputDelimited_2
												.toString());

								tos_count_tFileOutputDelimited_2++;

								/**
								 * [tFileOutputDelimited_2 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_2 process_data_begin ]
								 * start
								 */

								currentComponent = "tFileOutputDelimited_2";

								/**
								 * [tFileOutputDelimited_2 process_data_begin ]
								 * stop
								 */

								/**
								 * [tFileOutputDelimited_2 process_data_end ]
								 * start
								 */

								currentComponent = "tFileOutputDelimited_2";

								/**
								 * [tFileOutputDelimited_2 process_data_end ]
								 * stop
								 */

								/**
								 * [tFilterColumns_2 process_data_end ] start
								 */

								currentComponent = "tFilterColumns_2";

								/**
								 * [tFilterColumns_2 process_data_end ] stop
								 */

							} // End of branch "row3"

							/**
							 * [tFileInputExcel_2 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_2";

							/**
							 * [tFileInputExcel_2 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_2 end ] start
							 */

							currentComponent = "tFileInputExcel_2";

						}

						try {
							if (excelReader_tFileInputExcel_2 != null) {
								excelReader_tFileInputExcel_2.handleException();
							}
						} catch (java.lang.Exception e_tFileInputExcel_2) {
							if (!(e_tFileInputExcel_2.getCause() instanceof com.talend.excel.xssf.event.EnoughDataException)) {

								System.err.println(e_tFileInputExcel_2
										.getMessage());

							}
						}

						globalMap.put("tFileInputExcel_2_NB_LINE",
								nb_line_tFileInputExcel_2);

					} finally {

					}

					ok_Hash.put("tFileInputExcel_2", true);
					end_Hash.put("tFileInputExcel_2",
							System.currentTimeMillis());

					/**
					 * [tFileInputExcel_2 end ] stop
					 */

					/**
					 * [tFilterColumns_2 end ] start
					 */

					currentComponent = "tFilterColumns_2";

					globalMap.put("tFilterColumns_2_NB_LINE",
							nb_line_tFilterColumns_2);
					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null
								|| !((Boolean) resourceMap
										.get("inIterateVComp"))) {
							runStat.updateStatOnConnection("row3" + iterateId,
									2, 0);
						}
					}

					ok_Hash.put("tFilterColumns_2", true);
					end_Hash.put("tFilterColumns_2", System.currentTimeMillis());

					/**
					 * [tFilterColumns_2 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 end ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

					globalMap.put("tFileOutputDelimited_2_NB_LINE",
							nb_line_tFileOutputDelimited_2);
					globalMap.put("tFileOutputDelimited_2_FILE_NAME",
							fileName_tFileOutputDelimited_2);

					resourceMap.put("finish_tFileOutputDelimited_2", true);

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null
								|| !((Boolean) resourceMap
										.get("inIterateVComp"))) {
							runStat.updateStatOnConnection("row4" + iterateId,
									2, 0);
						}
					}

					ok_Hash.put("tFileOutputDelimited_2", true);
					end_Hash.put("tFileOutputDelimited_2",
							System.currentTimeMillis());

					/**
					 * [tFileOutputDelimited_2 end ] stop
					 */

					if (execStat) {
						runStat.updateStatOnConnection("iterate2", 2, "exec"
								+ NB_ITERATE_tFileInputExcel_2);
					}

					/**
					 * [tFileList_2 process_data_end ] start
					 */

					currentComponent = "tFileList_2";

					/**
					 * [tFileList_2 process_data_end ] stop
					 */

					/**
					 * [tFileList_2 end ] start
					 */

					currentComponent = "tFileList_2";

				}
				globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);

				ok_Hash.put("tFileList_2", true);
				end_Hash.put("tFileList_2", System.currentTimeMillis());

				/**
				 * [tFileList_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileList_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileList_2 finally ] start
				 */

				currentComponent = "tFileList_2";

				/**
				 * [tFileList_2 finally ] stop
				 */

				/**
				 * [tFileInputExcel_2 finally ] start
				 */

				currentComponent = "tFileInputExcel_2";

				/**
				 * [tFileInputExcel_2 finally ] stop
				 */

				/**
				 * [tFilterColumns_2 finally ] start
				 */

				currentComponent = "tFilterColumns_2";

				/**
				 * [tFilterColumns_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileList_2_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[0];
		static byte[] commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[0];

		public String InvoiceNumber;

		public String getInvoiceNumber() {
			return this.InvoiceNumber;
		}

		public String InvoiceLineNumber;

		public String getInvoiceLineNumber() {
			return this.InvoiceLineNumber;
		}

		public String InvoiceDate;

		public String getInvoiceDate() {
			return this.InvoiceDate;
		}

		public String ProductCode;

		public String getProductCode() {
			return this.ProductCode;
		}

		public String Quantity;

		public String getQuantity() {
			return this.Quantity;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE.length == 0) {
						commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_BUILD_RAW_DATA_FROM_FILE) {

				try {

					int length = 0;

					this.InvoiceNumber = readString(dis);

					this.InvoiceLineNumber = readString(dis);

					this.InvoiceDate = readString(dis);

					this.ProductCode = readString(dis);

					this.Quantity = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.InvoiceNumber, dos);

				// String

				writeString(this.InvoiceLineNumber, dos);

				// String

				writeString(this.InvoiceDate, dos);

				// String

				writeString(this.ProductCode, dos);

				// String

				writeString(this.Quantity, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("InvoiceNumber=" + InvoiceNumber);
			sb.append(",InvoiceLineNumber=" + InvoiceLineNumber);
			sb.append(",InvoiceDate=" + InvoiceDate);
			sb.append(",ProductCode=" + ProductCode);
			sb.append(",Quantity=" + Quantity);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[0];
		static byte[] commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[0];

		public String InvoiceLineNumber;

		public String getInvoiceLineNumber() {
			return this.InvoiceLineNumber;
		}

		public String InvoiceNumber;

		public String getInvoiceNumber() {
			return this.InvoiceNumber;
		}

		public String InvoiceDate;

		public String getInvoiceDate() {
			return this.InvoiceDate;
		}

		public String ProductCode;

		public String getProductCode() {
			return this.ProductCode;
		}

		public String Quantity;

		public String getQuantity() {
			return this.Quantity;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE.length == 0) {
						commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_BUILD_RAW_DATA_FROM_FILE) {

				try {

					int length = 0;

					this.InvoiceLineNumber = readString(dis);

					this.InvoiceNumber = readString(dis);

					this.InvoiceDate = readString(dis);

					this.ProductCode = readString(dis);

					this.Quantity = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.InvoiceLineNumber, dos);

				// String

				writeString(this.InvoiceNumber, dos);

				// String

				writeString(this.InvoiceDate, dos);

				// String

				writeString(this.ProductCode, dos);

				// String

				writeString(this.Quantity, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("InvoiceLineNumber=" + InvoiceLineNumber);
			sb.append(",InvoiceNumber=" + InvoiceNumber);
			sb.append(",InvoiceDate=" + InvoiceDate);
			sb.append(",ProductCode=" + ProductCode);
			sb.append(",Quantity=" + Quantity);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_1 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
		final static byte[] commonByteArrayLock_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[0];
		static byte[] commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[0];

		public String InvoiceLineNumber;

		public String getInvoiceLineNumber() {
			return this.InvoiceLineNumber;
		}

		public String InvoiceNumber;

		public String getInvoiceNumber() {
			return this.InvoiceNumber;
		}

		public String InvoiceDate;

		public String getInvoiceDate() {
			return this.InvoiceDate;
		}

		public String ProductCode;

		public String getProductCode() {
			return this.ProductCode;
		}

		public String Quantity;

		public String getQuantity() {
			return this.Quantity;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE.length == 0) {
						commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_BUILD_RAW_DATA_FROM_FILE) {

				try {

					int length = 0;

					this.InvoiceLineNumber = readString(dis);

					this.InvoiceNumber = readString(dis);

					this.InvoiceDate = readString(dis);

					this.ProductCode = readString(dis);

					this.Quantity = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.InvoiceLineNumber, dos);

				// String

				writeString(this.InvoiceNumber, dos);

				// String

				writeString(this.InvoiceDate, dos);

				// String

				writeString(this.ProductCode, dos);

				// String

				writeString(this.Quantity, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("InvoiceLineNumber=" + InvoiceLineNumber);
			sb.append(",InvoiceNumber=" + InvoiceNumber);
			sb.append(",InvoiceDate=" + InvoiceDate);
			sb.append(",ProductCode=" + ProductCode);
			sb.append(",Quantity=" + Quantity);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[0];
		static byte[] commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[0];

		public String InvoiceLineNumber;

		public String getInvoiceLineNumber() {
			return this.InvoiceLineNumber;
		}

		public String InvoiceNumber;

		public String getInvoiceNumber() {
			return this.InvoiceNumber;
		}

		public String InvoiceDate;

		public String getInvoiceDate() {
			return this.InvoiceDate;
		}

		public String ProductCode;

		public String getProductCode() {
			return this.ProductCode;
		}

		public String Quantity;

		public String getQuantity() {
			return this.Quantity;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE.length) {
					if (length < 1024
							&& commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE.length == 0) {
						commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[1024];
					} else {
						commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE,
						0, length);
				strReturn = new String(
						commonByteArray_DEEPSEA_BUILD_RAW_DATA_FROM_FILE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEEPSEA_BUILD_RAW_DATA_FROM_FILE) {

				try {

					int length = 0;

					this.InvoiceLineNumber = readString(dis);

					this.InvoiceNumber = readString(dis);

					this.InvoiceDate = readString(dis);

					this.ProductCode = readString(dis);

					this.Quantity = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.InvoiceLineNumber, dos);

				// String

				writeString(this.InvoiceNumber, dos);

				// String

				writeString(this.InvoiceDate, dos);

				// String

				writeString(this.ProductCode, dos);

				// String

				writeString(this.Quantity, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("InvoiceLineNumber=" + InvoiceLineNumber);
			sb.append(",InvoiceNumber=" + InvoiceNumber);
			sb.append(",InvoiceDate=" + InvoiceDate);
			sb.append(",ProductCode=" + ProductCode);
			sb.append(",Quantity=" + Quantity);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				row6Struct row6 = new row6Struct();
				row7Struct row7 = new row7Struct();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGOUT", false);
				start_Hash.put("tAggregateRow_1_AGGOUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tAggregateRow_1_AGGOUT = 0;

				class BytesLimit65535_tAggregateRow_1_AGGOUT {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAggregateRow_1_AGGOUT().limitLog4jByte();

				// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap();

				// ------------
				class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String InvoiceLineNumber;
					String InvoiceNumber;
					String InvoiceDate;
					String ProductCode;
					String Quantity;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.InvoiceLineNumber == null) ? 0
											: this.InvoiceLineNumber.hashCode());

							result = prime
									* result
									+ ((this.InvoiceNumber == null) ? 0
											: this.InvoiceNumber.hashCode());

							result = prime
									* result
									+ ((this.InvoiceDate == null) ? 0
											: this.InvoiceDate.hashCode());

							result = prime
									* result
									+ ((this.ProductCode == null) ? 0
											: this.ProductCode.hashCode());

							result = prime
									* result
									+ ((this.Quantity == null) ? 0
											: this.Quantity.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;

						if (this.InvoiceLineNumber == null) {
							if (other.InvoiceLineNumber != null)
								return false;
						} else if (!this.InvoiceLineNumber
								.equals(other.InvoiceLineNumber))
							return false;

						if (this.InvoiceNumber == null) {
							if (other.InvoiceNumber != null)
								return false;
						} else if (!this.InvoiceNumber
								.equals(other.InvoiceNumber))
							return false;

						if (this.InvoiceDate == null) {
							if (other.InvoiceDate != null)
								return false;
						} else if (!this.InvoiceDate.equals(other.InvoiceDate))
							return false;

						if (this.ProductCode == null) {
							if (other.ProductCode != null)
								return false;
						} else if (!this.ProductCode.equals(other.ProductCode))
							return false;

						if (this.Quantity == null) {
							if (other.Quantity != null)
								return false;
						} else if (!this.Quantity.equals(other.Quantity))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
				AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
				java.util.Map<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1>();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				class BytesLimit65535_tFileInputDelimited_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = "C:/Users/RRU_CN1/Desktop/Daily Sales 10-2017 to 3-2018.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/RRU_CN1/Desktop/Daily Sales 10-2017 to 3-2018.csv",
								"ISO-8859-15", ",", "\n", true, 1, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row5 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row5 = new row5Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row5.InvoiceLineNumber = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row5.InvoiceNumber = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row5.InvoiceDate = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row5.ProductCode = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row5.Quantity = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row5 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
						// Start of branch "row5"
						if (row5 != null) {

							/**
							 * [tAggregateRow_1_AGGOUT main ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							// row5
							// row5

							if (execStat) {
								runStat.updateStatOnConnection("row5"
										+ iterateId, 1, 1);
							}

							operation_finder_tAggregateRow_1.InvoiceLineNumber = row5.InvoiceLineNumber;
							operation_finder_tAggregateRow_1.InvoiceNumber = row5.InvoiceNumber;
							operation_finder_tAggregateRow_1.InvoiceDate = row5.InvoiceDate;
							operation_finder_tAggregateRow_1.ProductCode = row5.ProductCode;
							operation_finder_tAggregateRow_1.Quantity = row5.Quantity;

							operation_finder_tAggregateRow_1.hashCodeDirty = true;

							operation_result_tAggregateRow_1 = hash_tAggregateRow_1
									.get(operation_finder_tAggregateRow_1);

							if (operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

								operation_result_tAggregateRow_1.InvoiceLineNumber = operation_finder_tAggregateRow_1.InvoiceLineNumber;
								operation_result_tAggregateRow_1.InvoiceNumber = operation_finder_tAggregateRow_1.InvoiceNumber;
								operation_result_tAggregateRow_1.InvoiceDate = operation_finder_tAggregateRow_1.InvoiceDate;
								operation_result_tAggregateRow_1.ProductCode = operation_finder_tAggregateRow_1.ProductCode;
								operation_result_tAggregateRow_1.Quantity = operation_finder_tAggregateRow_1.Quantity;

								hash_tAggregateRow_1.put(
										operation_result_tAggregateRow_1,
										operation_result_tAggregateRow_1);

							} // G_OutMain_AggR_001

							tos_count_tAggregateRow_1_AGGOUT++;

							/**
							 * [tAggregateRow_1_AGGOUT main ] stop
							 */

							/**
							 * [tAggregateRow_1_AGGOUT process_data_begin ]
							 * start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							/**
							 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
							 */

							/**
							 * [tAggregateRow_1_AGGOUT process_data_end ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							/**
							 * [tAggregateRow_1_AGGOUT process_data_end ] stop
							 */

						} // End of branch "row5"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/Users/RRU_CN1/Desktop/Daily Sales 10-2017 to 3-2018.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAggregateRow_1_AGGOUT", true);
				end_Hash.put("tAggregateRow_1_AGGOUT",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputDelimited_3 = 0;

				class BytesLimit65535_tFileOutputDelimited_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputDelimited_3().limitLog4jByte();

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						"C:/Users/RRU_CN1/Desktop/Daily Sales 10-2017 to 3-2018.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
							.substring(0, fileName_tFileOutputDelimited_3
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /**
				 * Start field
				 * tFileOutputDelimited_3:FIELDSEPARATOR
				 */
				","/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
				 * Start
				 * field tFileOutputDelimited_3:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null
						&& directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
							directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				if (fileToDelete_tFileOutputDelimited_3.exists()) {
					fileToDelete_tFileOutputDelimited_3.delete();
				}
				outtFileOutputDelimited_3 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_3, false),
								"UTF-8"));
				if (filetFileOutputDelimited_3.length() == 0) {
					outtFileOutputDelimited_3.write("InvoiceNumber");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("InvoiceLineNumber");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("InvoiceDate");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("ProductCode");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Quantity");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_3",
						outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3",
						nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tFilterColumns_3 begin ] start
				 */

				ok_Hash.put("tFilterColumns_3", false);
				start_Hash.put("tFilterColumns_3", System.currentTimeMillis());

				currentComponent = "tFilterColumns_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tFilterColumns_3 = 0;

				class BytesLimit65535_tFilterColumns_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFilterColumns_3().limitLog4jByte();

				int nb_line_tFilterColumns_3 = 0;

				/**
				 * [tFilterColumns_3 begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGIN", false);
				start_Hash.put("tAggregateRow_1_AGGIN",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				int tos_count_tAggregateRow_1_AGGIN = 0;

				class BytesLimit65535_tAggregateRow_1_AGGIN {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAggregateRow_1_AGGIN().limitLog4jByte();

				java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1
						.values();

				globalMap.put("tAggregateRow_1_NB_LINE",
						values_tAggregateRow_1.size());

				for (AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600

					/**
					 * [tAggregateRow_1_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					row6.InvoiceLineNumber = aggregated_row_tAggregateRow_1.InvoiceLineNumber;

					row6.InvoiceNumber = aggregated_row_tAggregateRow_1.InvoiceNumber;

					row6.InvoiceDate = aggregated_row_tAggregateRow_1.InvoiceDate;

					row6.ProductCode = aggregated_row_tAggregateRow_1.ProductCode;

					row6.Quantity = aggregated_row_tAggregateRow_1.Quantity;

					tos_count_tAggregateRow_1_AGGIN++;

					/**
					 * [tAggregateRow_1_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tFilterColumns_3 main ] start
					 */

					currentComponent = "tFilterColumns_3";

					// row6
					// row6

					if (execStat) {
						runStat.updateStatOnConnection("row6" + iterateId, 1, 1);
					}

					row7.InvoiceNumber = row6.InvoiceNumber;

					row7.InvoiceLineNumber = row6.InvoiceLineNumber;

					row7.InvoiceDate = row6.InvoiceDate;

					row7.ProductCode = row6.ProductCode;

					row7.Quantity = row6.Quantity;

					nb_line_tFilterColumns_3++;

					tos_count_tFilterColumns_3++;

					/**
					 * [tFilterColumns_3 main ] stop
					 */

					/**
					 * [tFilterColumns_3 process_data_begin ] start
					 */

					currentComponent = "tFilterColumns_3";

					/**
					 * [tFilterColumns_3 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_3 main ] start
					 */

					currentComponent = "tFileOutputDelimited_3";

					// row7
					// row7

					if (execStat) {
						runStat.updateStatOnConnection("row7" + iterateId, 1, 1);
					}

					StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
					if (row7.InvoiceNumber != null) {
						sb_tFileOutputDelimited_3.append(row7.InvoiceNumber);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row7.InvoiceLineNumber != null) {
						sb_tFileOutputDelimited_3
								.append(row7.InvoiceLineNumber);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row7.InvoiceDate != null) {
						sb_tFileOutputDelimited_3.append(row7.InvoiceDate);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row7.ProductCode != null) {
						sb_tFileOutputDelimited_3.append(row7.ProductCode);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row7.Quantity != null) {
						sb_tFileOutputDelimited_3.append(row7.Quantity);
					}
					sb_tFileOutputDelimited_3
							.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

					nb_line_tFileOutputDelimited_3++;
					resourceMap.put("nb_line_tFileOutputDelimited_3",
							nb_line_tFileOutputDelimited_3);

					outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3
							.toString());

					tos_count_tFileOutputDelimited_3++;

					/**
					 * [tFileOutputDelimited_3 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_3 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_3";

					/**
					 * [tFileOutputDelimited_3 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_3 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_3";

					/**
					 * [tFileOutputDelimited_3 process_data_end ] stop
					 */

					/**
					 * [tFilterColumns_3 process_data_end ] start
					 */

					currentComponent = "tFilterColumns_3";

					/**
					 * [tFilterColumns_3 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_1_AGGIN", true);
				end_Hash.put("tAggregateRow_1_AGGIN",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGIN end ] stop
				 */

				/**
				 * [tFilterColumns_3 end ] start
				 */

				currentComponent = "tFilterColumns_3";

				globalMap.put("tFilterColumns_3_NB_LINE",
						nb_line_tFilterColumns_3);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFilterColumns_3", true);
				end_Hash.put("tFilterColumns_3", System.currentTimeMillis());

				/**
				 * [tFilterColumns_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE",
						nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_1_AGGIN"
			globalMap.remove("tAggregateRow_1");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				/**
				 * [tAggregateRow_1_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				/**
				 * [tAggregateRow_1_AGGIN finally ] stop
				 */

				/**
				 * [tFilterColumns_3 finally ] start
				 */

				currentComponent = "tFilterColumns_3";

				/**
				 * [tFilterColumns_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final BUILD_RAW_DATA_FROM_FILE BUILD_RAW_DATA_FROM_FILEClass = new BUILD_RAW_DATA_FROM_FILE();

		int exitCode = BUILD_RAW_DATA_FROM_FILEClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = BUILD_RAW_DATA_FROM_FILE.class
					.getClassLoader().getResourceAsStream(
							"deepsea/build_raw_data_from_file_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = BUILD_RAW_DATA_FROM_FILE.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileDelete_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileDelete_1) {
			globalMap.put("tFileDelete_1_SUBPROCESS_STATE", -1);

			e_tFileDelete_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : BUILD_RAW_DATA_FROM_FILE");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 225796 characters generated by Talend Open Studio for Big Data on the 15
 * November, 2018 3:15:05 PM ICT
 ************************************************************************************************/
