package routines;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class Ukraine {

	/**
     * guessDateFormat: parse a date string return a date.
     * 
     * 
     * {talendTypes} Date
     * 
     * {Category} User Defined
     * 
     * {param} string("date") stringDate: The string need to be converted.
     * 
     * {example} guessDateFormat("12-19") # 01-12-2019.
     */
    public static java.util.Date guessDate(String stringDate) {
    	return Ukraine.guessDate(stringDate, stringDate);
    }
    
    /**
     * guessDateFormat: parse a date string return a date.
     * 
     * 
     * {talendTypes} Date
     * 
     * {Category} User Defined
     * 
     * {param} string("date") stringDate: The string need to be converted.
     * {param} string("date") defautlDate: The default to convert if stringDate is null or empty.
     * 
     * {example} guessDateFormat("12-19", "12-19") # 01-12-2019.
     */
    public static java.util.Date guessDate(String stringDate, String defautlDate) {
    	if (Clean.isNullOrEmpty(stringDate)) {
    		stringDate = defautlDate;
    	}
    	
    	if (TalendDate.isDate(stringDate, "yyyyMM")) {
    		return TalendDate.parseDate("yyyyMM", stringDate);
    	} else if (TalendDate.isDate(stringDate, "yyyyMMdd")) {
    		return TalendDate.parseDate("yyyyMMdd", stringDate);
    	} else if (TalendDate.isDate(stringDate, "MM-yy")) {
    		return TalendDate.parseDate("MM-yy", stringDate);
    	} else if (TalendDate.isDate(stringDate, "dd/MM/yyyy")) {
    		return TalendDate.parseDate("dd/MM/yyyy", stringDate);
    	} else if (TalendDate.isDate(stringDate, "dd.MM.yyyy")) {
    		return TalendDate.parseDate("dd.MM.yyyy", stringDate);
    	}  else if (TalendDate.isDate(stringDate, "yyyy-MM-dd")) {
    		return TalendDate.parseDate("yyyy-MM-dd", stringDate);
    	} else {
    		throw new RuntimeException("Can't parse the date: " + stringDate);
    	}
    }
    
    /**
     * filter: check if some key of a given JSON object contains some value.
     * 
     * 
     * {talendTypes} boolean
     * 
     * {Category} User Defined
     * 
     * {param} string("context") context: The JSON object.
     * {param} string("key") key: The key.
     * {param} string("value") value: The value to check.
     * 
     * {example} filter(context, "hashes", "123") # true.
     */
    public static boolean filter(org.json.JSONObject context, String key, String value) {
    	if (context == null || context.optString(key) == null) {
    		return true;
    	} else {
    		java.util.List<String> values = java.util.Arrays.asList(context.getString(key).split(","));
    		return !values.contains(value);
    	}
    }
}
