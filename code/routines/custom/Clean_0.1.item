package routines;

import java.text.ParseException;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class Clean
{	
	/**
     * cleanString: Returns true if not null or empty, otherwise returns false.
     * 
     * {talendTypes} boolean | Boolean
     * 
     * {Category} User Defined
     * 
     * {param} String("s") input: the string to clean
     * 
     * {example} cleanString("") # true
     */
	public static boolean isNullOrEmpty(String s) {
		return s == null || s.trim().equals("");
	}
	
	/**
     * cleanString: Returns a given string if not null or empty, otherwise returns null.
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} String("s") input: the string to clean
     * 
     * {example} cleanString("") # null
     */
	public static String cleanString(String s) {
		if(Clean.isNullOrEmpty(s)) {
			return null;
		}

		return s;
	}
	
	/**
     * cleanString: Returns a given string if not null or empty, otherwise returns  a given
     * default string.
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} String("s") input: the string to clean
     * {param} String("d") input: the default string
     * 
     * {example} cleanString("", "none") # "none"
     */
	public static String cleanString(String s, String d) {
		if(Clean.isNullOrEmpty(s)) {
			return cleanString(d);
		}

		return s;
	}
	
	/**
     * cleanNumber: Cleans a given string representing a number, removing comma, 
     * converting parenthesis as a negative, otherwise returns null.
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} String("number") input: the string to clean
     * 
     * {example} cleanString("6,720.00") # "6720.00"
     */
	public static String cleanNumber(String number) {
		return Clean.cleanNumber(number, null);
	}
	
	/**
     * cleanNumber: Cleans a given string representing a number, removing comma, 
     * converting parenthesis as a negative, otherwise returns a default value.
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} String("number") input: the string to clean
     * {param} String("defaultValue") input: the default value
     * 
     * {example} cleanString("6,720.00", "0.00") # "6720.00"
     */
	public static String cleanNumber(String number, String defaultValue) {
		if(Clean.isNullOrEmpty(number)) {
			return defaultValue;
		}
		
		// Case when number is in scientific notation
		
		if(number.contains("e") || number.contains("E")) {
			number = new java.math.BigDecimal(number).toString();
		}
		
		number = number.replaceAll("\\(", "-"); // Replace (000) by -000
		number = number.replaceAll(",|\\)", ""); // Removed format characters
		number = number.replaceAll("-+", "-"); // Removed duplicated minus characters
		return number;
	}
	
	/**
     * cleanDateYearMonth: Cleans a given string representing a date and converting to "yyyy-MM-dd" format,
     * otherwise returns a default date.
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} String("dateYear") date: the year string to clean
     * {param} String("dateMonth") defaultDate: the month string to clean
     * {param} String("defaultDate") defaultDate: the default date
     * 
     * {example} cleanDate("1975/06/12", "1975-06-01", "yy/MM/dd") # "1975-06-12"
     */
	public static String cleanDateYearMonth(String dateYear, String dateMonth, String defaultDate) {
		if(Clean.isNullOrEmpty(dateYear) || Clean.isNullOrEmpty(dateMonth)) {
			return defaultDate;
		}
		return String.format("%04d-%02d-01", Integer.parseInt(dateYear), Integer.parseInt(dateMonth));
	}
	
	/**
     * cleanDate: Cleans a given string representing a date and converting to "yyyy-MM-dd" format,
     * otherwise returns a default date.
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} String("date") date: the string to clean
     * 
     * {example} cleanDate("1975/06/12") # "1975-06-12"
     */
	public static String cleanDate(String date) {
		return Clean.cleanDate(date, null, null);
	}
	
	/**
     * cleanDate: Cleans a given string representing a date and converting to "yyyy-MM-dd" format,
     * otherwise returns a default date.
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} String("date") date: the string to clean
     * {param} String("defaultDate") defaultDate: the default date
     * 
     * {example} cleanDate("1975/06/12", "1975-06-01") # "1975-06-12"
     */
	public static String cleanDate(String date, String defaultDate) {
		return Clean.cleanDate(date, defaultDate, null);
	}
	
	/**
     * cleanDate: Cleans a given string representing a date and converting to "yyyy-MM-dd" format,
     * otherwise returns a default date.
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} String("date") date: the string to clean
     * {param} String("defaultDate") defaultDate: the default date
     * {param} String("defaultFormat") defaultFormat: the default format
     * 
     * {example} cleanDate("1975/06/12", "1975-06-01", "yy/MM/dd") # "1975-06-12"
     */
	public static String cleanDate(String date, String defaultDate, String defaultFormat) {
		if(Clean.isNullOrEmpty(date)) {
			return defaultDate;
		}
		
		// If a defaultFormat is supplied, try several format based ont it
		
		if (!Clean.isNullOrEmpty(defaultFormat)) {
			// dd-MM-yy or yy-MM-dd and derivates
			Date dateAsDate = Clean.tryParseDate(defaultFormat, date);
			if (dateAsDate == null) {
				// dd-MM-yyyy and derivates
				dateAsDate = Clean.tryParseDate(defaultFormat + "yy", date);
			}
			if (dateAsDate == null) {
				// yyyy-MM-dd and derivates
				dateAsDate = Clean.tryParseDate("yy" + defaultFormat, date);
			}
			if (dateAsDate != null) {
				return TalendDate.formatDate("yyyy-MM-dd", dateAsDate);
			}
			else {
				return defaultDate;
			}
		}
		
		// Otherwise, loop through patterns and formats 
		
		Calendar defaultDateAsCalendar = null;
		if (!Clean.isNullOrEmpty(defaultDate)) {
			defaultDateAsCalendar = Calendar.getInstance();
			defaultDateAsCalendar.setTime(TalendDate.parseDate("yyyy-MM-dd", defaultDate));
		}

		// We do not expect sales before 2000 and after next year !
		
		int minYear = 2000;
		int maxYear = Calendar.getInstance().get(Calendar.YEAR) + 1;
		
		String foundMatchingDate = defaultDate;
		
		for(DateMatcher dateMatcher: Clean.getDateMatchers()) {
			if (dateMatcher.match(date)) {
				for(String format: dateMatcher.getFormats()) {
					Date dateAsDate = Clean.tryParseDate(format, date);
					if (dateAsDate == null) {
						continue;
					}
					
					Calendar dateAsCalendar = Calendar.getInstance();
					dateAsCalendar.setTime(dateAsDate);

					if(dateAsCalendar.get(Calendar.YEAR) < minYear || dateAsCalendar.get(Calendar.YEAR) > maxYear) {
						continue;
					}
						
					if (defaultDateAsCalendar == null) {
						foundMatchingDate = TalendDate.formatDate("yyyy-MM-dd", dateAsDate);
						break;
					}
					
					if(defaultDateAsCalendar.get(Calendar.YEAR) == dateAsCalendar.get(Calendar.YEAR)
							&& defaultDateAsCalendar.get(Calendar.MONTH) == dateAsCalendar.get(Calendar.MONTH)) {
						foundMatchingDate = TalendDate.formatDate("yyyy-MM-dd", dateAsCalendar.getTime());
						break;
					}
				}
				
				if (foundMatchingDate != defaultDate) {
					break;
				}
			}
		}
		
		return foundMatchingDate;
	}

	/**
     * cleanFilename: Returns a given file name without extension, otherwise null if the string
     * is null or empty.
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} String("filename") input: the file name
     * 
     * {example} cleanFilename("data.csv") # "data"
     */
	public static String cleanFilename(String filename) {
		if(Clean.isNullOrEmpty(filename)) {
			return null;
		}
		
		filename = filename.replaceAll("\\(.*\\)", ""); // Remove parts in parenthesis 
		filename = filename.replaceAll("\\..+$", ""); // Remove extensions
		
		return filename;
	}
	
	/**
     * codifyString: Build a code from a string value.
     * 
     * {talendTypes} boolean | Boolean
     * 
     * {Category} User Defined
     *
     * {param} String("prefix") input: a prefix to prepend to the code
     * {param} String("s") input: the string to clean
     * 
     * {example} codifyString("Diamicron MR", "PRODUCT") # "PRODUCT_DIAMICRON_MR"
     */
	public static String codifyString(String prefix, String s) {
		if(Clean.isNullOrEmpty(s)) {
			return null;
		}
		
		s = s.trim().toUpperCase();
		s = s.replaceAll(" \\+\\.\\/", "_");
		return prefix + "_" + s;
	}
	
	/**
     * Hamming: return the Hamming similarity of 2 strings
     * 
     * {talendTypes} string | String
     * 
     * {Category} User Defined
     * 
     * {param} String("s1") input: a string
     * {param} String("s2") input: a string
     * 
     * {example} Hamming("hello", "hello") # 1
     */
	public static float Hamming(String s, String t) {
        if(s.length() != t.length()) {
            return 0.0f;
        }

        if (s.length() == 0) {
            return 0.0f;
        }

        int n = 0;
        for(int i = 0; i < s.length(); i++) {
            if(s.charAt(i) == t.charAt(i)) {
                n++;
            }
        }
        return (float) Math.exp(n) / (float) Math.exp(s.length());
    }
    
	/**
     * JaroWinkler: return the JaroWinkler similarity of 2 strings
     * 
     * {talendTypes} string | String
     * 
     * {Category} User Defined
     * 
     * {param} String("s1") input: a string
     * {param} String("s2") input: a string
     * 
     * {example} JaroWinkler("hello", "hello") # 1
     */
    public static float JaroWinkler(String s, String t) {
        int s_len = s.length();
        int t_len = t.length();

        if (s_len == 0 && t_len == 0) {
            return 1.0f;
        }

        int match_distance = Integer.max(s_len, t_len) / 2 - 1;

        boolean[] s_matches = new boolean[s_len];
        boolean[] t_matches = new boolean[t_len];

        int matches = 0;
        int transpositions = 0;

        for (int i = 0; i < s_len; i++) {
            int start = Integer.max(0, i - match_distance);
            int end = Integer.min(i + match_distance + 1, t_len);

            for (int j = start; j < end; j++) {
                if (t_matches[j])
                    continue;
                if (s.charAt(i) != t.charAt(j))
                    continue;
                s_matches[i] = true;
                t_matches[j] = true;
                matches++;
                break;
            }
        }

        if (matches == 0)
            return 0;

        int k = 0;
        for (int i = 0; i < s_len; i++) {
            if (!s_matches[i])
                continue;
            while (!t_matches[k])
                k++;
            if (s.charAt(i) != t.charAt(k))
                transpositions++;
            k++;
        }

        return ((((float) matches / (float) s_len) + ((float) matches / (float) t_len)
                + (((float) matches - (float) transpositions / 2.0f) / (float) matches)) / 3.0f);
    }

    /**
     * Jaccard: return the Jaccard similarity of 2 strings
     * 
     * {talendTypes} string | String
     * 
     * {Category} User Defined
     * 
     * {param} String("s1") input: a string
     * {param} String("s2") input: a string
     * 
     * {example} Jaccard("hello", "hello") # 1
     */
    public static float Jaccard(String s1, String s2) {
        return Float.valueOf(Clean.intersect(s1, s2).length())
                / Float.valueOf(Clean.union(s1, s2).length());
    }

    /*
	 * Helper function to calculate the union of 2 strings
	 */
    private static String union(String s1, String s2) {
        String result = "";

        for (char c : s1.toCharArray()) {
            if (!result.contains(String.valueOf(c))) {
                result += c;
            }
        }

        for (char c : s2.toCharArray()) {
            if (!result.contains(String.valueOf(c))) {
                result += c;
            }
        }

        return result;
    }

    /*
	 * Helper function to calculate the intersection of 2 strings
	 */
    private static String intersect(String s1, String s2) {
        String result = "";

        for (char c : s1.toCharArray()) {
            if (!result.contains(String.valueOf(c)) && s2.contains(String.valueOf(c))) {
                result += c;
            }
        }

        return result;
    }
	
	private static List<DateMatcher> getDateMatchers() {
		if (dateMatchers == null) {
			Clean me = new Clean();
			dateMatchers = Arrays.asList(
				// yyyyMMdd and derivates
				me.new DateMatcher("^\\d{8}$", "yyyyMMdd", "yyyyddMM", "ddMMyyyy", "MMddyyyy"),
				me.new DateMatcher("^\\d{6}$", "yyyyMM", "MMyyyy"),
				me.new DateMatcher("^\\d{4}$", "yyMM", "MMyy"),
				// yyyy-MM-dd and derivates
				me.new DateMatcher("^\\d{1,4}-\\d{1,2}-\\d{1,4}$", "yyyy-MM-dd", "yyyy-dd-MM", "dd-MM-yyyy", "MM-dd-yyyy", "yyyy-M-d", "yyyy-d-M", "d-M-yyyy", "M-d-yyyy", "yy-MM-dd", "yy-dd-MM", "dd-MM-yy", "MM-dd-yy", "yy-M-d", "yy-d-M", "d-M-yy", "M-d-yy"),
				// yyyy-MM and derivates
				me.new DateMatcher("^\\d{1,4}-\\d{1,4}$", "yyyy-MM", "yyyy-M", "yy-MM", "yy-M", "MM-yyyy", "M-yyyy", "yy-MM", "yy-M"),
				// yyyy-MM-dd and derivates
				me.new DateMatcher("^\\d{1,4}/\\d{1,2}/\\d{1,4}$", "yyyy/MM/dd", "yyyy/dd/MM", "dd/MM/yyyy", "MM/dd/yyyy", "yyyy/M/d", "yyyy/d/M", "d/M/yyyy", "M/d/yyyy", "yy/MM/dd", "yy/dd/MM", "dd/MM/yy", "MM/dd/yy", "yy/M/d", "yy/d/M", "d/M/yy", "M/d/yy"),
				// yyyy-MM and derivates
				me.new DateMatcher("^\\d{1,4}/\\d{1,4}$", "yyyy/MM", "yyyy/M", "yy/MM", "yy/M", "MM/yyyy", "M/yyyy", "yy/MM", "yy/M")
			);
		}
		return dateMatchers;
	}

	private class DateMatcher {	
		public DateMatcher(String pattern, String... formats) {
			this.pattern = Pattern.compile(pattern);
			this.formats = formats;
		}
		
		private Pattern pattern;
//		public Pattern getPattern() {
//			return pattern;
//		}

		private String[] formats;
		public String[] getFormats() {
			return formats;
		}
		
		public boolean match(String stringDate) {
			Matcher matcher = this.pattern.matcher(stringDate);
			return matcher.find();
	    }
	}
	
	private static Date tryParseDate(String format, String date) {
		try {
			return TalendDate.TO_DATE(date, format);
		}
		catch(ParseException x) {
			return null;
		}
	}
	
	private static List<DateMatcher> dateMatchers = null;
}