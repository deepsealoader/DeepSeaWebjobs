package routines;

import com.github.romualdrousseau.nari.*;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class GeoCode {

    /**
     * distanceHaversine: return the Haversine distance of 2 geocodes.
     * 
     * 
     * {talendTypes} double
     * 
     * {Category} User Defined
     * 
     * {param} double("lat1") input: The latitude of the first geocode.
     * {param} double("lon1") input: The longitude of the first geocode.
     * {param} double("lat2") input: The longitude of the second geocode.
     * {param} double("lon2") input: The longitude of the second geocode.
     * 
     * {example} distanceHaversine(40.7486, -73.9864, 40.7486, -73.9864) # 0.
     */
    public static double distanceHaversine(double lat1, double lon1, double lat2, double lon2) {
    	double R = 6371e3; // meter
    	double φ1 = lat1 * Math.PI/180; // φ, λ in radian
    	double φ2 = lat2 * Math.PI/180;
    	double Δφ = (lat2-lat1) * Math.PI/180;
    	double Δλ = (lon2-lon1) * Math.PI/180;

    	double a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +
    	           Math.cos(φ1) * Math.cos(φ2) *
    	           Math.sin(Δλ/2) * Math.sin(Δλ/2);
    	
    	double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

    	return R * c; // in meter
    }
    
    /**
     * requirePostalCode: return a geocode filter to check if postal code exists.
     * 
     * {talendTypes} GeoFilter
     * 
     * {Category} User Defined
     * 
     * {example} requirePostalCode() # 0.
     */
    public static GeoFilter requirePostalCode() {
    	return new GeoFilter() {
    		@Override
    		public boolean match(GeoData data) {
    			return !Clean.isNullOrEmpty(data.postalCode);
    		}
    	};
    }
    
    public static String guessDeliveryCode(java.util.List<String[]> customers, String place, Double lat, Double lng) {
    	double min = Double.POSITIVE_INFINITY;
    	String result = null;

    	place = place.replace("Ｃ", "センター");
    	place = place.replaceAll("ＳＤ.+（", "");

    	for(int i = 0; i < customers.size(); i++) {
    		String[] customer = customers.get(i);
    		
    		if(Clean.isNullOrEmpty(customer[15]) || Clean.isNullOrEmpty(customer[16])) {
    			continue;
    		}
    		
    		double x1 = 1 - Clean.Jaccard(customer[4], place);

    		double custLat = Double.valueOf(customer[15]);
    		double custLng = Double.valueOf(customer[16]);
    		double x2 = (lat == null || lng == null) ? 1 : Math.min(GeoCode.distanceHaversine(lat, lng, custLat, custLng) / 430, 1);
    		
    		double dist = Math.sqrt(x1 * x1 + x2 * x2);
    		
    		if (min == Double.POSITIVE_INFINITY || dist < min) {
    			if (x1 < 0.9 && x2 < 1) {
    				min = dist;
    				result = customer[1];
    			} else {
    				result = null;
    			}
    		}
    	}
    	
    	return result;
    }
    
    public static String guessNearestCode(java.util.List<String[]> customers, String place, Double lat, Double lng) {
    	double min = Double.POSITIVE_INFINITY;
    	double min_x2 = 0;
    	String result = null;
    	
    	place = place.replace("Ｃ", "センター");
    	place = place.replaceAll("ＳＤ.+（", "");
    	
    	for(int i = 0; i < customers.size(); i++) {
    		String[] customer = customers.get(i);

    		if(Clean.isNullOrEmpty(customer[11]) || Clean.isNullOrEmpty(customer[12])) {
    			continue;
    		}
    		
    		double x1 = 1 - Clean.Jaccard(customer[4], place);
    		
    		double custLat = Double.valueOf(customer[11]);
    		double custLng = Double.valueOf(customer[12]);
    		double x2 = (lat == null || lng == null) ? 1 : Math.min(GeoCode.distanceHaversine(lat, lng, custLat, custLng) / 45000, 1);
    		
    		double dist = Math.sqrt(x1 * x1 + x2 * x2);
    		
    		if (min == Double.POSITIVE_INFINITY || dist < min) {
    			min = dist;
    			min_x2 = x2;
    			result = customer[1];
    		}
    	}
    	
    	if (result != null && min_x2 < 1) {
    		return result + "?";
    	} else {
    		return "?????????";
    	}
    }
}
