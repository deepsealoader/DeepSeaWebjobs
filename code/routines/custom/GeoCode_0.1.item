package routines;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class GeoCode {

    /**
     * distanceHaversine: return the Haversine distance of 2 geocodes.
     * 
     * 
     * {talendTypes} double
     * 
     * {Category} User Defined
     * 
     * {param} double("lat1") input: The latitude of the first geocode.
     * {param} double("lon1") input: The longitude of the first geocode.
     * {param} double("lat2") input: The longitude of the second geocode.
     * {param} double("lon2") input: The longitude of the second geocode.
     * 
     * {example} distanceHaversine(40.7486, -73.9864, 40.7486, -73.9864) # 0.
     */
    public static double distanceHaversine(double lat1, double lon1, double lat2, double lon2) {
    	double R = 6371e3; // metres
    	double φ1 = lat1 * Math.PI/180; // φ, λ in radians
    	double φ2 = lat2 * Math.PI/180;
    	double Δφ = (lat2-lat1) * Math.PI/180;
    	double Δλ = (lon2-lon1) * Math.PI/180;

    	double a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +
    	           Math.cos(φ1) * Math.cos(φ2) *
    	           Math.sin(Δλ/2) * Math.sin(Δλ/2);
    	
    	double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

    	return R * c; // in metres
    }
}
